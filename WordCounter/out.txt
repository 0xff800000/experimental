 Comme remarques concernant l’emploi de VHDL, on peut citer les points positifs et négatifs suivants [CALVEZ-95a]: - son intérêt pour représenter des modèle hiérarchiques et paramétrables, - son intérêt certain pour la simulation d’un parallélisme, - son intérêt pour les instanciations multiples statiques, et sa restriction gênante pour notre modèle de performance concernant l’instanciation dynamique de blocks ou de process, ce qui serait pratique pour l’instanciation d’activités, - l’intérêt de la surcharge d’opérateurs et de procédures, - la limitation sérieuse concernant l’absence de records variants, - l’impossibilité de définir un package générique et un vecteur non contraint de vecteur non contraint, 0 2 4 6 8 10 12 0 5 10 15 20 25 30 35 40 45 50 "NumberOfDisks" "NumberOfProcessors" Nombre d’usagers Chapitre 4 132 M 
SCORE : 454185


E 15 Notre méthodologie de co-design basée sur la méthodologie MCSE est caractérisée par une approche système, une modélisation selon 3 vues (fonctionnelle, comportementale et architecturale), une architecture cible hétérogène et non figée, une méthode de partitionnement interactif basée sur une évaluation des performances dynamiques, une technique de co-simulation macroscopique et non-interprétée basée sur un modèle d’attributs et une technique de co-synthèse incluant la génération des interfaces matériel/logiciel qui repose sur un modèle de bus (protocole) générique et l’utilisation d’une librairie de fonctions d’adaptation vers un bus spécifique (VME, PCI, I2C, etc 
SCORE : 405975


E 179 - la déclaration d’une entité avec sa clause générique et son port, - la déclaration des modèles de définition de constante, variable, signal, alias et type, - la déclaration des modèles de composant VHDL représentant les éléments de relation du modèle MCSE et leur instanciation, - la déclaration d’un block multiple contenant un block simple utilisé pour la transcription des éléments actifs du modèle MCSE, - la déclaration de l’ordonnanceur et des signaux qui lui sont associés, - la déclaration de l’ensemble des primitives utilisées pour la transcription du modèle de comportement d’un élément actif 
SCORE : 349936


 Le code de sortie du générateur de code synthétisable est également pour l’instant plus simple: - Il n’y a pas de problèmes liés aux limitations sur la généricité des types puisqu’il travaille uniquement avec des bits (niveaux logiques), - un port ne peut avoir qu’un seul producteur et un seul consommateur, - un événement ne peut avoir qu’un seul producteur, - une variable partagée peut avoir plusieurs accès simultanés mais obligatoirement du même niveau hiérarchique 
SCORE : 335652


 Phase 2: Synthèse, génération, évaluation • Conception architecturale et synthèse de la partie matérielle, • Spécification et génération de la partie logicielle, • Synthèse et génération des interfaces entre le matériel et le logiciel, Description fonctionnelle détaillée de Architecture Performances, Specification pour la réalisation Contraintes Phase 1 Phase 2 Corrections, améliorations Contraintes de temps, Spécifications non-fonctionnelles workload locales Corrections globales Corrections Partitionnement approprié Rétro-annotation Modélisation et évaluation Performances (Co-vérification non-interprétée) Partitionnement, allocation Evaluation détaillée(Co-vérification interprétée) Synthèse Matériel Synthèse Logiciel Corrections la partie concernée par le co-design Contraintes de réalisation Synthèse interfaces technologiques Méthodologie de co-design et estimation des performances M 
SCORE : 334436


1, chaque outil de la plate-forme peut être implanté sous la forme d’une architecture générique basée sur trois fonctions principales: - la fonction Load qui permet de créer la structure de données à partir du fichier texte, - la fonction Save qui est la réciproque de la fonction Load et qui consiste à parcourir la structure de données et à exploiter la grammaire correspondante pour générer un fichier texte, - la fonction Transformations qui est spécifique à l’outil et qui définit les manipulations effectuées sur la structure de donnée chargée 
SCORE : 325080


 Les techniques de partitionnement décrites dans la littérature peuvent être classées par: - leur degré d’automatisation allant d’une démarche manuelle à une démarche entièrement automatique, - Les critères influençant le choix d’un partitionnement (contraintes statiques ou dynamiques, sûreté de fonctionnement, flexibilité, testabilité, coûts), - le choix de l’architecture cible figée ou libre, - le degré d’abstraction du modèle représentant les éléments de la spécification du système à partitionner et de l’architecture matérielle allant d’une modélisation macroscopique à une modélisation architecturale détaillée 
SCORE : 322174


 Les critères d'évaluation d'un document de spécifications peuvent être résumés par les qualificatifs suivants: •correct (refléter les besoins effectifs du demandeur et non les envies du concepteur) •complet (réunir toutes les caractéristiques et contraintes sans laisser des points “sous le tapis”) •cohérent (pas de contradictions à l’intérieur du document, attention à ne pas placer la même information à plusieurs endroits dans le document) •compréhensible (structuré et compréhensible pour le client demandeur ou le lecteur) •vérifiable (tout est justifié, en évitant les affirmations qualitatives du type: la vitesse sera assez élevée 
SCORE : 311439


 -E- La classe MetaGen En plus de ceux hérités de la classe GeneratorAll, les attributs importants de la classe MetaGen sont: - la racine de la structure de données du script (root), - la table des constantes (constantVector), - la table des paramètres de configuration du script (configurationVector), Les principales méthodes de cette classe sont chargées de: - la vérification syntaxique et le chargement de la structure de données du script (load), - l’optimisation de la structure de données avant son interprétation (compile), - l’exécution ou plutôt interprétation (interprete), - la transcription en code java (doJavaCode) 
SCORE : 309424


 Parmi les possibilités, citons: - ordonnancement préemptif, non-préemptif, partage équitable ou time sharing (PS, NPS, TS), - ordonnancement par priorité, par date critique ou deadline (P, D) pour le préemptif et le non-préemptif, Ainsi, les attributs associés au constituant actif que nous avons retenus sont: - ‘Power qui est une valeur de la puissance relative (nombre en flottant), (1 par défaut) - ‘Concurrency, qui est un nombre entier positif, (0 pour la valeur infinie) - ‘Policy: (PSP, PSD, NPS, TS), (PSP) - ‘Overhead: un temps, (0) - ‘Level: (Global, Local, Processor, Function, Activity, Operation), (Function) - ‘Priority: un nombre entier croissant dans le sens de la priorité, (1) - ‘Deadline: un temps, c’est-à-dire valeur et unité 
SCORE : 305196


 Ceci permet: - de garder la hiérarchie du modèle, - de garder la trace des entrées/sorties d’une fonction (port map), - d’exploiter la généricité (generic map), - d’exploiter la réplication et la notion de modèle de fonctions (une entité peut être instanciée sous forme de composant ou même directement avec VHDL’93), - d’utiliser l’instanciation multiple, - d’associer plusieurs modèles à une même entité (plusieurs descriptions d’architectures, l’une choisie par configuration) 
SCORE : 300527


 Malgré le niveau d’abstraction du modèle, la simulation des programmes VHDL obtenus à partir des modèles de performance du serveur vidéo temps-réel et du système de communication a permis de constater la nécessité de ressources importantes (puissance de calcul et mémoire) et une durée de simulation un peu trop longue pour trouver rapidement la Validation Système Besoin Vérification Vérification Vérification Vérification Vérification Vérification Performances Spécifications de performances Conception fonctionnelle Modélisation de performances Conception Architecturale Evaluation de performances Réalisation Observation de performances Spécifications fonctionnelles processus de maîtrise des performances processus de conception fonctionnelle Chapitre 8 238 M 
SCORE : 297476


 Bien que relativement lent, ce mode est très utile pour: - la mise au point d’un script: vérification incrémentale, point d’arrêt, exécution pas à pas, visualisation du contenu des variables, etc, - la modification de la structure de données du script et donc du résultat de la génération par un programme extérieur (éditeur orienté par la syntaxe par exemple): le script peut ainsi être modifié de manière interactive par l’utilisateur en fonction de choix d’implantation 
SCORE : 292529


 La démarche de co-design est décomposée en 2 phases: Phase 1: Partitionnement et allocation, évaluation • Décomposition de la solution fonctionnelle d’entrée en une partie logicielle et une partie matérielle compte-tenu des performances et des contraintes de temps à satisfaire, • Spécification de la structure d’exécution (architecture matérielle) et allocation des fonctions sur les composants, • Evaluation et vérification de la solution vis-à-vis des spécifications non-fonctionnelles imposées, ce qui implique une co-simulation 
SCORE : 289800


 Par la suite, nous nous intéressons principalement aux performances dynamiques d’un système qui peuvent aussi se structurer selon 2 catégories: - les performances externes au système telles que: • débit en entrée du système, • débit en sortie du système, • temps de réponse ou de réaction sortie(s) par rapport à entrée(s), temps de latence, • contraintes d’interactivité, • précisions et erreurs tolérées, • capacité globale du système 
SCORE : 282978


 -B- Problèmes liés au "limited lookahead" Considérons le cas de la déclaration d’un sous-type en VHDL décrite par la syntaxe BNF suivante: subtype_declaration::=subtype identifier is subtype_indication subtype_indication::=[resolution_function_name] type_mark [constraint] avec pour simplifier resolution_function_name::=identifier type_mark::=identifier JAVACUP ne peut pas savoir si l’identificateur qui suit le mot clé "is" correspond au nom de la fonction de résolution ou au nom du type 
SCORE : 281098


 -A- Les opérations sur les chaînes de caractères Les opérations de manipulations des chaînes de caractères retenues sont: - la conversion d’un nombre sous la forme d’une chaîne de caractères (ToString), - la concaténation de plusieurs chaînes de caractères (&), - l’obtention du type (nom de la règle de grammaire) d’un noeud de structure (TypeOf), - l’obtention de la première chaîne rencontrée dans un record (LabelOf), - l’obtention de la longueur d’une chaîne de caractères (LengthOf), - l’extraction d’une sous-chaîne dans une chaîne de caractères (SubStringOf) 
SCORE : 274824


 Notre approche de partitionnement en 2 temps (partitionnement système et partitionnement matériel/logiciel) évite les écueils du “défaut de myopie” qui amènerait à trouver un optimum local pour une spécification donnée sans s’être assuré que la spécification résulte elle aussi d’un optimum pour le niveau système: "a local optimization made at the structural level of Design may have a detrimental effect on overall system performance" [KUMAR-96] 
SCORE : 272289


 Le script est un langage que nous avons défini pour décrire de manière concise les manipulations de structures de données à effectuer: chargement d’une structure à partir d’un texte, sauvegarde d’une structure sous forme textuelle, copie d’une structure complète ou d’un noeud de structure, destruction d’une structure complète ou d’un noeud de structure, mise à jour d’un champ d’un noeud et ajout d’un élément dans un ensemble 
SCORE : 271202


 Pour une évaluation des performances, on générera plutôt le système complet et son environnement pour ne pas être obligé de définir de stimuli, - une zone de messages permettant aux générateurs d’afficher des informations durant la génération de code (instructions Display et Warning du script), - une zone de rapport contenant la liste des fichiers générés avec leur nombre de lignes de code et le pourcentage de code généré automatiquement 
SCORE : 270793


 De plus, l’évaluation analytique n’est possible que sur une classe limitée de systèmes et ne permet pas d’analyser correctement ou facilement un certain nombre de constructions tels que: - les politiques d’ordonnancement avec priorité, - les ressources passives (disques, mémoire), - les mécanismes de synchronisation (join, fork), - les protocoles de communications complexes (et non une simple transition de jeton), - les interruptions, - les requêtes d’accès simultanés à une ressource 
SCORE : 268876


 Bien qu’elle soit hiérarchique et incrémentale, nous pensons que cette approche basée sur un multi-formalisme entraîne un morcellement du processus de conception qui a au moins deux conséquences: - le passage d’une phase de conception à l’autre nécessite une transcription de modèle qui peut entraîner des erreurs ou des déformations, - il n’y a pas de traçabilité simple des informations et donc il est plus difficile de vérifier l’adéquation de la solution obtenue par rapport aux spécifications du système 
SCORE : 268430


 La méthodologie de co-design développée est caractérisée par une approche système, une modélisation selon 3 vues (fonctionnelle, comportementale et architecturale), une architecture cible hétérogène et non imposée, une méthode de partitionnement matériel/logiciel interactive et itérative basée sur une évaluation des performances dynamiques par co-simulation et une technique de co-simulation macroscopique et non-interprétée 
SCORE : 266824


7 Bilan sur l’évaluation des performances du serveur vidéo Sur la base de cet exemple, nous pouvons affirmer que l’évaluation des performances dynamiques d’un système par co-simulation n’est pas limitée par la complexité du système et permet d’extraire un ensemble de résultats de performances plus riche que les approches analytiques tels que le débit sur un bus, le taux d’occupation d’une ressource (processeurs logiciels, disques, bus, 
SCORE : 265041


 Les spécifications non-fonctionnelles telles que les performances, la fiabilité, la sécurité, le (Performances, coût, puissance consommée, etc) Spécification de la partie relevant du co-design Sélection de l’architecture & Partitionnement & Exploration de l’espace des solutions possibles synthèse Synthèse des interfaces logicielle Synthèse matérielle Co-Verification Prototypage / fabrication du produit Spécification, conception fonctionnelle et partitionnement Estimation des propriétés du système au niveau système matériel/logiciel et des communications inter-processeurs Allocation & Introduction M 
SCORE : 264438


E 49 Les points essentiels à retenir sont pour l’instant les suivants: - notre méthodologie de co-design basée sur la méthodologie MCSE est caractérisée par une approche système, une modélisation selon 3 vues (fonctionnelle, comportementale et architecturale), une architecture cible hétérogène, une méthode de partitionnement interactif basée sur une évaluation des performances dynamiques et une technique de co-simulation macroscopique et non-interprétée 
SCORE : 262140


 Le concept d’attributs utilisé dans le modèle de performance est très intéressant pour calculer une estimation globale du système à partir des estimations de chaque constituant, obtenir une estimation grossière très tôt dans le cycle de développement (loi empirique pondérée par un ensemble d’attributs), laisser la liberté aux concepteurs d’utiliser des formules d’estimation qui lui sont propres ou encore faire une estimation des coûts 
SCORE : 260454


 Une variable States(i) pour la fonction i comprend: - la variable TaskState représentant l’état de la fonction avec les états: Inactive, Blocked, Waiting, Active, - la variable Power transmettant ainsi le paramètre à la fonction i pour la modification des temps d’exécution, - les variables Priority et Deadline définissant son urgence pour l’ordonnancement (une seule utilisée à la fois par le scheduler compte-tenu de son attribut ‘Policy), Les états d’une fonction et les transitions entre eux sont représentés par la figure 4 
SCORE : 258297


 En effet, comme nous le verrons plus tard le modèle de performance étant basé sur le concept d’attribut, une modification de l’architecture matérielle ne nécessite pas forcément une nouvelle saisie (graphique ou textuelle) du modèle: l’utilisation de paramètres génériques associés aux attributs des éléments du modèle de performance permet de parcourir un espace assez vaste des solutions possibles d’une architecture 
SCORE : 257842


 Le bus au débit maximum de 20 Mbits/s se compose de 4 lignes: - une ligne (Data) de transport des données dont le protocole de communication au niveau bit est similaire à celui utilisé par les liens séries d’un transputer (T800) excepté pour l’acquittement, - une ligne (Ack) utilisée pour l’acquittement de chaque octet transmis, - deux lignes (TokenIn et TokenOut) pour gérer l’accès au bus selon le principe des bus du type anneau à jeton 
SCORE : 255996


 Nous considérons qu’une méthodologie de co-design repose sur l’utilisation de plusieurs techniques de co-simulation: une co-simulation non-interprétée pour l’analyse des performances lors de la phase de recherche de l’architecture et du partitionnement matériel/ logiciel, une co-simulation fonctionnelle détaillée après synthèse (ou co-vérification) pour valider l’implantation 
SCORE : 253197


 Les particularités essentielles du modèle de performance qui ont servies au choix du modèle de simulation sont les suivantes: - instanciations multiples de fonctions, d’activités, d’opérations, d’éléments de relation, - degré de parallélisme de chaque fonction (ou processeur) définissable, ce qui implique une limitation du degré de partage d’une ressource, - création dynamique d’activités, - paramétrage complet du modèle par des attributs: attributs prédéfinis, attributs définis par l’utilisateur 
SCORE : 250785


 Dans le cas d’un ordonnancement utilisant les estampilles des demandes d’accès (l’ordonnanceur ne prenant en compte que les demandes dont la date est inférieure ou égale à la valeur courante du temps de simulation now), deux politiques sont applicables: - une politique d’ordonnancement au plus tôt, - une politique d’ordonnancement au plus tard: cette solution a l’avantage de privilégier les accès aux débits élevés par rapport à ceux correspondant à des débits faibles 
SCORE : 250637


 processeur 2 + logiciel processeur 1 + logiciel carte 1 carte 2 logiciel 1 logiciel 2 Application Système Ve Vi Vs F1 F2 MVI E R Etape 1 Spécification Etape 2 Conception fonctionnelle Etape 3 Partitionnement Adaptation Implantation Etape 4 Réalisation Description externe Description fonctionnelle détaillée exécutive Description de la réalisation Description Description fonctionnelle Niveau spécification Niveau fonctionnel Niveau répartition Niveau interfaces Niveau exécutif Niveau réalisation Cahier des charges 4 3 2" 2’ 2 1 0 Modèle de description d’un système Démarche Allocation implantation Description fonctionnelle avec répartition sous-ensemble 1 sous-ensemble 2 Définition de la réalisation Allocation ETUDES DE CAS 6 M 
SCORE : 250356


 processeur 2 + logiciel processeur 1 + logiciel carte 1 carte 2 logiciel 1 logiciel 2 Application Système Ve Vi Vs F1 F2 MVI E R Etape 1 Spécification Etape 2 Conception fonctionnelle Etape 3 Partitionnement Adaptation Implantation Etape 4 Réalisation Description externe Description fonctionnelle détaillée exécutive Description de la réalisation Description Description fonctionnelle Niveau spécification Niveau fonctionnel Niveau répartition Niveau interfaces Niveau exécutif Niveau réalisation Cahier des charges 4 3 2" 2’ 2 1 0 Modèle de description d’un système Démarche Allocation implantation Description fonctionnelle avec répartition sous-ensemble 1 sous-ensemble 2 Définition de la réalisation Allocation ETUDES DE CAS 6 M 
SCORE : 250356


 Reception L_ind[1:n] Emission L_req Start Time_out P_send P_ack ComSystem P2 Bus structure exécutive a) Structure functionnelle et exécutive P1 Prod Cons ALLOCATION Prod[1:m] Cons[1:n] D Watchdog structure fonctionnelle Reception L_ind[1:n] Emission L_req Start Time_out P_send P_ack ComSystem Prod Cons Prod[1:m] Cons[1:n] D Watchdog P1 P2 b) Structure mixte ‘Concurrency and ‘Power P_send_out P_ack_in P_send_in P_ack_out Interfaces Int Int P1 P2 Bus c) Interfaces matérielles/logicielles ComPart Répartition géographique Le modèle de performance de MCSE M 
SCORE : 249384


2 PERSPECTIVES Les perspectives envisageables en prolongement direct de cette thèse concernent 3 objectifs importants: l’enrichissement de l’estimation des propriétés des systèmes par une estimation du temps d’exécution des opérations élémentaires et des performances statiques d’un système, l’enrichissement des concepts du modèle de performance pour l’analyse de la sûreté de fonctionnement et de la tolérance aux fautes des systèmes, le changement du niveau de granularité du partitionnement matériel/logiciel 
SCORE : 244508


 En effet, le modèle résultant va de cette manière servir comme modèle intermédiaire entre une spécification fonctionnelle pour laquelle la structure fonctionnelle n’existe pas encore et la CmdUsager[1:k] SéquenceOut[1:n] Comportement du système vis-à-vis d’un usager Contrôle Usager RepUsager[1:k] SéquenceIn[1:n] CmdCanalLec[1:n] RepCanal[1:k] Séquences CmdCanalEnr[1:n] CanauxLibresLec CanauxLibresEnr FragmentsLibre Comportement Contrôle Lecture du système pour chaque lecture Comportement Contrôle Enregistrement du système pour chaque enregistrement Le modèle de performance de MCSE M 
SCORE : 244485


 Cette décomposition fonctionnelle fait apparaître qu’un script peut donc se décomposer en deux parties: - une partie Analyse qui correspond au parcours ordonné de la structure de données McseDs et à l’extraction d’informations pertinentes pour la génération, - une partie Génération qui exploite les informations obtenues de l’analyse et les structures génériques des templates pour générer la structure de données de sortie 
SCORE : 240149


 Il s’agit d’implanter: - le programme de chargement du script de manière à aboutir à la structure de données (phase de vérification syntaxique et chargement), - le programme de parcours de la structure du script pour son optimisation avant exécution (phase d’optimisation et de contrôles sémantiques), - le programme de parcours et d’exécution de toutes les opérations élémentaires (phase d’exécution) 
SCORE : 237500


10 CONCLUSION Les principes de transcription du modèle de performance en un programme VHDL simulable présentés dans ce chapitre se sont inspirés: - des concepts des exécutifs temps réels pour l’implantation des processeurs à degré de ressource limité, - du mécanisme de communication par jeton du modèle UVa pour la communication entre éléments de relation et composants actifs, - de l’implantation en VHDL des SpecCharts pour le parallélisme d’activité et l’achèvement forcé d’activité 
SCORE : 235765


 Ils se sont très vite aperçus que leurs besoins allaient bien au delà de la co-simulation et que pour réduire la durée des développements et accroître la complexité des systèmes et la qualité de conception, il fallait utiliser une méthodologie de conception complète et les outils supports associés permettant de développer conjointement la partie matérielle et logicielle tout au long du cycle de développement 
SCORE : 235668


 Pour faciliter la description du comportement du système vis à vis de son environnement, le modèle ERA de la base de données a été enrichi avec les concepts de l’approche objet, tel que: - l’agrégation (démarche ascendante)/décomposition (démarche descendante) qui permet éventuellement de définir des structures récursives, - la généralisation/spécialisation derrière laquelle se trouve la notion d’héritage 
SCORE : 234948


 La technique de génération de code développée repose sur les concepts d’analyseur syntaxique et de méta-structure avec lesquels on obtient une structure de données image d’un texte source, le concept de template qui est un modèle générique du résultat attendu et le langage de description des manipulations à effectuer sur les structures de données que nous avons nommé Script 
SCORE : 234058


3 La nécessité d’un nouveau cycle de développement Sachant que l’implantation matérielle permet d’obtenir des performances dynamiques plus élevées qu’une implantation logicielle mais à un coût plus élevé, depuis l’avènement de la technologie VLSI et des premiers microprocesseurs, les équipes de conception recherchent le meilleur partitionnement matériel/logiciel permettant de respecter les contraintes de coûts et de performances imposées 
SCORE : 232635


 Le tableau comporte la taille du code script, la taille du code source MCSE utilisé comme exemple, la taille des templates utilisés par les générateurs, la taille du code généré, le temps de génération en mode interprété, la taille du code Java obtenu par transcription du script et le temps d’exécution du programme Java obtenu 
SCORE : 231385


 -B- Partage des informations entre différentes branches d’un parallélisme L’utilisation des attributs d’une information reçue par des branches différentes d’une concurrence nécessite de déplacer la déclaration de la variable utilisée pour stocker l’information reçue de la partie déclarative d’un process vers la partie déclarative du block et de déclarer cette variable sous la forme d’une "shared variable" (VHDL’93) 
SCORE : 230436


 - une analyse statique basée sur des résultats de techniques de synthèse qui nécessite une description des fonctions au moins au niveau algorithmique (synthèse haut niveau) pour extraire des caractéristiques [NARAYAN-92b] telles que la surface de silicium occupée, la puissance dissipée, le nombre de broches, la taille du programme code, la taille de la mémoire nécessaire, etc 
SCORE : 229908


 Le modèle de comportement repose sur: - des activités dynamiques décomposables (raffinement) ou élémentaire (algorithme ou temps d’exécution), - des opérateurs de composition d’activités (séquence, parallélisme, alternative, répétition et attente conditionnelle), - des opérateurs de construction de condition (attente sur une entrée), - des opérateurs de construction d’action (génération d’une sortie) et des attributs pour paramétrer le modèle 
SCORE : 229559


3 LES CONCEPTS DU MODELE DE PERFORMANCE DE MCSE Pour disposer d’une démarche de développement intégrant au mieux la maîtrise des performances simultanément à la maîtrise des fonctionnalités, une bonne solution est de disposer d’un modèle unique permettant de dériver par transformations et enrichissements successifs, à partir des spécifications, une solution de conception puis une solution d'implantation et simultanément de décrire et d’évaluer les propriétés de performances à chaque stade 
SCORE : 227528


 - La définition de la réalisation (aussi appelée conception détaillée), le but étant de trouver une structure d'exécution comme support matériel, ainsi qu'une implantation logicielle sur la structure matérielle retenue, en considérant toutes les contraintes technologiques: contraintes de répartition, contraintes de temps, contraintes électriques 
SCORE : 227020


 - La définition de la réalisation (aussi appelée conception détaillée), le but étant de trouver une structure d'exécution comme support matériel, ainsi qu'une implantation logicielle sur la structure matérielle retenue, en considérant toutes les contraintes technologiques: contraintes de répartition, contraintes de temps, contraintes électriques 
SCORE : 227020


 Les fonctions du système sont les suivantes: - la lecture de séquence(s) qui assure la sortie fragment par fragment de la séquence choisie au débit souhaité, - l’enregistrement de séquence(s) qui reçoit en temps-réel une séquence et la mémorise, - la gestion des requêtes de chaque utilisateur qui alloue si nécessaire un canal et transmet l’ordre pour la lecture ou pour l’enregistrement La figure 7 
SCORE : 226537


E subtype_declaration_with_resolution_function_name::= subtype identifier is resolution_function_name type_mark [constraint] subtype_declaration_without_resolution_function_name::= subtype identifier is type_mark [constraint] -C- Problèmes liés au recouvrement d’alternatives Considérons les règles syntaxiques suivantes: name::= identifier  
SCORE : 223168


 L’utilisation d’un modèle de performance ne nécessite pas une description aussi détaillée que pour les estimateurs cités précédemment et permet d’extraire un nombre plus important de résultats de performances dynamiques du partitionnement choisi: temps de latence, débit sur un bus, taux d’occupation d’une ressource, nombre moyen de messages dans un port de communication, etc 
SCORE : 221786


 Dans la plate-forme d’outils en cours de développement pour la méthodologie MCSE, le modèle de performance de MCSE est ou doit être transcrit vers différents langages cibles: VHDL comportemental ou C++ pour l’évaluation des performances (partitionnement et co-simulation), VHDL de niveau RTL pour la synthèse matérielle et C avec l’emploi d’un exécutif temps-réel pour la synthèse logicielle 
SCORE : 219569


 Pour gérer ces piles, les instructions à disposition sont: - l’obtention de la taille de la liste (SizeOf), - l’obtention d’un élément de la liste à partir de son index (PeekAt), - la recherche d’un élément dans la liste à partir de sa référence (IsIn), - la recherche d’un élément dans la liste à partir de son type et de son nom (Search), - la réinitilisation d’une variable (ResetVariable) 
SCORE : 219501


 L’élément délicat qui est le processeur logiciel pour la co-simulation, est représenté par sa puissance qui intervient comme un facteur multiplicatif du temps d’exécution des opérations (attribut ‘Power), son degré de concurrence (attribut ‘Concurrency), sa politique d’ordonnancement des tâches (attribut ‘Policy) et son temps de commutation de tâches (attribut ‘Overhead) 
SCORE : 219211


 Dans le cas contraire, le concepteur doit trouver le meilleur compromis entre une implantation tout en matériel aux performances dynamiques et coût élevés et une implantation complètement logicielle aux performances et coût faibles, ce qui en co-design correspond à la problématique du partitionnement matériel/logiciel 
SCORE : 217777


 Pour chaque projet, cette activité concerne : - le management : planification, organisation, direction, contrôle et suivi du projet, - l'obtention de la conformité : planification des tests, nature des tests techniques à utiliser, les résultats, conformité et certification, - la gestion de la documentation : spécification des documents, planification des revues, méthodes de gestion, mises à jour  
SCORE : 217300


 Pour chaque projet, cette activité concerne : - le management : planification, organisation, direction, contrôle et suivi du projet, - l'obtention de la conformité : planification des tests, nature des tests techniques à utiliser, les résultats, conformité et certification, - la gestion de la documentation : spécification des documents, planification des revues, méthodes de gestion, mises à jour  
SCORE : 217300


 Le modèle structurel, qu’il soit fonctionnel ou exécutif ou mixte, explicite les constituants et leur signification par leur nom et leur rôle, les échanges possibles entre constituants (signification et structure des données) mais n'indique rien quant au comportement du modèle car le comportement des fonctions et processeurs n’est pas défini 
SCORE : 216619


E - le problème de connexion entre éléments de relation et composants actifs qui a été déjà présenté dans le chapitre 4 consacré aux règles de transcription du modèle de performance en VHDL, - le problème de la gestion des indices du vecteur d’état associé à un ordonnanceur, - le problème du partage d’informations entre différentes branches d’un parallélisme 
SCORE : 216493


 Plusieurs critères peuvent intervenir sur le double choix (architecture et allocation) d’un partitionnement tels que par exemple: - les performances statiques (consommation, surface de silicium, coûts, taille du code, taille de la mémoire, etc) et dynamiques (contraintes de temps, débit, temps de latence, taux d’occupation, etc) 
SCORE : 216187


 En effet, les contraintes telles que la flexibilité, la testabilité, l’utilisation de composants du commerce ou de technologies maîtrisées par l’entreprise, la sûreté de fonctionnement et les coûts interviennent principalement au niveau du partitionnement système qui a pour but le découpage du système en un ensemble de partitions où chaque partition devra s’exécuter soit en logiciel soit en matériel 
SCORE : 215653


 Le chapitre 7 valide les concepts du modèle de performance et les méthodes de co-simulation et de partitionnement développées en présentant deux exemples d’application: le serveur vidéo temps-réel fourni par le CCETT de Rennes et un système de communication distribué basé sur l’interconnexion d’un ensemble de cartes identiques avec un bus série du type anneau à jeton 
SCORE : 215370


1 L’ACTIVITE DE CO-DESIGN La complexité croissante des systèmes pour lesquels la réalisation résulte de l’association d’une partie matérielle et d’une partie logicielle, la diversité des choix technologiques et les contraintes de coûts et délais de plus en plus sévères nécessitent l’utilisation de nouvelles méthodologies et outils logiciels associés pour diminuer leur durée de conception et accroître leur qualité 
SCORE : 215343


 Cette approche est intéressante mais pour l’instant le concepteur dispose de peu de résultats quantitatifs en retour pour évaluer la partie logicielle (statistiques sur les interconnexions et les variables partagées) et la partie matérielle (statistiques sur le nombre d’états et sur le nombre d’opérateurs de la partie opérative) obtenues de manière à les comparer aux contraintes imposées 
SCORE : 215285


 F[1:n] Pt[1:n] N -> N F[1:n] Pt N -> 1 F1 Pt[1:n] 1 -> N F[1:k] Pt[1:m] K -> M La Fonction F1 peut utiliser l’un quelconque des ports du vecteur Pt[1:n] en le désignant par son indice (utilisation de l’attribut ‘Path pour la sélection) Chaque fonction F[i] peut accéder à tous les éléments du vecteur Pt[1:m] (attribut ‘Id pour désigner la source et attribut ‘Path pour la destination) 
SCORE : 215188


 L’activité de vérification et d’analyse globale vise à garantir au mieux que les concepteurs disposent de spécifications de réalisation complètes, cohérentes et optimales vis-à-vis des contraintes permettant d’aboutir à un système complet en accord avec les spécifications du niveau système et donc en accord avec toutes les exigences du client 
SCORE : 213253


 Règles de Génération appelées lors de l’analyse Opérations effectuées par le générateur VHDL GenerateComponentFromNameAndRange Informations fournies: ComponentName ComponentRangeExpression ComponentMultiple, AttributesList Si premier composant généré alors mise à jour des noms de l’entité et du package et leurs contextes Sinon création d’un block multiple et/ou simple Si l’attribut ‘Concurrency est limité alors instanciation d’un composant ordonnanceur et déclaration des signaux associés Loading McseModel 
SCORE : 211802


E communauté du co-design a donc pris peu à peu conscience que le partitionnement automatique plus ou moins rejeté par le milieu industriel [TUCK-97], n’est efficace que sur une classe limitée de systèmes et que les recherches doivent s’orienter vers des solutions plutôt de nature semi-automatique guidées par le concepteur et basées sur des outils d’estimation rapides 
SCORE : 211122


 Les contraintes influentes que sont les performances, la sûreté de fonctionnement au sens large du terme, le coût, servent de base pour déterminer la ou les parties qui conduisent à une réalisation purement logicielle, à une réalisation purement matérielle, à une réalisation où une variation est possible entre le matériel et le logiciel (partie qualifiée de co-design) 
SCORE : 210652


 Les progrès réalisés aussi bien dans le domaine du génie logiciel (environnement de programmation, langages de haut niveau, méthodes et langages orientés objet) que dans le domaine du génie matériel (technologie VLSI, outils de synthèse logique, outils de synthèse de haut niveau) permettent de réaliser des systèmes de plus en plus complexes 
SCORE : 210091


 D'une manière générale, le concepteur doit avoir des idées pour être créatif mais doit faire abstraction de son idée a priori, sinon il conduira son développement sur la base de cette idée inhibant alors l’évaluation de toute autre solution peut-être meilleure 
SCORE : 207958


 D'une manière générale, le concepteur doit avoir des idées pour être créatif mais doit faire abstraction de son idée a priori, sinon il conduira son développement sur la base de cette idée inhibant alors l’évaluation de toute autre solution peut-être meilleure 
SCORE : 207958


 Pour avoir un principe de création de la structure de données indépendant de la grammaire, nous avons défini pour la spécification des règles de production un modèle de modèle de structure de données ou méta-structure basé sur la composition de quatre éléments de base qui sont la séquence d’éléments, l’optionnel, l’alternative et la liste ou ensemble 
SCORE : 207578


7 5 10 15 20 25 "k=3" "k=6" "k=9" ms n n n bit/s μ μ Temps de latence des messages Débit sur le bus taux d’occupation du processeur 0 50 100 150 200 250 300 350 400 450 5 10 15 20 25 30 "k=3" "k=6" "k=9" 1e+06 1 
SCORE : 207262


E 181 La tendance naturelle du concepteur de générateur va être d’écrire les règles de cette partie de script de façon à obtenir un comportement du générateur identique à celui d’une transcription manuelle: c’est à dire qu’il va suivre l’ordre chronologique et structurel suivi lors d’une saisie manuelle du code cible 
SCORE : 207243


 L’utilisation de paramètres génériques (paramètres n et K par exemple) associés aux attributs des éléments du modèle de performance permet aussi de parcourir un espace assez vaste des solutions possibles d’un partitionnement sans nécessiter de mise à jour du modèle de performance et de nouvelle génération du code VHDL équivalent 
SCORE : 205697


 Il s'agit d'introduire la répartition géographique et les interfaces physiques pour satisfaire les contraintes technologiques, puis après avoir défini le partitionnement matériel/logiciel compte-tenu des contraintes de temps et autres contraintes de réalisation, de déterminer les spécifications des parties matérielles et logicielles 
SCORE : 204864


 Les performances statiques de chaque processeur matériel (surface de silicium occupée, puissance consommée, nombre de broches) dérivent des techniques de synthèse comportementale [NARAYAN-92b] [VAHID-92] ou d’estimations à priori et celles des processeurs logiciels (taille du code, taille de la mémoire nécessaire) des techniques de compilation 
SCORE : 202564


 Pour avoir un principe de création de la structure de données indépendant de la grammaire, nous avons défini pour la spécification des règles de production un modèle de modèle de structure de données ou méta-structure basé sur la composition de trois constructions de noeuds: le record ou ensemble fini d’éléments, l’alternative et la liste 
SCORE : 202410


 Pour avoir un couplage en ligne entre le simulateur VHDL et l’outil d’analyse de trace, il est possible de déclarer automatiquement une table de codage complète et de ne sortir par le simulateur que les occurrences de trace dont les codes sont nécessaires pour calculer les indices de performances définis au niveau de l’outil d’analyse de trace 
SCORE : 202180


 L’ensemble des instructions du script est réparti sur trois classes de la seconde catégorie: - la classe VariableScript qui implante les variables du script, - la classe NodeDs qui implante un noeud de structure de données, - la classe GeneratorAll qui contient les méthodes qui ne sont rattachées ni aux variables du script ni aux noeuds d’une structure de données 
SCORE : 201625


E 5 exemple, le projet américain RASSP développe actuellement une méthodologie de co-design en se basant sur l’utilisation d’un ensemble d’outils commerciaux et universitaires pour couvrir toutes les phases de développement d’un projet et en utilisant principalement le langage VHDL comme format d’échange entre les différents outils [SCHAMING-96] 
SCORE : 200495


 Il faut regrouper tous les types des éléments de relation en un seul type (record) ou définir autant de primitives d’accès qu’il y a de types différents (surcharge de procédure), - sur la déclaration des signaux connectant l’entité ou le block d’un élément actif au composant d’un élément de relation 
SCORE : 200346


 Comme de nombreux travaux ont déjà été effectués sur les estimateurs analytiques (analyse des contraintes temporelles, technique de synthèse, réseaux de Petri stochastiques et de files d’attente) nous avons opté pour une technique différente et complémentaire: l’évaluation des performances dynamiques d’un partitionnement par co-simulation 
SCORE : 200120


 Contrairement à C++ qui permet de programmer sans utiliser nécessairement une approche et des concepts objet, Java n’autorise de travailler qu’avec des classes d’objets et supporte tous les concepts de la programmation orientée objet: hiérarchie de classes, héritage, encapsulation (package), polymorphisme (méthode de même nom), réutilisation (Java Beans), etc 
SCORE : 199403


 - la sécurité: La prise en compte de la sûreté de fonctionnement peut induire des contraintes au partitionnement matériel/logiciel (redondance de composants matériels et de tâches logicielles par exemple), - laflexibilité: l’implantation logicielle d’une fonction offre des possibilités d’évolution plus importantes qu’une implantation matérielle, Chapitre 2 22 M 
SCORE : 199088


 L’évaluation des performances dynamiques d’un système par co-simulation n’est pas limitée par la complexité du système et permet d’extraire un ensemble de résultats de performances plus riche que les approches analytiques tels que le débit sur un bus, le taux d’occupation d’une ressource (processeurs logiciels, disques, bus, 
SCORE : 199035


E Durant le processus de conception qui consiste en une succession de transformations de la spécification initiale en un modèle de plus en plus structurel, lorsqu’on s’approche de la solution interne d’un système, la différence entre action et activité tend à se réduire: une action demande du temps pour son exécution et une activité joue un rôle temporaire dans le système 
SCORE : 199015


 Comme la taille des buffers d’anticipation doit être dynamique, l’ensemble des buffers d’anticipation doit être implanté non pas sous la forme d’un ensemble disjoint de fifos mais dans une zone mémoire commune dont la dimension sera calculée avec une valeur moyenne de A de 4 
SCORE : 198954


E 61 Tous les éléments du modèle sont définis avec des attributs spécifiques, par exemple, le temps d’exécution (attribut ‘Time) d’une activité élémentaire, le temps de lecture (attribut ‘Read) et d’écriture (attribut ‘Write) pour une variable partagée, la capacité d’un port (attribut ‘Capacity), le degré de concurrence d’un processeur (attribut ‘Concurrency), etc 
SCORE : 196150


 2- Quand le producteur veut faire un accès au port, il assigne la valeur ActiveReq au signal Status et se bloque ce qui libère sa ressource d’exécution et comme le port continue à lui assigner la valeur InactiveAck, la fonction de résolution lui donne la valeur provenant du producteur (ActiveReq est équivalent à demande d’allocation) 
SCORE : 195694


 Ce générateur a demandé un temps de développement plus long (6 mois) que les deux autres (3 mois) car d’une part les règles de transcription sont plus complexes et d’autre part il n’a pas pu bénéficier contrairement aux deux autres de l’expérience acquise sur l’implantation d’un générateur équivalent mais limité au modèle fonctionnel de MCSE 
SCORE : 195114


 Notre modèle autorise aussi la co-simulation macroscopique et non-interprétée des fonctions logicielles et des composants matériels, ce qui permet alors au concepteur de trouver par une démarche itérative le partitionnement et l’allocation optimale vis à vis des critères de coûts et de performances qui lui sont imposés 
SCORE : 194828


 Introduction de la répartition Introduction des interfaces Solution fonctionnelle détaillée contraintes de temps allocation implantation structure d’exécution Spécification des implantations logicielles Spécification de la réalisation matérielle Solution fonctionnelle + spécifications technologiques Détermination de la structure d’exécution Document pour la réalisation contraintes électriques contraintes de développement contraintes de répartition 1 - PRESENTATION GENERALE DE LA METHODOLOGIE M 
SCORE : 194391


 Introduction de la répartition Introduction des interfaces Solution fonctionnelle détaillée contraintes de temps allocation implantation structure d’exécution Spécification des implantations logicielles Spécification de la réalisation matérielle Solution fonctionnelle + spécifications technologiques Détermination de la structure d’exécution Document pour la réalisation contraintes électriques contraintes de développement contraintes de répartition 1 - PRESENTATION GENERALE DE LA METHODOLOGIE M 
SCORE : 194391


E - AnalyzeAlternateActivity pour l’analyse de l’alternative, - AnalyzeRepeatedActivity pour l’analyse de l’itération, - AnalyzeConcurrentActivity pour l’analyse du parallélisme, - AnalyzeActivitySequence pour l’analyse de la séquence, - AnalyzeAlternateConditionalActivity pour l’analyse de l’attente conditionnelle, - AnalyzeActivity et AnalyzeActivityDef pour l’analyse d’une activité composée, - AnalyzeActivityName pour l’analyse d’une activité élémentaire, - AnalyzeBehaviorCondition pour l’analyse d’une condition d’attente, - AnalyzeActions pour l’analyse d’une génération de sortie, - AnalyzeActivityInstance pour l’analyse d’une instance d’activité 
SCORE : 194278


 Bien que dans un premier temps le code VHDL utilisé pour la simulation ait été écrit manuellement de manière à identifier les règles de transcription du modèle de performance en VHDL, ces deux exemples ont ensuite servi aux tests du générateur de code présenté dans le chapitre précédent 
SCORE : 194276


 Parmi celles-ci, les exigences de performance quantifient le comportement du système vis-à-vis de critères d’observation qui peuvent être externes au système (temps de réponse, débit, etc) ou internes (taux d’utilisation de ressources, capacité d’un bus), etc [CALVEZ-98a] 
SCORE : 193886


 -A- Gestion des indices du vecteur d’état des tâches La limitation du degré de concurrence d’un élément actif par l’attribut ‘Concurrency nous oblige à instancier un composant ordonnanceur et à gérer les indices d’un vecteur regroupant l’état des tâches (process VHDL) qui peuvent être situées à des niveaux hiérarchiques différents 
SCORE : 193841


 Par exemple, le projet américain RASSP développe actuellement une méthodologie de co-design en se basant sur l’utilisation d’un ensemble d’outils commerciaux et universitaires pour couvrir toutes les phases de développement d’un projet et en utilisant le langage VHDL comme format d’échange entre les différents outils [HEIN-95] 
SCORE : 193769


 Pour l’exemple du serveur vidéo présenté dans le chapitre 7, avec la trace générée par simulation et l’outil d’analyse de trace, on observe: - le nombre d’utilisateurs actifs (NbUsers), - la charge globale imposée au système (Throughput), - le nombre de fragments dans la fifo interne d’un canal (Mess count), - le taux d’occupation d’un Processeur Execution 
SCORE : 192820


 Cette méthodologie conduit à la conception et la réalisation de composants, de cartes, de systèmes à la fois pour les aspects matériel et logiciel, ainsi qu’au développement de logiciels en divers langages de manière à particulariser le matériel pour que celui-ci réponde aux fonctionnalités exigées de l'application [CALVEZ-90], [CALVEZ-93a] 
SCORE : 192454


 De plus, contrairement aux estimateurs statiques utilisés dans le partitionnement automatique, notre approche permet de faire une analyse assez fine des comportements et des performances très tôt dans le cycle de développement et éventuellement dès l’étape de spécification (étude de faisabilité du projet) 
SCORE : 191812


 } Les informations mises à disposition pour la génération d’une condition d’évolution simple sont: son nom, son type, le type de la donnée transmise, la dimension de l’interface ou de l’élément de relation qui lui sont rattachés, ses attributs et l’indicateur BlackBall utilisé pour l’instanciation multiple 
SCORE : 191504


 L’objectif est alors d’obtenir une zone plus réduite des solutions appropriées pour tendre vers une solution globalement optimale et d’appliquer ensuite sur cette zone notre technique d’estimation des performances dynamiques afin d’obtenir la solution optimale vis à vis des contraintes imposées 
SCORE : 191247


 Au cours du cycle de développement, la co-simulation repose donc sur différents modèles et vise plusieurs objectifs: elle sert à faire une vérification fonctionnelle ou comportementale détaillée (modèle interprété), une évaluation des performances (modèle non interprété) ou les deux simultanément (modèle hybride) 
SCORE : 190452


3 Les concepts complémentaires pour les performances La modélisation de performances nécessite d’ajouter la notion de temps d’exécution des opérations ou des actions pour pouvoir extraire des propriétés temporelles globales d’un système (vues par ses entrées et sorties) à partir des propriétés temporelles locales 
SCORE : 190085


5 PARTIE GENERATION DU SCRIPT La partie génération représente la plus grosse partie du code (69%) car le langage VHDL est un langage très déclaratif et aussi parce que nous avons décidé de garder la hiérarchie du modèle source dans le modèle final (redondance d’information), ceci pour bien exploiter VHDL et favoriser la réutilisation de modèles internes 
SCORE : 190030


 Comme entrées/sorties, il utilise d’une part sa variable State par laquelle son environnement (le niveau hiérarchique supérieur) lui indique la disponibilité de la ressource d’exécution, d’autre part la variable States qui regroupe l’état de toutes les fonctions internes à exécuter 
SCORE : 189893


 Le monitoring, terme aussi utilisé pour l’extraction de performances, concerne d’une manière générale l’observation de: - l’état des fonctions, activités, opérations, processeurs, - l’état des éléments de relation, - le respect de certaines contraintes telles que des contraintes de temps par exemple 
SCORE : 189864


 Hou [HOU-96] propose cependant une heuristique basée sur la construction progressive de groupes de process (clustering based algorithm) dont la fonction de coût dépend de la communication inter-processeurs, des temps de commutation de contexte (approche préemptive et non synchrone) et du taux d’utilisation des ressources 
SCORE : 189302


 Pour des problèmes de convention de nom et de restriction au niveau du port map du composant gérant l’élément de relation (le simulateur utilisé n’accepte pas l’opérateur de concaténation & de signaux lors du port map), nous utilisons des alias pour distribuer les éléments du vecteur sur les différentes fonctions 
SCORE : 188359


8 AMELIORATIONS Les améliorations possibles à court terme concernent la réduction du temps de génération du code VHDL, le mode de couplage entre le simulateur du modèle de performance et l’outil d’analyse de trace et la transcription automatique de VHDL vers C ou réciproquement des algorithmes des activités élémentaires du modèle de performance d’un système 
SCORE : 187920


 Le nombre réduit d’attributs associés à une ressource active limite l’intérêt de ce modèle pour l’évaluation d’un partitionnement matériel/logiciel et la co-simulation: il n’est pas possible de définir la politique d’ordonnancement car une ressource active est non préemptible, le temps de commutation de tâches est nulle, etc 
SCORE : 185280


 waiting Preemption Le chronogramme ci-dessus permet de voir pour l’exemple du serveur vidéo l’effet de préemption du processeur: la fonction de lecture du canal 5 perd le processeur au profit de celle du canal 4 et ne le récupère qu’après la fin d’activation de la fonction lecture du canal 6 
SCORE : 184970


 Les variables State de chaque process sont utilisées pour, d’une part activer les process A1, A11, A111, A112, d’autre part pour observer l’état de fin (Exit) correspondant à l’un des carrés ce qui entraîne la fin de A1, l’arrêt de tous les process fils c’est-à-dire A11, A112 et A111 (s’obtient par State=ExitNow) et le retour en position initiale de tous les process pour la prochaine activation 
SCORE : 184651


 Il s’agit avant tout d’utiliser les travaux réalisés ou actuels sur cet aspect (Program Analysis): technique de profiling, utilisation d’un modèle ISA [KNUDSEN-95] [BALBONI- 95] [ROSE-96] ou transformation de la description en un graphe flot de contrôle/donnée (CDFG) et analyse du graphe obtenu [NARAYAN-92b] [MALIK-95] [GUPTA-95] 
SCORE : 184386


3 montre le modèle de comportement de la fonction F2 selon 2 axes: l’axe temporel du haut vers le bas qui représente le séquencement (expression du contrôle), l’axe spatial de la gauche vers la droite qui représente les échanges, les transactions, le flot de données, en un mot les interdépendances (expression du flux) 
SCORE : 183662


 } Les informations mises à disposition de la règle de génération d’un élément de relation sont le type de l’élément (Port, Var, Ev), sa dimension, son nom, sa liste d’attributs, le nombre d’interfaces du niveau et le nombre total d’interfaces du système rattachées à l’élément 
SCORE : 183351


 -A- Partitionnement, allocation et évaluation La phase 1 concerne la recherche d’une architecture matérielle appropriée comme support de la description fonctionnelle détaillée et qui va permettre d’aboutir à une solution opérationnelle qui satisfait les contraintes de performances, les contraintes de temps, le coût, etc 
SCORE : 183320


 Le tableau suivant donne pour chaque exemple la taille en K octets du code source MCSE, la taille du code VHDL généré (entité uniquement), le temps de génération en mode interprété et le temps de génération en mode compilé (transcription du script en code Java) 
SCORE : 183169


1 Définition d’une grammaire Une grammaire est un ensemble fini de règles de la forme "coté gauche ::= coté droit" où le coté gauche représente un symbole non terminal et le coté droit est un ensemble éventuellement vide de symboles non terminaux et terminaux 
SCORE : 183102


 Le formalisme utilisé est proche de celui de la méthode OMT ou plutôt de la méthode unifiée puisque lors de l’analyse fonctionnelle on retrouve également un concept proche de celui du concept de scénario (ou Use Cases au sens de Jackobson) qui permet d’associer un comportement ("Behavior Diagram") aux entités (ou objets) 
SCORE : 182604


 En aval de la conception, la phase de définition de la réalisation propose une démarche systématique qui conduit, à partir d'une solution fonctionnelle, à choisir la technique de réalisation la plus appropriée pour le problème (type de technologie, répartition matériel/ logiciel, respect des contraintes de temps 
SCORE : 182496


 En aval de la conception, la phase de définition de la réalisation propose une démarche systématique qui conduit, à partir d'une solution fonctionnelle, à choisir la technique de réalisation la plus appropriée pour le problème (type de technologie, répartition matériel/ logiciel, respect des contraintes de temps 
SCORE : 182496


 Une estimation des performances que l’on peut considérer plutôt statiques des systèmes nous apparaît utile d’une part pour aider le concepteur lors du partitionnement système et d’autre part pour réduire l’espace des solutions possibles à parcourir lors du partitionnement Conclusions et Perspectives M 
SCORE : 182479


 Pour plusieurs entrées de ressources, le OU conduit à l'obtention d'une ressource libre parmi l'ensemble des ressources possibles, le ET sans ordre correspond au cas de la nécessité de disposer de toutes les ressources, et le ET avec ordre impose l'ordre d'obtention des ressources 
SCORE : 182278


 L'expérience nous a montré que cette approche basée sur les données conduit à des structures fonctionnelles simples (réduction des couplages exprimant des relations d'ordre) et plus structurées que l'approche basée sur les fonctions, qui conduit à exprimer la structure comme décrivant un enchaînement de transformations 
SCORE : 182140


 L'expérience nous a montré que cette approche basée sur les données conduit à des structures fonctionnelles simples (réduction des couplages exprimant des relations d'ordre) et plus structurées que l'approche basée sur les fonctions, qui conduit à exprimer la structure comme décrivant un enchaînement de transformations 
SCORE : 182140


 Pour qu’une modification de l’allocation d’une fonction au niveau du partitionnement matériel/logiciel avec passage d’une implantation matérielle en logiciel ou réciproquement, ne nécessite par une nouvelle saisie de code des opérations, il faut transcrire automatiquement une description VHDL séquentielle en C et réciproquement 
SCORE : 182100


 Puis pour avoir une modélisation plus réaliste des disques, nous avons considéré que TaccDisk = Tseek + Tlatency + Tread avec les lois aléatoires suivantes pour Tseek et Tlatency: - Tseek = U(2,24) ms (U loi aléatoire uniforme), - Tlatency = U (0,11) ms - Tread = 12,8 ms (temps de lecture nécessaire à 5300 trs/mn pour lire 32 Ko) 
SCORE : 181412


 L’outil d’analyse de trace sert également à visualiser des traces capturées en temps réel et de visualiser un déroulement temporel (time line) de l’application utile pour une analyse détaillée telle que par exemple la recherche de la cause du non respect d’une contrainte temporelle 
SCORE : 180874


 Par exemple dans [GAJSKI-95], le terme allocation correspond à la sélection d’une architecture et le terme partitionnement à la répartition des éléments de la description fonctionnelle sur l’architecture: "Allocation is the problem of finding a set of system components to implement the system’s functions 
SCORE : 180726


 L’intérêt fondamental de cette démarche basée sur MCSE pour faciliter le travail de co-design est de se poser réellement la question d’un partitionnement système (logiciel ou matériel ou les deux simultanément) pour l’ensemble de l’application de manière à correctement isoler les seules parties qui sont du ressort du co-design 
SCORE : 180610


 En effet, l’affinement des temps des opérations avec leur rétro-annotation dans le modèle de performance permet d’évaluer le système sans utiliser obligatoirement des techniques de simulation hétérogène (IPC d’unix, fond de paniers de simulateurs, interface via le bus du microprocesseur, etc 
SCORE : 180291


 Lorsqu’une activité est générique et donc déclarée comme une partie autonome instanciable dans d’autres comportements, l’activité est alors décrite comme un block avec ses arguments d’entrée et de sortie définissant son lien avec son environnement 
SCORE : 179904


 La phase de spécification [CALVEZ-96a] concerne en effet l’analyse des entités de l’environnement du système (modélisation des informations échangées, des activités et du comportement), la description du comportement du système vis à vis des entités de l’environnement (automate à états finis, SpecChart, etc 
SCORE : 179814


 La plupart des travaux de la communauté du co-design sur l’estimation des performances dynamiques d’un partitionnement, sont basés sur une analyse des contraintes temporelles et un calcul de la charge du processeur par des techniques proches de celles utilisées en ordonnancement de tâches pour des systèmes temps-réels 
SCORE : 178825


 L’entité User génère après un temps aléatoire entre 1 et 5 secondes un ordre Cmd comprenant les attributs: ‘Id qui est l’identité de l’usager, ‘Size représentant la taille en nombre de blocs de 32 ko, ‘Speed qui définit la vitesse de transmission en lecture ou en enregistrement (valeur aléatoire ici) 
SCORE : 178470


 La technologie de génération utilisée permet: - de réduire le temps de développement des générateurs qui peuvent être developpés de manière incrémentale, - de faciliter la maintenance des générateurs: la taille du code script est plus petite et plus lisible que celle d’un code équivalent en langage de programmation classique (C++, JAVA 
SCORE : 178267


 Comme le type d’une variable (type de la règle de grammaire) dépend de l’historique de l’exécution du script, cette conversion nécessite de faire une pseudo-exécution qui ne tient compte que du type des variables (et non leurs valeurs): c’est la phase dite d’optimisation d’un script 
SCORE : 177838


 Ils ne font donc pas directement partie du domaine de l’activité de co-design même si l’apparition de composants matériels programmables, des langages de description de matériel (VHDL, Verilog) et des outils de synthèse tend à rendre de plus en plus floue la frontière entre matériel et logiciel 
SCORE : 177378


 Cette possibilité de découpage a au moins deux avantages: - elle réduit la taille des fichiers de code et donc améliore leur lisibilité, - elle permet de créer des librairies de règles qui sont utilisables par différents générateurs et donc améliore la réutilisabilité du code 
SCORE : 176882


 On utilise pour cela deux indicateurs: - BlackBall indique que l’élément d’interconnexion associé à l’entrée/sortie analysée doit être de dimension 2 (un vecteur de vecteur par exemple), - Vector indique que l’élément d’interconnexion doit être de dimension 1 (un vecteur par exemple) 
SCORE : 176527


 Une fois cette architecture matérielle définie, le concepteur alloue les fonctions à très fortes contraintes temporelles aux processeurs matériels et le reste des fonctions aux processeurs logiciels en limitant si possible les communications inter-processeurs 
SCORE : 176325


4 COSMOS L’outil COSMOS de la société Omniview exploite une modèle de représentation d’un système composé de deux vues [OMNIVIEW-97]: - une vue matérielle qui correspond à une version simplifiée du modèle exécutif ou architectural de MCSE, - une vue logicielle qui correspond à une association simplifiée de la vue fonctionnelle et la vue comportementale de MCSE 
SCORE : 176033


 Pour la génération de chaque interface du composant, on fournit également le nom de l’interface, son type, le type de la donnée, la dimension de l’élément de relation qui lui est associé, le nombre d’interfaces du raffinement du composant qui lui sont associés et les indicateurs Vector, BlackBall et IsInput 
SCORE : 175951


 Ceci signifie par exemple pour un événement du type Counter que la valeur du compteur correspond au nombre d’activation des fonctions en attente et non pas au nombre de fonctions en attente activables (l’événement du type Counter de MCSE n’a pas la même signification que la notion de sémaphore rencontrée dans les exécutifs temps-réels) 
SCORE : 175652


 Si sa valeur est inférieure au nombre de fonctions internes à évolution potentiellement parallèle (incluant toute la décomposition interne jusqu’aux opérations), il faut assurer un ordonnancement des fonctions selon une politique (‘Policy) et avec l’attribut approprié (‘Priority ou ‘Deadline) 
SCORE : 175051


 Il s’agit habituellement d’un ensemble de contraintes d’intégration avec l’environnement (taille, puissance consommée), de performances (temps de réponse, débit), d’ordre économique (coût, délai de fabrication), de qualité (durée de vie, MTBF), de sûreté de fonctionnement, etc 
SCORE : 175019


 Comme le modèle MCSE sera la source pour d’autres générateurs de code, nous avons essayé d’implanter une partie analyse suffisamment générique pour qu’elle soit commune à tous les générateurs de code du modèle MCSE vers un langage cible quelconque 
SCORE : 174916


 La technique de partitionnement proposée repose sur la démarche itérative suivante: compte tenu des contraintes diverses qui lui sont imposées, le concepteur définit une première architecture matérielle et l’allocation des fonctions sur les processeurs matériels et logiciels de cette architecture 
SCORE : 174696


 Le temps d’accès aux disques est la somme de trois composantes (TaccDisk = Tseek + Tlatency + Tread) avec des lois aléatoires pour Tseek et Tlatency: Tseek = U(2,24) ms (U loi aléatoire uniforme), Tlatency = U (0,11) ms et Tread = 12,8 ms (temps de lecture nécessaire à 5300 trs/mn pour lire 32 Ko) 
SCORE : 174658


 Ces deux concepts nous ont permis de développer un principe générique de génération de code présenté dans ce chapitre et exploité pour implanter de nouveaux générateurs de code ayant comme spécification d’entrée le modèle de performance de MCSE décrit dans le chapitre 3 
SCORE : 174440


4 L’analyse des propriétés d’un partitionnement Pour analyser les propriétés d’un partitionnement, la plupart des techniques de partitionnement utilisent des estimateurs basés sur: - une analyse des contraintes temporelles, ce qui nécessite de représenter le comportement des fonctions à un niveau interprété et très détaillé 
SCORE : 174341


 Ce principe de co-simulation qui utilise un niveau d’abstraction des modèles plus élevé que celui utilisé habituellement a l’avantage de réduire sensiblement les temps de simulation tout en permettant une évaluation assez fine des performances dynamiques du système 
SCORE : 173943


 Ce type de modélisation permet d’obtenir le taux d’utilisation des processeurs, la taille moyenne des files d’attente, le temps moyen de service, le temps moyen d’attente pour un service, le temps total passé par une transaction dans le système, etc 
SCORE : 173086


 Elle est utilisée pour observer le comportement du système complet qui se compose de quatre classes d’objets: les processeur matériels ou co-processeur dédiés, les processeurs logiciels, le logiciel s’exécutant sur les processeurs logiciels et la logique d’interface (communication inter-processeurs) 
SCORE : 172754


 Le premier cas spécifie toujours que F1 peut utiliser l'un quelconque des ports du vecteur Pt[1:K] en le désignant par son indice, mais chaque F2[i] peut accéder à tous les éléments du vecteur Pt[1:K] (signification du rond noir pour la relation multiple) 
SCORE : 172634


 L’outil est donc très efficace pour faire une analyse des performances d’un système figé ou existant, mais convient nettement moins pour une démarche de modélisation incrémentale et pour l’exploration du domaine des solutions possibles lors d’un partitionnement logiciel/matériel 
SCORE : 172540


 Quand il a obtenu (empilé) tous les tokens nécessaires pour compléter une règle, l’analyseur syntaxique les désempile, empile le symbole correspondant à la règle réduite et va dans l’état correspondant à la nouvelle situation: cette action s’appelle "a reduce" (le nombre d’objets dans la pile a diminué) 
SCORE : 172057


 En amont des travaux effectués lors de cette thèse qui portent sur la modélisation des performances et la génération de code pour la simulation, l’équipe développe des outils graphiques de description (saisie des structures fonctionnelle et exécutive, saisie du comportement des fonctions, configuration et allocation) 
SCORE : 171182


 La simulation du modèle a permis par exemple d’estimer avec 10 utilisateurs et pour un scénario de charge donné: - le retard de démarrage d’une séquence (temps entre la demande faite par un utilisateur et le premier fragment émis), - le taux d’occupation du processeur d’exécution 
SCORE : 169928


 Ces restrictions et notamment l’absence de mécanisme de suspension de process, nous ont amenés à définir un modèle de simulation qui modélise un processeur logiciel sous la forme d’un composant ordonnanceur chargé de gérer les différentes tâches (fonctions) allouées au processeur 
SCORE : 169805


 -C- Extension du modèle comportemental Le modèle comportemental préconisé pour les spécifications est uniquement statique pour les activités, c’est-à-dire que toutes les activités du diagramme des activités existent à tout instant, chacune étant dans un état dépendant de son comportement propre et de son environnement 
SCORE : 169410


 En donnant une signification différente à ces concepts, il peut aussi être utilisé par exemple pour l’analyse de tout type d’architecture, des réseaux de communication, la gestion de production et des stocks, voir même la gestion des ressources humaines 
SCORE : 169163


 Par conséquent, même si l’architecture matérielle cible est figée, une modification de l’allocation d’une fonction nécessite au minimum de redessiner le flot de données, ce qui est plutôt contraignant lorsque l’on doit parcourir un domaine assez vaste des solutions possibles 
SCORE : 168830


 Un composant actif (fonction, processeur) est transcrit sous la forme d’une entité ou d’un block, ce qui permet de préserver la hiérarchie du modèle MCSE source, la trace des entrées/sorties d’un composant actif (port map) et la généricité (generic map) 
SCORE : 168755


 Les générateurs de code utilisés durant la phase de synthèse devront exploiter le fait qu’une activité à une durée de vie limitée dans le temps pour permettre la reconfiguration dynamique et temps-réel des processeurs matériels au cours du fonctionnement Chapitre 8 240 M 
SCORE : 167945


 Lorsque les parties du système relevant de l’activité de co-design ont été clairement identifiées et spécifiées, le concepteur doit effectuer la sélection d’une architecture matérielle et l’allocation des constituants fonctionnels sur les unités matérielles de l’architecture choisie 
SCORE : 167329


 - les performances dynamiques qui spécifient les caractéristiques d’évolution temporelle du système dans son environnement (contraintes de temps, de débit, etc), ainsi que les caractéristiques internes (taux d’utilisation de ressources internes, disponibilité d’un bus, etc) 
SCORE : 167295


4 Modélisation d’architectures Ces modèles permettent de décrire un système selon deux vues: - une vue structurelle qui décrit le système sous la forme d’une interconnexion de constituants, - une vue comportementale qui permet de décrire le comportement de chaque constituant 
SCORE : 167284


5 La méthode de partitionnement proposée Notre approche consiste à considérer que le partitionnement se fait à un niveau d’abstraction le plus élevé possible afin de considérer le système dans sa globalité et doit exploiter au mieux le bon sens et l’expérience des concepteurs 
SCORE : 167276


3 Réseau de Petri stochastique Ce modèle est également basé sur un principe de jetons: une transition n’est franchissable que si toutes les places précédentes possèdent au moins 1 jeton, et lorsqu’elle est franchie, un jeton est retiré de toutes les places en amont et un jeton est ajouté dans toutes les places en aval 
SCORE : 166967


 L’ensemble des disques est modélisé par une variable partagée possédant les attributs ‘Concurrency décrivant le nombre de disques à accès simultanés, ‘Read et ‘Write comme temps de lecture et d’écriture d’un bloc au contrôleur d’un disque, ‘Use comme temps d’utilisation du disque 
SCORE : 166878


 Le concept de jeton est ici très proche du jeton du modèle UVa puisqu’il s’agit d’une donnée non interprétée caractérisée par un certain nombre d’attributs tels que priorité, taille, source, destination, date de création, etc 
SCORE : 166878


 Si cette méthodologie concerne plus particulièrement le domaine des systèmes électroniques temps-réel, il se trouve que la démarche suivie pour les premières phases du développement - spécification, conception architecturale - se trouve indépendante de la réalisation, puisqu'il s'agit d'une approche SYSTEME 
SCORE : 166779


 Si cette méthodologie concerne plus particulièrement le domaine des systèmes électroniques temps-réel, il se trouve que la démarche suivie pour les premières phases du développement - spécification, conception architecturale - se trouve indépendante de la réalisation, puisqu'il s'agit d'une approche SYSTEME 
SCORE : 166779


 -D- Génération du modèle VHDL Le générateur de code VHDL a été réalisé sur un principe générique de développement de générateurs de code ou d’outils de transformation de textes qui permet de transcrire facilement le modèle MCSE (ou tout autre langage source) vers d’autres langages cibles 
SCORE : 166301


 La structure d’exécution peut alors être définie: les fonctions matérielles sont à implanter sous la forme d’une architecture de composants matériels, les fonctions logicielles sur un ou plusieurs microprocesseurs en fonction des contraintes de temps, de coût et de répartition 
SCORE : 166224


 En aval, le travail concerne la génération de code exécutable [CALVEZ-93c], la synthèse des interfaces logiciel/matériel [CALVEZ-94] [CALVEZ-96c], l’analyse des performances en différé (analyse de traces obtenues par simulation) ou en temps-réel (monitoring) [CALVEZ-95b] [CALVEZ-95c] [CALVEZ-98a] 
SCORE : 165778


3 Les techniques mono-langage ou mono-modèle Les techniques mono-modèle ou mono-langage se distinguent par leur concept de modélisation et le degré d’abstraction du modèle des processeurs qui varie en fonction de la finalité de la co-simulation (évaluation des performances et/ou vérification fonctionnelle) 
SCORE : 165768


 Puis, la co-simulation reposant sur la transcription en VHDL du modèle de performance du système donne en retour des mesures de performances tels que le temps de réponse des fonctions, le temps de latence de messages, le débit sur un bus ou encore le taux d’occupation d’une ressource 
SCORE : 165495


 La première approche consiste à partir du modèle final (copie du template) et à utiliser un ensemble de règles de la forme "pour chaque <élément_modèle_final> faire si <condition_modèle_source> alors <mise_a_jour_modèle_final>" 
SCORE : 165306


 Pour déterminer une nouvelle loi, nous avons choisi une valeur de A suffisamment grande pour ne pas avoir de rupture de séquence et nous avons observé l’évolution du nombre de fragments dans le buffer d’anticipation de chaque canal pour des débits différents 
SCORE : 165294


 Ainsi plusieurs modèles de performances sont développés, tout d’abord un modèle macroscopique pour représenter les spécifications de performances, ensuite des modèles de plus en plus détaillés faisant apparaître la structure interne retenue pour le système comme résultat d’une phase de conception 
SCORE : 165269


E 215 Pour simuler correctement la vitesse de transfert correspondant au débit, on utilise d’une part l’attribut ‘Write pour l’accès au port SéquenceOut[], d’autre part l’attribut ‘Débit dans le message SéquenceOut[] et qui définit la vitesse de lecture du port SéquenceOut[] par la fonction Réception[] chargée de simuler le récepteur 
SCORE : 165123


 Concernant le logiciel, il est composé de 2 parties: la partie opératoire strictement nécessaire pour le fonctionnement et donc relativement incompressible si la spécification comportementale a été bien élaborée, et la partie dite organisationnelle qui concerne les relations entre les fonctions 
SCORE : 164901


 Concernant le logiciel, il est composé de 2 parties: la partie opératoire strictement nécessaire pour le fonctionnement et donc relativement incompressible si la spécification comportementale a été bien élaborée, et la partie dite organisationnelle qui concerne les relations entre les fonctions 
SCORE : 164901


 Comme VHDL ne permet pas de définir un vecteur non contraint d’un vecteur non contraint et ne permet pas de définir des paramètres génériques au niveau d’un package, la primitive d’accès ne peut être défini qu’au niveau de l’entité 
SCORE : 164868


 La simulation de ce modèle de performance permet d’extraire un ensemble d’estimations de performances plus riches que les approches analytiques: débit sur un bus, taux d’occupation d’une ressource, temps de latence d’un message, détection du non respect d’une contrainte temporelle, etc 
SCORE : 164190


 Le processeur logiciel est encore souvent modélisé par son jeu d’instructions et son architecture qui peut être plus ou moins détaillée (modélisation d’un cache mémoire, pipeline d’instructions, gestion des interruptions, registres, ALU, etc 
SCORE : 164075


 (OEM = Original Equipment Manufacturer) Il faut trouver un équilibre « win-win » dans ce genre de collaboration, c’est à dire que chacun des deux partenaire y trouve son compte : le fournisseur produit et vend son système sans avoir le soucis de la commercialisation finale, l’acheteur peut bénéficier de la priorité et de la sécurité d’approvisionnement 
SCORE : 164011


 Mais pour ce type d’application, la rapidité d’obtention d’une implantation est un critère aussi important que la qualité du partitionnement obtenu: Il s’agit avant tout de faire une vérification fonctionnelle et non une réelle analyse des performances du futur produit industriel 
SCORE : 163817


1 Utilisation d’un lien de connexion uni-dimensionnel Si l’élément de relation est simple ou multiple mais avec un seul consommateur/producteur (correspondance indice par indice ou élément actif simple), alors le signal de connexion est un vecteur 
SCORE : 163562


 Les relations entre fonctions sont de 3 types: - relation de synchronisation pour exprimer une dépendance temporelle, - relation de partage de données ou de ressources, - relation de transfert d’information et de communication ce qui sous-entend une dépendance temporelle avec échange 
SCORE : 163134


 Pour ce type de protocole, deux signaux de contrôle sont habituellement utilisés (request, acknowledge), mais pour la transcription en VHDL, surtout dans le cas de plusieurs producteurs pour un même port, il est préférable d’utiliser un signal bidirectionnel (Status) associé à une fonction de résolution (ResolProtocol) 
SCORE : 162601


 La technique d’extraction d’informations retenue repose sur l’utilisation d’une librairie de composants de monitoring qui génèrent des fichiers exploitables par le logiciel GnuPlot ou sur la génération d’une trace d’événements qui est utilisée par l’outil d’analyse des performances développé par l’équipe MCSE [CALVEZ-95c] [CALVEZ-98a] 
SCORE : 162584


 Mais il peut être couplé directement à l’outil d’analyse de trace qui permet alors de faire du suivi du contenu de variable, la visualisation d’un graphe de déroulement temporel (time line) et la définition des μ Validation de la méthode par des études de cas M 
SCORE : 162309


 Nous retenons la liste suivante: - Chargement d’une structure à partir d’un texte, - Sauvegarde d’une structure sous forme textuelle, - Copie d’une structure complète à partir du point de désignation, - Copie d’un noeud d’une structure, - Destruction d’une structure, - Destruction d’un noeud, - Mise à jour d’un champ d’un noeud, Chapitre 5 152 M 
SCORE : 162223


 Une telle approche système en 2 temps évite les écueils du “défaut de myopie” qui amènerait à trouver un optimum local pour une spécification donnée sans s’être assuré que la spécification résulte elle aussi d’un optimum pour le niveau système 
SCORE : 162160


 En effet, l’expérience de génération de code effectuée lors des travaux de cette thèse a permis d’appréhender les concepts de générateurs d’analyseurs syntaxiques et de méta-structure sur lesquels repose entièrement la nouvelle "philosophie" de développement des outils MCSE 
SCORE : 162016


 En effet, l’expérience de génération de code effectuée lors des travaux de cette thèse a permis d’appréhender les concepts de générateurs d’analyseurs syntaxiques et de méta-structures sur lesquels repose entièrement la nouvelle "philosophie" de développement des outils MCSE 
SCORE : 161700


 Pour faire communiquer un simulateur HDL (VHDL, Verilog) et un simulateur du jeu d’instructions d’un processeur, un simulateur de modèle de bus d’un processeur ou l’exécution d’une description algorithmique de la partie logicielle, on peut également utiliser un fond de panier de simulateur tel que Ptolemy [KALAVADE-92] ou simMatrix de Precedence Inc 
SCORE : 161366


 Comme la langage VHDL ne permet pas de définir un vecteur non contraint d’un vecteur non contraint et ne permet pas de définir des paramètres génériques au niveau d’un package, les types et la primitive d’accès sont nécessairement définis au niveau de l’entité 
SCORE : 161232


18-a, la description fonctionnelle est décomposée en 3 zones: la zone 1 comporte les fonctions qui sont obligatoirement implantées en logiciel, la zone 2 inclut les fonctions de transmission et réception sur le bus Transbus, et la zone 3 est constituée uniquement de la fonction de gestion du jeton 
SCORE : 161110


 Comme la plupart des techniques de partitionnement reposent sur des estimateurs statiques et que de nombreux travaux ont déjà été effectués dans ce domaine, nous avons opté pour une technique différente et complémentaire: l’évaluation des performances dynamiques d’un système par cosimulation 
SCORE : 160758


 En effet, comme on travaille sur des structures de données, on n’est pas limité par l’accès séquentiel des fichiers et une même information peut très bien servir à mettre simultanément à jour des parties de code cible complètement disjointes 
SCORE : 160655


 Pour réduire les temps de simulation, il faut augmenter le niveau d’abstraction des modèles d’où l’intérêt d’un modèle de performance mascroscopique et non interprété: les entrées et les données internes influencent le comportement du système uniquement par l’intermédiaire d’attributs 
SCORE : 160499


 Dans [CALVEZ-97a], cet exemple a également servi à montrer l’importance de l’approche système et d’un partitionnement en deux temps (système et matériel/logiciel) pour déterminer les parties du système relevant de l’activité de co-design 
SCORE : 160119


 L’objectif de la modélisation de performances est de permettre de dimensionner l’architecture de la solution: nombre de disques nécessaires, nombre de processeurs ou puissance du processeur pour un nombre N d’accès simultanés, taille mémoire interne nécessaire, etc 
SCORE : 160042


 Ces outils se composent généralement d’une interface graphique pour la modélisation et l’animation des réseaux, d’un langage algorithmique de haut niveau pour décrire le comportement de certains noeuds et d’un générateur de code automatique à partir de la description graphique et algorithmique 
SCORE : 159824


 -A- Caractéristiques et transcription d’un élément partagé L'objet SharVar est une zone de mémorisation ou une ressource commune définie par l’attribut ‘Policy, par un grandeur statique définissant sa taille (‘Capacity), son degré de partage pour des accès multiples (‘Concurrency) et accessoirement par sa valeur (‘Value) 
SCORE : 159812


 -B- Analyse fonctionnelle Pour réaliser une analyse fonctionnelle, 3 points de vue sont à considérer: le point de vue structurel (topologie du système), le point de vue des données (flot de donnée) et le point de Méthodologie de co-design et estimation des performances M 
SCORE : 159604


 Durant l’étape de définition de la réalisation ou de conception architecturale de la méthodologie MCSE, un partitionnement système identifie la partie purement matérielle, la partie purement logicielle et la partie où une variation entre le matériel et le logiciel est possible 
SCORE : 159378


 μ μ μ Temps de latence des messages Débit sur le bus Taux d’occupation du processeur 20 30 40 50 60 70 80 90 100 110 5 10 15 20 25 30 "k=3" "k=6" "k=9" 1e+06 1 
SCORE : 158923


 Enfin, un modèle de performance peut être élaboré et utilisé pour trois niveaux de description: les spécifications (étude de faisabilité), la conception fonctionnelle (dimensionnement des éléments internes du système) et la conception architecturale (aide au partitionnement logiciel/matériel) 
SCORE : 158649


 En fait, en évoluant vers la description détaillée de la solution interne, la différence entre action et activité tend à se réduire: une action nécessite du temps pour son exécution, une activité exprime une intervention temporaire dans le système 
SCORE : 158596


8 1 0 5 10 15 20 25 30 "CPU Utilization Rate" 1e+07 2e+07 3e+07 4e+07 5e+07 6e+07 7e+07 8e+07 9e+07 0 5 10 15 20 25 30 "CurrentThroughput" Temps (s) Temps (s) Taux d’occupation du processeur Exécution Charge imposée au système (Mbits/s) Validation de la méthode par des études de cas M 
SCORE : 158550


 Plusieurs aspects de la conception conjointe des systèmes matériels et logiciels sont actuellement étudiés: - la co-spécification qui concerne les étapes de spécification et de conception fonctionnelle et pour lesquelles beaucoup de formalismes existent [GAJSKI-95] [GAJSKI-96] [MICHELI-95] [CALVEZ-96a] [CALVEZ-96d] 
SCORE : 158329


 L'évaluation analytique est appropriée pour un modèle dont tous les éléments sont décrits d'une manière analytique, et si en plus il existe une méthode globale directe ou itérative permettant de déduire les propriétés globales du modèle à partir de ses constituants 
SCORE : 158292


 L’implantation VHDL d’une ressource commune est plus simple si l’on associe à chaque lien sur la ressource un booléen pour savoir s’il y a déjà une allocation de la ressource avec ce lien: ceci permet d’avoir une approche en ne considérant que les liens sur la ressource 
SCORE : 158070


 La file d’attente chargée de gérer l’ordre et la priorité des messages est caractérisée par sa taille et sa politique de gestion des messages (ordre d’arrivée, taille du message, priorité fixe, date de création 
SCORE : 158006


 La synthèse logicielle souffre cependant de deux problèmes: le manque d’outil de compilation efficace pour des microprocesseurs spécifiques, et le manque d’outil de génération de code exécutable pour une description multi-tâches (ordonnancement des tâches compris) 
SCORE : 157972


 La visualisation des résultats se fait sous la forme d’histogrammes (temps de latence, débit, taux d’utilisation) ou sous la forme d’un diagramme temporel qui permet d’observer les temps d’exécution des différents tâches d’un processeur 
SCORE : 157954


 De plus, pour que tous les temps d’exécution n’évoluent que durant l’état "Active" de la tâche concernée, ils sont tous simulés avec une procédure spécifique (procédure DELAY) qui permet ainsi de gérer un point de préemption par la ressource d’exécution 
SCORE : 157867


 En premier, la méthode de modélisation est différente de celle utilisée par les concepteurs en co-design (description du modèle fonctionnel, puis du modèle architectural et allocation), ce qui implique un surcoût de temps pour exploiter les concepts de SES et obtenir les résultats appropriés 
SCORE : 157849


 Lorsque le nombre d’accès simultanés dépasse le degré de partage (attribut ‘Concurrency) de l’élément de relation, deux politiques d’ordonnancement des accès ont été prévues: selon la date de dépôt ou selon la priorité fixée par le demandeur 
SCORE : 157611


 La plupart des techniques de partitionnement automatique repose sur une architecture cible imposée et mono-processeur, une heuristique et l’utilisation d’une fonction de coût dont les coefficients de pondération dépendent de critères tels que ceux cités précédemment 
SCORE : 157609


1 Le partitionnement matériel/logiciel Le partitionnement matériel/logiciel assure la transformation des spécifications de la partie du système relevant de l’activité co-design en une architecture composée d’une partie matérielle et d’une partie logicielle 
SCORE : 157567


 4- En observant Status=ActiveAck, le producteur déduit que sa requête a été acceptée par le port et par conséquent, il demande la ressource d’exécution par Waiting, puis après un délai d’utilisation, il positionne avec la complicité de la fonction de résolution le signal Status à InactiveReq (libération du port) 
SCORE : 157545


 Le modèle de performance utilisé est en effet la composition du modèle fonctionnel et du modèle exécutif préconisés par la méthodologie MCSE et d’une vue comportementale qui permet de décrire le comportement de chaque fonction de la vue fonctionnelle sous forme d’une composition d’activités 
SCORE : 157460


 Les niveaux habituellement considérés sont: le niveau système ou spécification, le niveau fonctionnel, le niveau architectural, le niveau logique et/ou physique, - l’axe de représentation, qui considère les différents types de modèles utilisables pour la description 
SCORE : 157194


 En amont, en plus d’un partitionnement géographique réalisé durant la conception préliminaire, un travail de partitionnement au niveau système conduit à décider d’une première grande répartition matériel ou logiciel si possible optimale globalement 
SCORE : 157129


 Les primitives d’accès à un élément de relation ont également été enrichies pour prendre en compte une fin d’activité forcé sans perdre pour autant un degré de concurrence sur les accès à l’élément de relation utilisé 
SCORE : 156742


 Par exemple, notre méthode de partitionnement repose sur une co-simulation pour extraire les performances dynamiques du système puisque le modèle de performance qui est simulé représente à la fois la partie matérielle et la partie logicielle du système 
SCORE : 156698


 Pour l’évaluation des performances dynamiques d’un système, nous avons retenu une technique de co-simulation macroscopique et non interprétée basée sur la transcription en VHDL d’un modèle de performance et sa simulation à l’aide d’un simulateur VHDL du commerce 
SCORE : 156523


 -D- Analyse d’une action Les actions concernent la génération d’informations ou d’événements par les sorties du composant contenant l’activité ou vers d’autres activités internes au composant par l’intermédiaire d’éléments de relation internes à la description comportementale 
SCORE : 156445


 Comme la création de ces listes intermédiaires a un coût en temps d’exécution et mémoire occupée et que la grammaire du modèle MCSE est maintenant relativement stable, nous n’avons pas retenu ce principe pour l’échange d’informations entre les deux parties 
SCORE : 156331


 L’évaluation de performances nécessite qu’un système (et ceci est particulièrement vrai durant l’étape de conception car il n’existe pas) soit décrit par un modèle qui soumis à une configuration de charge donnée permet d’extraire des informations quantitatives 
SCORE : 156106


 Il est dommage que les limitations mémoire de l’ordinateur utilisé pour la simulation et les temps de simulation qui sont relativement longs (environ 3 heures de simulation) ne nous ont pas permis d’étudier plus précisément l’influence du nombre d’utilisateurs sur les attributs ‘Concurrency et ‘Power du processeur d’exécution 
SCORE : 156019


 Ensuite pour cet exemple, il est indispensable d’effectuer une modélisation dynamique de manière à déterminer plus précisément les paramètres de l’architecture fonctionnelle du système que sont la taille des ports et des fifo internes aux fonctions Lecture et Ecriture et les performances des fonctions 
SCORE : 155903


 Cependant, il faut être conscient que la réalisation est par principe une démarche ascendante (bottom-up), puisque qu'elle consiste à assembler les éléments de base entre eux, pour former ainsi de suite le système complet 
SCORE : 155885


 Basé uniquement sur un flot de transaction ou jeton, ces modèles sont moins appropriés que les modèles d’architecture pour étudier les performances d’un partitionnement logiciel/matériel car ils ne permettent pas de représenter la vue structurelle du système 
SCORE : 155348


 -E- - Modèle pour Lecture La modélisation pour la fonction Lecture est assez similaire à celle adoptée pour Enregistrement à la différence qu’il faut disposer d’un certain nombre de fragments en anticipation avant d’assurer l’émission en temps-réel sans rupture de séquence 
SCORE : 155276


2 L’interface utilisateur de l’outil MetaGen L’interface de l’outil se compose: - d’une barre de menu principal, - d’une zone d’édition permettant de saisir le script et où l’on retrouve les commandes classiques d’un éditeur textuel (open, save, copy, paste, cut, find, replace, etc 
SCORE : 155275


 -C- Les règles de transcription en VHDL Le choix du langage VHDL se justifie par sa standardisation, sa portabilité, la disponibilité des nombreux outils sur le marché et ses propriétés intrinsèques (modèle hiérarchique, paramétrable, parallélisme inhérent, instanciation multiple, etc 
SCORE : 155101


 Il s’agit alors d’offrir au concepteur des moyens rapides d’estimation des propriétés de l’implantation résultant du choix de l’architecture, du partitionnement et de l’allocation pour vérifier si celles-ci répond aux contraintes imposées 
SCORE : 155001


1 BILAN DE LA THESE Dans le court terme, le problème du co-design concerne la définition et l’utilisation d’une méthodologie appropriée, cohérente, complète et efficace et d’outils associés pour aider les concepteurs à transformer le besoin du client en un produit opérationnel 
SCORE : 154728


 Par contre, comme ils utilisent seulement un buffer de ligne (pas de structure interne complète de stockage) et que l’accès au fichier source est séquentiel, ils sont peu appropriés pour notre problème car les transformations sont complexes 
SCORE : 154683


 Ils font tous appel à trois autres règles de script: - AnalyzeComponentModelOrInstance pour l’analyse d’un élément actif, - AnalyzeRelationElement pour l’analyse d’un élément de relation, - AnalyzeInternalRelationElement pour l’analyse d’un élément de relation interne défini dans le modèle de comportement d’un élément actif 
SCORE : 154604


 On peut citer en autres (liste non exhaustive): - l’algorithme gourmand (Greedy algorithm) utilisé dans VULCAN [GUPTA-95] pour lequel toutes les fonctions sont initialement implantées en matériel et sont migrées vers le processeur logiciel en vérifiant les contraintes temporelles 
SCORE : 154568


 En limitant le nombre de critères et en figeant l’architecture cible, le problème se réduit à un problème d’allocation qui peut se résoudre automatiquement avec une heuristique basée sur une fonction pondérée dont les coefficients dépendent des critères retenus 
SCORE : 154244


 Nous avons pu montrer l’efficacité du modèle en considérant particulièrement les 2 niveaux de modélisation considérés pour les disques: une seule ressource avec un degré de concurrence, autant de disques avec chacun un modèle aléatoire représentatif de son comportement 
SCORE : 154126


 Développée au départ pour les systèmes de contrôle/commande temps-réel à microprocesseurs, l'expérience nous a montré son adéquation pour une large classe d'application et de techniques, et tout particulièrement pour les applications qui utilisent l'électronique et l'informatique 
SCORE : 154061


 Développée au départ pour les systèmes de contrôle/commande temps-réel à microprocesseurs, l'expérience nous a montré son adéquation pour une large classe d'application et de techniques, et tout particulièrement pour les applications qui utilisent l'électronique et l'informatique 
SCORE : 154061


 Les relations inter-fonctions représentent trois types d’échanges : - larelation de partage de variables (par variable d’état) permet à plusieurs fonctions de partager une donnée ou une ressource sans aucune relation d’ordre 
SCORE : 154040


 Puis lors du parcours ascendant, comme on connaît alors le nombre de tâches du niveau (analyse du modèle de comportement de la fonction terminée), on met à jour le port et le port map des blocks VHDL concernés et la dimension du signal StateVector 
SCORE : 153980


 Bien connu dans ce domaine d’application, il a ensuite été enrichi pour couvrir la phase de conception fonctionnelle (modèle interprété) et la phase de définition de la réalisation comportant la définition de l’architecture matérielle et l’allocation des éléments fonctionnels sur cette architecture 
SCORE : 153954


 Nous décrivons alors le mécanisme de synchronisation de process concurrents et les principes de transcription de toutes les autres constructions du modèle de comportement: la séquence, l’alternative, la répétition, l’activation conditionnelle, l’achèvement forcé d’activités, les conditions d’activations et les actions 
SCORE : 153815


 L’utilisation de paramètres génériques associés aux attributs des éléments du modèle de performance permet de parcourir un espace assez vaste des solutions possibles d’un partitionnement sans nécessiter de mise à jour du modèle de performance 
SCORE : 153703


 Tout d’abord, pour faire face aux problèmes de l’intégration tardive des parties matérielles et logicielles, les concepteurs ont exploité la simulation conjointe de la partie logicielle et la partie matérielle du système (co-simulation) 
SCORE : 153667


 Les concepteurs et les responsables de projets sont invités à utiliser une telle fiche ou une variante de celle-ci, de manière à disposer d’une observation sur l’avancement du travail, ceci pour mieux répondre aux objectifs de coût, de délais et de qualité 
SCORE : 153612


 Les concepteurs et les responsables de projets sont invités à utiliser une telle fiche ou une variante de celle-ci, de manière à disposer d’une observation sur l’avancement du travail, ceci pour mieux répondre aux objectifs de coût, de délais et de qualité 
SCORE : 153612


 A ce titre, l’objectif premier de cette thèse a été de montrer l’apport de la méthodologie MCSE et de son modèle de performance à la problématique du co-design et en particulier aux problèmes du partitionnement matériel/logiciel et de la co-simulation 
SCORE : 153465


 L’écriture du script du générateur de VHDL comportemental a permis de constater que tout script est décomposable en une partie analyse du modèle source commune à tous les générateurs de la plate-forme MCSE et une partie génération de code spécifique 
SCORE : 153301


 Un lien de connexion entre un composant actif et un élément de relation est traduit sous la forme d’un vecteur uni-dimensionnel ou bi-dimensionnel dont il faut gérer les indices et la répartition (utilisation alias) 
SCORE : 153023


 Dans le projet RASSP, le processeur est aussi modélisé par son jeu d’instructions [ROSE-95], mais le modèle est plus grossier, est non-interprété et sert uniquement à l’analyse des performances dynamiques d’un système (outil Cosmos de Omniview présenté plus loin) 
SCORE : 152784


 Spécifications Description fonctionnelle Contraintes interfaces Spécifications de la réalisation complète Spécifications Description fonctionnelle détaillée et optimisée Phase 1 Phase 2 Phase 3 Corrections Améliorations pour vérification Partitionnement géographique Introduction des interfaces physiques et IHM Synthèse interfaces Partitionnement système Evaluation globale Distances Partie(s) matérielle(s) Partie(s) logicielle(s) Partie(s) co-design Performances, sûreté, coût Chapitre 2 18 M 
SCORE : 152616


 => Ev:=Ev-1 si Users[i] est le dernier des utilisateurs activés par l’événement au moins un Users[i] en attente sur l’événement Prod[1:m] EvIn User[1:n] EvOut EV Prod[1:m] User[1:n] InStatus[i] OutStatus[i] ‘Policy ‘Write ‘Read ‘Write SignalEv (Ev) utilisé dans Prod[i] WaitEv (Ev) utilisé dans User[i] SignalEv WaitEv Ev ‘Policy ‘Write ‘Read InStatus[1:m] OutStatus[1:n] a) b) c) ‘Concurrency ‘Concurrency Ev ‘Read States(Prod[1:m]) States(User[1:n]) /ActiveReq TaskBlocked Send Wait InAccess (ActiveReq or ActiveAck ActiveAck InactiveReq InactiveAck InactiveReq InactiveAck DELAY (writeTime) end wait OutValue InactiveReq InactiveAck End DELAY InactiveReq ActiveAck Wait InactiveAck Wait ActiveAck End DELAY InactiveReq InactiveAck Wait (ReadTime) DELAY NbUse < Concurrency NbUse++ 
SCORE : 152505


 La génération consiste alors à effectuer un parcours ordonné de la structure de données d'entrée obtenue avec l'analyseur syntaxique et à générer la structure de données de sortie à partir des constructions contenues dans le template 
SCORE : 152389


 Du besoin au produit, figure reprise de [1] Les étapes principales décrites dans cette méthodologie sont les suivantes: •le cahier des charges •les spécifications •la conception fonctionnelle •la conception de détail ou la définition de la réalisation •la réalisation •le test et la validation 
SCORE : 152283


 Gajski donne la définition suivante [MCC/OMI-96]: "CoDesign is defined as a methodology and technique for designing software and hardware concurrently, thus reducing the design time and time to market" 
SCORE : 152235


 Ces deux exemples ont permis de constater la nécessité de ressources importantes pour la simulation (puissance de calcul et mémoire) et une durée de simulation souvent trop longue pour trouver rapidement la solution optimale recherchée 
SCORE : 152227


 Ce type de co-simulation souffre d’un temps de simulation important mais offre un avantage au niveau de la synthèse logicielle: la qualité du code obtenu en appliquant les techniques de synthèse (allocation des registres, ordonnancement, 
SCORE : 152158


 Pour faciliter les manipulations des structures de données à effectuer pour mener à bien une transcription texte à texte, nous avons également utilisé deux autres concepts: le concept de template et le concept de script 
SCORE : 152130


 La syntaxe des constructions VHDL séquentielles et celle de leurs équivalences en C étant proches, il est aussi possible de faire une transcription directe lors de l’analyse syntaxique sans utiliser de structures de données intermédiaires [PARKINSON-94] 
SCORE : 151811


 Les modèles de performances existants (Ses/Workbench, UVa) ont surtout été developpés pour faire l’analyse des performances de systèmes existants alors que le modèle de performances de MCSE a été développé pour répondre à la problématique du partitionnement matériel/logiciel 
SCORE : 151696


 Pour mieux répondre à la problématique du co-design et du partitionnement logiciel/ matériel, le modèle UVa a également été enrichi du concept de machine virtuelle [KUMAR-92] [KUMAR-96] dont le principe est schématisé par la figure suivante 
SCORE : 151493


 Dans le projet COBRA [SOININEN-94], la machine virtuelle est modélisée au niveau système d’exploitation (ordonnanceur de tâches à priorité fixe décrit en VHDL) et le logiciel est modélisé par un ensemble de tâches écrites en C (couplage avec l’API du simulateur VHDL) 
SCORE : 151469


 Mais cette expérience et en particulier le travail effectué sur la génération de code avec LEdit a amené l’équipe MCSE à revoir entièrement sa stratégie de développement des outils dont les générateurs de code comme support pour la méthodologie MCSE 
SCORE : 151285


 Avec la méthodologie MCSE, nous proposons de suivre une démarche de partitionnement interactif assuré par le concepteur car il peut aisément décider pour chaque fonction le meilleur choix, en particulier après une modélisation et une évaluation des performances 
SCORE : 151017


 Tout d'abord, la description fonctionnelle doit être affinée, détaillée, enrichie pour tenir compte des contraintes technologiques que sont: la répartition géographique (si nécessaire), les interfaces physiques, les interfaces utilisateur 
SCORE : 150970


 Tout d'abord, la description fonctionnelle doit être affinée, détaillée, enrichie pour tenir compte des contraintes technologiques que sont: la répartition géographique (si nécessaire), les interfaces physiques, les interfaces utilisateur 
SCORE : 150970


4 Transcription d’une variable partagée La transcription d’une variable partagée nécessite de tenir compte du comportement systématique de toute variable (c’est-à-dire la gestion cohérente des données) et de tous les attributs qui particularisent son exploitation 
SCORE : 150819


E - laréutilisation: La réutilisation de composants est un facteur important de productivité, mais introduit des contraintes au niveau du partitionnement, - latestabilité: l’extraction d’informations en temps-réel nécessite l’ajout de composants matériels supplémentaires (Bist, Boundary Scan) ou l’ajout d’instructions de capture 
SCORE : 150514


 Il s’agit de s’assurer que le partitionnement et l’allocation choisis ainsi que les caractéristiques de l’architecture matérielle permettent de satisfaire toutes les exigences attendues et écrites dans le document de spécification sous le vocable spécifications non-fonctionnelles 
SCORE : 150439


 -B- Les opérations sur les nombres Les opérations du script concernant les nombres sont: - la conversion d’une chaîne de caractères en un nombre (ValueOf), - l’obtention de l’heure courante (GetTime), - l’obtention de la mémoire système libre (GetFreeMemory), - le calcul d’expression avec les opérateurs +, - , * et / 
SCORE : 150338


 Actuellement, les concepts retenus et le méta-générateur développé ont été utilisés pour générer trois générateurs de code: - un générateur de code VHDL comportemental pour la vérification fonctionnelle et l’évaluation des performances qui est présenté dans le chapitre 6 
SCORE : 150119


 Nous sommes ici intéressés par la production de la structure de données interne équivalente au texte analysé et la fonction inverse pour la production de texte de manière à disposer d’une fonction bi-univoque texte <-> structure de données 
SCORE : 150078


 - non-interprété: seuls les temps des opérations et des dépendances temporelles sont pris en compte ce qui permet un parcours rapide du domaine des solutions possibles d’un partitionnement tout en évitant l’écriture des parties algorithmiques des opérations 
SCORE : 150012


E Alors que la plupart des méthodes de partitionnement sont automatiques et ciblent vers une architecture mono-processeur et multi-ASICs du type maître/esclave, nous considérons que dans la réalité industrielle l’architecture cible est quelconque et notamment hétérogène et distribuée 
SCORE : 149758


 En effet le simulateur n’est pas capable de faire correctement le lien entre les paramètres formels et les signaux concernés lors d’un appel procédural si les signaux concernés ont plusieurs niveaux d’imbrication de records 
SCORE : 149672


5 LA COMPOSANTE STRUCTURELLE DU MODELE DE PERFORMANCE Pour décrire les extensions du modèle structurel nécessaire pour l’évaluation des performances, un exemple d’illustration qui concerne un système de communication permet tout d’abord de montrer la représentation graphique pour la solution fonctionnelle et pour l’architecture matérielle 
SCORE : 149460


 Si la grammaire est non ambiguë, il peut y avoir des conflits liés au fait que l’analyseur syntaxique aurait besoin de tenir compte de plus de un token d’entrée ("limited lookahead") pour décider laquelle des possibilités utiliser 
SCORE : 149382


 Le second exemple est un exemple interne à l’équipe de recherche MCSE et concerne un système de communication distribué basé sur l’interconnexion d’un ensemble de cartes identiques avec un bus série du type anneau à jeton 
SCORE : 149323


 Ce type d’algorithme ne pose aucun problème si la génération d’une feuille ne dépend que des informations des feuilles précédentes ou si il y a transcription quasi-directe entre un élément du modèle source et son correspondant dans le modèle cible 
SCORE : 149145


 Pour développer un générateur de code avec le méta-générateur nommé MetaGen, nous préconisons de suivre une démarche en trois phases: - Entrer la grammaire du langage cible correctement afin d’obtenir un analyseur syntaxique 
SCORE : 148912


 Lors de l’étape de conception architecturale, l’estimation des performances dynamiques en résultat d’un partitionnement matériel/logiciel permet par une démarche itérative de trouver la solution optimale vis-à-vis des contraintes imposées 
SCORE : 148865


 Cette approche se caractérise par une portabilité multi plate-forme (l’utilisation de Java permet de cibler sur tout type de plate-forme) et par la possibilité de faire de la co-simulation distribuée en Intranet (sockets) ou en Internet (applet Java et utilisation du protocole Remote Method Invocation) 
SCORE : 148863


 Pour un compilateur classique, elle est utilisée pour faire des contrôles sémantiques (vérification du type des opérandes par exemple), une optimisation et une génération de code (optimisation du code, analyse du flot de donnée et allocation des ressources) 
SCORE : 148807


 La classification des modèles pour les systèmes électroniques se fait selon trois axes: - l’axe des niveaux de description, qui représente les degrés d’abstraction possibles pour la description des solutions intermédiaires entre le besoin et le produit final 
SCORE : 148739


E 13 2 Méthodologie de co-design et estimation des performances Dans le chapitre précédent nous avons présenté le problème du co-design comme celui du développement d’une méthodologie de conception et des outils supports 
SCORE : 148682


 L’intégration du modèle de performance à la méthodologie de conception MCSE sur laquelle repose notre méthodologie de co-design offre une démarche descendante de développement intégrant au mieux la maîtrise des performances simultanément à la maîtrise des fonctionnalités 
SCORE : 148450


 L’évaluation nécessite aussi qu'un système (et ceci est particulièrement vrai durant la conception car il n'existe pas) soit décrit par un modèle qui, soumis à une configuration de charge donnée, permet d'extraire des informations quantitatives 
SCORE : 148418


 LA DEMARCHE La démarche de conception basée sur l'emploi du modèle précédent exprime le processus de réflexion que doit suivre le concepteur pour aboutir à une description conforme au modèle, tout en répondant à des critères de qualité : robustesse, modularité, lisibilité, maintenabilité 
SCORE : 148324


 LA DEMARCHE La démarche de conception basée sur l'emploi du modèle précédent exprime le processus de réflexion que doit suivre le concepteur pour aboutir à une description conforme au modèle, tout en répondant à des critères de qualité : robustesse, modularité, lisibilité, maintenabilité 
SCORE : 148324


 Le block ne permet pas de traduire la notion de réplication/modèle de fonctions, mais il offre, contrairement aux entités, la possibilité d’accéder à des variables globales (Shared Variable de VHDL‘93) utiles par exemple pour le partage d’un générateur de nombres aléatoires 
SCORE : 148265


 Mais, le couple VHDL/Simulateur restera quand même moins performant que la technique basée sur l’exécution d’un programme C++ dans un environnement multi-tâches qui sur l’exemple du système de communication présenté dans le chapitre 7 s’est révélée environ 4 fois plus rapide 
SCORE : 147864


 Les types associés aux informations transmises sont ensuite englobés dans la déclaration d’un record regroupant le type de l’information, un champ utile pour surcharger les attributs temporels du port et le signal utilisé pour le protocole de communication 
SCORE : 147838


E 117 Cependant, pour un élément de relation, si le protocole en 4 phases a déjà été commencé, il est préférable de terminer l’accès à cet élément avant de terminer l’exécution du code de l’activité pour ne pas perdre un degré de concurrence 
SCORE : 147639


 Ces deux exemples qui regroupent la plupart des constructions du modèle de performance nous ont également permis de valider les règles de transcription du modèle de performance en VHDL et l’implantation de ces règles dans un générateur de code automatique 
SCORE : 147395


 MCSE impose une démarche plus globale ne serait-ce qu’en imposant d’abord une analyse et une modélisation de l’environnement de l’objet à concevoir, modélisation bien utile en final pour la vérification et la qualification du système placé dans son environnement 
SCORE : 147344


 Cette étape permet d'obtenir 3 types de spécifications: - les spécifications fonctionnelles: elles comprennent la liste des fonctions du système pour l'application (fonctions externes) et la description du comportement du système et de l'environnement pour ces fonctions 
SCORE : 146917


 Cette étape permet d'obtenir 3 types de spécifications: - les spécifications fonctionnelles: elles comprennent la liste des fonctions du système pour l'application (fonctions externes) et la description du comportement du système et de l'environnement pour ces fonctions 
SCORE : 146917


 -B- Enrichissement du modèle de performance pour la sûreté de fonctionnement Parmi les contraintes que doit satisfaire un système électronique embarqué, la sûreté de fonctionnement est souvent une des exigences non-fonctionnelles non évidentes formulées dans le cahier des charges du produit à concevoir 
SCORE : 146917


 Le jeton utilisé comme élément de communication de base dans le modèle de performance de Cosmos contient également un champ Size utile pour calculer le débit sur le port et les champs StartTime et Destination utiles pour calculer le temps de latence des messages 
SCORE : 146892


 Pour résoudre ce problème, nous sommes partis du principe que toute structure de données peut être engendrée d’une manière automatique par un analyseur syntaxique enrichi des règles de production de la structure de données 
SCORE : 146855


 Par défaut, le champ Date est fixé avec la date courante de simulation mais il peut être modifié pour appliquer par exemple une politique d’ordonnancement au plus tard (voir exemple du serveur vidéo dans le chapitre 7) 
SCORE : 146758


 Afin d’obtenir des outils multi plate-formes et plus faciles à développer, maintenir et enrichir, l’équipe MCSE s’est alors intéressée à la technologie méta-case et en particulier à l’outil GraphTalk pour l’édition de graphes et l’outil LEdit pour la génération de code 
SCORE : 146681


 Enfin, on retrouve comme instructions du script les méthodes spécifiques à l’exploitation du modèle MCSE et qui permettent de résoudre les problèmes de: - portée des noms, - traçabilité des liens entre éléments de relations et interfaces de composant, - inclusion de modèle 
SCORE : 146452


1 Un exemple de modèle comportemental Comme pour le modèle structurel, le modèle comportemental comprend 2 parties: - la description des éléments internes et les dépendances temporelles entre eux, - la description des propriétés de tous les éléments, aussi appelées attributs 
SCORE : 146450


 Pour résoudre ce problème, la plupart des méthodes automatiques réduit le nombre des paramètres (prise en compte d’un nombre limité de critères) et utilise une heuristique basée sur une fonction de coût pondérée par les critères retenus 
SCORE : 146088


 La mise à jour veut dire placer les noms appropriés des identificateurs, supprimer les champs inutiles car le template contient la structure la plus complète, mettre à jour les listes correspondant aux ensembles 
SCORE : 146038


 Il est probablement possible de réduire le temps de simulation en générant un modèle ne respectant pas la hiérarchie du modèle MCSE (moins de process et de signaux à gérer pour le simulateur) et en utilisant deux signaux Req et Ack au lieu d’une fonction de résolution pour le protocole de communication 
SCORE : 145923


 L’exécution de l’objet Grammar-Parser produit des instances des classes d’objets MetaDs pour représenter la grammaire ce qui donne Meta-Parser Méta-grammaire MetaDs Grammar-Parser +règles de production de la MetaDs et de la table des méta-symboles Table des symboles Grammaire modèle MCSE +règles de production de la GrammarDs et de la table des symboles MCSEGrammarDs MCSE-Parser Table des symboles Texte MCSE McseDs Tables des Identificateurs Loader Le Méta-Générateur MetaGen M 
SCORE : 145727


3 CONCEPTION D’UN SCRIPT Pour bien comprendre quel doit être le contenu d’un script, rappelons tout d’abord le fonctionnement macroscopique d’un générateur: - Il commence par lire le fichier texte McseModel de manière à construire la structure interne McseDs 
SCORE : 145702


 Comme une relation de synchronisation (événement, signal) exprime une dépendance temporelle sans échange de donnée, la transcription d’une synchronisation est à rapprocher de celle d’un transfert d’information mais sans le champ information 
SCORE : 145673


 - un générateur de code VHDL au niveau RTL pour la synthèse matérielle - un générateur de code C/Noyau Temps-réel pour la synthèse logicielle pour lequel la possibilité de configuration permet de changer facilement de noyau temps-réel cible 
SCORE : 145366


 Ces deux exemples ont été très utiles pour mettre au point le générateur car ils regroupent la plupart des constructions possibles (alternative, parallélisme, attente conditionnelle, concurrence limitée 
SCORE : 145342


 Chaque cache est défini par un temps d’accès et son taux nominal d’utilisation utile pour déterminer si un accès mémoire se fera avec ou sans cache (tirage aléatoire ou valeur moyenne) 
SCORE : 145304


 Les ingénieurs système avaient en effet la responsabilité de concevoir l’architecture du système et d’identifier et spécifier les parties matérielles et logicielles dont les réalisations étaient ensuite à la charge d’équipes de conception distinctes ou étaient sous-traitées 
SCORE : 145287


 Pour cela soit on utilise une pile pour empiler en descendant et désempiler en remontant (instruction Push et Pop du script), soit le système gère lui-même une pile par le biais de l’utilisation de la récursivité (clause Localvisibility d’un règle de script) 
SCORE : 145257


 Dans un ensemble de travaux, par exemple [GUPTA-93], [THOMAS-93], on retrouve très souvent l’emploi d’une architecture du type maître/esclave utilisant un microprocesseur conventionnel ou un microcontrôleur comme maître associé à un ou plusieurs ASICs comme esclaves 
SCORE : 145246


 Jusqu’à encore peu de temps, la réalisation des systèmes électroniques embarqués de grande complexité reposait sur une approche d’ingénierie système caractérisée par une séparation nette de la conception et réalisation des parties logicielles et matérielles 
SCORE : 145071


 Mais comme une structure de données n’a de signification qu’avec sa grammaire, le résultat va contenir aussi une référence sur la structure de données de la grammaire GrammarDs qui a été chargée pendant l’opération LoadDs 
SCORE : 145045


 Deux ou trois vues sont nécessaires pour la description d'une entité: >Modélisation des données/informations (quoi) >Modélisation des activités (comment) >Modélisation du comportement (quand) Une bonne modélisation s’appuie toujours sur un solide modèle de l’environnement (appelé parfois diagramme de contexte) 
SCORE : 144951


 Ces hashtables sont ensuite utilisées durant la phase d’optimisation de la structure de données qui consiste à remplacer une variable par son index dans la table des variables et un nom d’un champ de record pour son index 
SCORE : 144897


 Dans le cas général (architecture cible hétérogène et nombre de critères élevé), il faut aider le concepteur en lui offrant des moyens d’estimations rapides des performances statiques et/ou dynamiques du partitionnement choisi 
SCORE : 144663


 Nous recommandons l’utilisation de la méthodologie MCSE pour faire tout d’abord l’approche système nécessaire afin de rechercher une solution si possible globalement optimale vis-à-vis de l’ensemble des contraintes 
SCORE : 144611


 Le manque de généricité pour la déclaration des types et les constructions telles que l’attente conditionnelle, l’achèvement forcé d’activité et certains cas de l’instanciation multiple ont également posé des difficultés de transcription 
SCORE : 144530


5 MODELISATION DES PERFORMANCES DES SYSTEMES Les paragraphes qui suivent ont pour but de répondre à la question suivante: pourquoi avoir défini un nouveau modèle de performance alors qu’il existe déjà un éventail assez large de modèles de performance 
SCORE : 144428


 μ Temps de latence des messages Débit sur le bus taux d’occupation du processeur 0 50 100 150 200 250 300 350 400 5 10 15 20 25 30 "k=3" "k=6" "k=9" 1e+06 1 
SCORE : 144300


 Si l’événement est en mesure de mémoriser l’occurrence d’un événement (degré de concurrence non atteint), il répond immédiatement par ActiveAck, sinon la fonction Prod (tâche) passe à l’état Blocked et la ressource d’exécution devient disponible Transcription du modèle de performance en VHDL M 
SCORE : 144282


 Considérés séparément, le développement des constituants logiciels (debuggeur symbolique, générateur d’IHM, profiler, approche objet, exécutif temps-réel) et matériels (synthèse logique et haut niveau) sont aujourd’hui bien maîtrisés 
SCORE : 144196


 Le partitionnement interactif cible généralement vers une architecture hétérogène à définir et s’appuie sur des estimateurs de performances statiques et/ou une estimation des performances dynamiques du système pour guider le concepteur dans le choix d’une répartition 
SCORE : 144174


1, en utilisant le modèle de performance, le concepteur dérive par transformations et enrichissements successifs à partir des spécifications, une solution de conception puis une solution d'implantation et simultanément décrit et évalue les propriétés de performances à chaque stade 
SCORE : 144149


 En effet, la nature humaine est ainsi faite qu’elle a souvent tendance à vouloir prouver qu’elle peut obtenir un résultat meilleur que celui obtenu par une méthode automatique 
SCORE : 144099


 A partir de ces spécifications, le concepteur doit définir l’architecture matérielle constituée de processeurs matériels (ASICs, FPGA, composants Description au niveau système Logiciel Matériel Logiciel et matériel Systèmes industriels de moyenne ou forte complexité Spécification Partie concernée par le CoDesign Chapitre 1 6 M 
SCORE : 143992


E périodique, l’attente de message n’est pas strictement bloquante: La tâche périodique recommence son cycle même si elle est en attente d’un message et qu’elle n’a pas reçu ce message durant la période d’activation 
SCORE : 143628


 L’évaluation analytique qui nécessite la transcription du modèle en un modèle analytique (réseaux de Petri stochastiques ou de files d’attentes par exemple) n’a pas été retenue car nous pensons qu’elle est mal adaptée à la complexité des systèmes considérés dans cette étude 
SCORE : 143562


 Pour étendre l’usage des réseaux de Petri classiques à l’évaluation de performances temporelles, un paramètre temps leur a été associé: - soit au niveau des transitions, ce qui permet alors d’exprimer l’intervalle temporel d’exécution de la transition 
SCORE : 143474


 Nous présentons ensuite succinctement l’approche particulière que nous avons adoptée pour résoudre deux problèmes sous jacents de l’activité de co-design: le partitionnement matériel/ logiciel et la co-simulation 
SCORE : 143438


 Le terme méthodologie représente ici un ensemble structuré et cohérent de modèles, de règles bien définies (méthodes), guides (démarche) et outils permettant de déduire la manière de résoudre un problème [CALVEZ-90] 
SCORE : 143438


 -B- Génération, synthèse, évaluation La phase 2 concerne la génération de l’ensemble de la solution, ce qui comprend: la description de l’architecture matérielle en y incluant la description de tous les composants spécifiques et/ou programmables (ASICs), les programmes pour tous les microprocesseurs 
SCORE : 143431


 L’utilisation de cette technique permet de répondre aux critères de généricité et d’évolubilité des structures de données internes aux outils considérés indispensables pour le succès du développement de la plate-forme d’outils 
SCORE : 143397


 Des expériences intéressantes ont été entreprises quant à son utilisation pour des applications variées : systèmes de contrôle/ commande, réseaux et protocoles, systèmes répartis, outils interactifs, conception de composants intégrés 
SCORE : 143390


 Des expériences intéressantes ont été entreprises quant à son utilisation pour des applications variées : systèmes de contrôle/ commande, réseaux et protocoles, systèmes répartis, outils interactifs, conception de composants intégrés 
SCORE : 143390


 Pour utiliser le bus à son débit maximum, le protocole de communication doit être modifié pour envoyer un message si et seulement si il existe une place libre pour recevoir le message 
SCORE : 143290


 Les systèmes électroniques embarqués sont caractérisés par de fortes contraintes d’intégration avec leur environnement: taille physique réduite, consommation faible, résistance aux chocs et aux variations climatologiques, sûreté de fonctionnement, etc 
SCORE : 143048


 Les concepts du modèle de performance, les règles de transcription et le générateur de code VHDL ont été validés à l’aide de deux exemples: un serveur vidéo temps réel fourni par le CCETT de Rennes et un système de communication distribué 
SCORE : 142688


 Produite de cette manière, la documentation est utilisable durant le cycle de développement: pour les phases de vérification selon un cycle auteur-lecteurs, pour l'observation de l'état d'avancement, mais aussi pour les étapes ultérieures et en particulier pour la maintenance 
SCORE : 142549


 Produite de cette manière, la documentation est utilisable durant le cycle de développement: pour les phases de vérification selon un cycle auteur-lecteurs, pour l'observation de l'état d'avancement, mais aussi pour les étapes ultérieures et en particulier pour la maintenance 
SCORE : 142549


18- Transcription VHDL d’une variable à multiples écritures Deux approches sont possibles pour ce problème mais aucune n’est réellement statisfaisante: - La première approche (solution a) consiste à utiliser une interface dans chaque fonction (décodeur de priorité) 
SCORE : 142357


 Pour une solution faisant intervenir du matériel et du logiciel, lorsque plusieurs fonctions s’exécutent sur un même processeur séquentiel, notre modèle permet de représenter et de simuler l’exécution d’un ensemble de fonctions sur un processeur 
SCORE : 142182


 Inclure le concepteur dans la boucle de recherche de la solution optimale d’un partitionnement, offre aussi un avantage plus subtil: cela permet d’éliminer la suspicion des concepteurs face aux résultats obtenus par un partitionnement automatique 
SCORE : 141834


 La différence de signification entre les relations du modèle fonctionnel et celle du modèle exécutif nécessite normalement de faire apparaître des interfaces qui sont des fonctions particulières pour assurer les couplages entre liens de modèles différents 
SCORE : 141739


 Pour la co-simulation hétérogène, l’équipe MCSE a expérimenté une technique de co-simulation basée sur une implantation en Java des éléments de relations du modèle MCSE (port de communication et variable partagée) pour coupler différents simulateurs [COUSINS-97] 
SCORE : 141488


 Le nombre de disques nécessaires se calcule donc par: -B- Modélisation des fonctions de l’environnement La modélisation de l’environnement comprend la spécification du comportement souhaité pour placer le système dans le contexte imposé pour son évaluation 
SCORE : 141147


 le niveau fonctionnel avec répartition qui résulte de la description fonctionnelle en y ajoutant la contrainte de répartition géographique, ce qui se traduit par l’utilisation de mécanismes pour le transport des informations entre les sous-ensembles répartis 
SCORE : 141066


 le niveau fonctionnel avec répartition qui résulte de la description fonctionnelle en y ajoutant la contrainte de répartition géographique, ce qui se traduit par l’utilisation de mécanismes pour le transport des informations entre les sous-ensembles répartis 
SCORE : 141066


 Ces règles appelées dans la partie Analyse utilisent les informations fournies par la partie Analyse et les structures de données des templates pour générer la structure de données de sortie qui sera sauvegardée au final sous forme textuelle 
SCORE : 141019


 L’usager peut fournir les commandes suivantes: lecture d’une séquence, enregistrement d’une séquence, pause, restart, stop (ce qui veut dire fin de la séquence courante), avance rapide, retour rapide, effacement séquence 
SCORE : 140906


 le niveau fonctionnel avec les interfaces qui découle du sous-niveau précédent avec ajout de toutes les interfaces physiques nécessaires pour le couplage avec l’environnement réel du système 
SCORE : 140701


 le niveau fonctionnel avec les interfaces qui découle du sous-niveau précédent avec ajout de toutes les interfaces physiques nécessaires pour le couplage avec l’environnement réel du système 
SCORE : 140701


 Tout comme pour les systèmes de communications, les réalisations de ces systèmes étaient autrefois surtout matérielles et basées sur une partie opérative (ordonnancement ASAP ou ALAP en fonction du compromis surface de silicium/performance) et une partie contrôle 
SCORE : 140412


5 Bilan En conclusion de cette analyse de l’existant, on peut affirmer que la plupart des modèles de performance ne sont pas complètement appropriés pour la problématique du co-design car les modèles recensés ne distinguent pas précisément la vue fonctionnelle et la vue exécutive 
SCORE : 140394


 Pour réutiliser ce qui a été fait du point de vue de l’analyse et de la génération pour le parallélisme et l’attente conditionnelle, il est préférable de convertir le ET sans ordre sous la OrderElements 1:n SubOrderList 1:1 SelectName OrderElements NoOrderElements ChoiceElements "&" ElementName BehaviorCondition "$" ElementName 1:1 NoOrderElements 1:n SubNoOrderList "^" ElementName ChoiceElements 1:n ChoiceElementsList " 
SCORE : 140353


 Cependant, l’expérience de génération de code avec LEdit qui est une encapsulation de Lex&Yacc a permis d’appréhender les concepts des générateurs d’analyseurs syntaxiques et de méta-structure sur lesquels repose entièrement la nouvelle "philosophie" de développement des outils MCSE 
SCORE : 140243


 En effet, comme un lien d’accès à une variable partagée peut être bidirectionnel, pour simplifier la description et l’implantation, un seul signal sous la forme d’un vecteur est utilisé pour l’accès 
SCORE : 140214


 Lorsque l’on regarde la représentation graphique et textuelle de l’exemple, on pense a priori que la difficulté va être d’extraire les séquences d’opérations (zones hachurées) qui seront générées sous forme de process (VHDL) ou de tâches (C/ETR, ADA) ou de thread (Java) 
SCORE : 140099


1 Définition du terme co-design Le terme "Hardware/Software Concurrent Design" souvent abrégé par "Hw/Sw Codesign" et qui se traduit par conception conjointe matériel et logiciel représente un processus de conception complet basé sur la trilogie: modèles, méthodes et outils ESDA (Electronic System Design Automation) 
SCORE : 140045


 Chaque partie est à nouveau à développer selon une démarche en 3 phases : spécification, conception, définition de la réalisation, et ceci jusqu'à la mise en évidence des constituants disponibles (composants matériels ou logiciels) 
SCORE : 139799


 Chaque partie est à nouveau à développer selon une démarche en 3 phases : spécification, conception, définition de la réalisation, et ceci jusqu'à la mise en évidence des constituants disponibles (composants matériels ou logiciels) 
SCORE : 139799


E - en exprimant le modèle comportemental de performance pour chaque fonction de la structure fonctionnelle (voir les paragraphes suivants), - en modélisant la charge du serveur (workload) par simulation de l’environnement pour représenter le scénario imposé pour l’évaluation 
SCORE : 139736


 La mise à jour veut dire: placer les noms appropriés des identificateurs, supprimer les champs inutiles car le template contient la structure la plus complète, mettre à jour les listes correspondant aux ensembles 
SCORE : 139597


 Il est basé sur quatre éléments : le processeur, le signal inter-processeurs, la mémoire commune et le noeud de communication qui permet aux processeurs d’échanger des informations sous forme de messages 
SCORE : 139567


 Comme seulement une et une seule carte peut accéder au bus à un moment donné, EmissionMess commence par faire une requête du jeton (événement ReqEmis), attend le jeton (événement OkToken) et envoie le message octet par octet dans TB[] 
SCORE : 139477


 Access Reader[1:n] Access SharVar pour une concurrence Writer[1:m] Reader[1:n] /ActiveReq Status[i] Status[j] ‘Capacity ‘Write ‘Read ‘Write WriteSharVar ( Value, V) utilisé dans Writer[i] ReadSharVar (V, Value) utilisé dans Reader[j] ReadSharVar SharVar ‘Capacity ‘Write ‘Read Status[1:m] Value[1:m] Status[1:n] Value[1:n] Reader[j] est la fonction lectrice de a) b) c) ‘Concurrency ‘Concurrency Value ‘Policy ‘Use ‘Read ‘Use ‘Policy V V Writer[i] est la fonction écrivain de plus forte urgence plus forte urgence States(Writer[1:m]) Writer[1:m] WriteSharVar States(Reader[1:n]) Value:=MValue 
SCORE : 139363


 Il est bon de noter qu’une condition d’achèvement se traduit implicitement par un parallélisme où une branche est en attente de la condition d’arrêt et l’autre branche exécute l’activité avec achèvement forcé 
SCORE : 139053


 Puis, l’évaluation des performances dynamiques du modèle du système résultant donne en retour des estimations de performances tel que le temps de latence de messages, le débit sur un bus ou encore le taux d’occupation d’une ressource 
SCORE : 138952


 Le modèle de comportement est un modèle non-interprété qui repose sur des activités décomposables par raffinement ou élémentaires (temps d’exécution) et des opérateurs de composition d’activités (séquence, parallélisme, alternative, répétition et attente conditionnelle) 
SCORE : 138799


 Pour aboutir au produit, une fois le partitionnement matériel/logiciel terminé, les descriptions fonctionnelles sont à transformer en code machine pour une implantation en logiciel et en un ensemble de portes logiques et de bistables pour une implantation en matériel 
SCORE : 138599


 L’échange de donnée entre un port et un ou plusieurs producteurs nécessite un protocole de communication: le producteur doit demander l’accès au port et doit maintenir cette demande jusqu’à ce que le port soit prêt 
SCORE : 138301


 -A- Solution systématique: génération d’un fichier de trace et analyseur de performances La première solution fait l’objet d’une étude approfondie par l’équipe et se traduit par le développement d’un outil temps-réel d’analyse de performances 
SCORE : 138249


3 Technique retenue pour la génération de code La technique que nous avons développée pour la génération utilise un analyseur lexical et syntaxique et repose sur deux concepts: le concept de méta-modèle et le concept de template 
SCORE : 138228


 Bien que la plupart des concepts de ce modèle de performance ont un certain historique car les premiers travaux datent de 1992 [CALVEZ-93b], la sélection des éléments de ce modèle a aussi été influencée par d’autres modèles de performances tels que les "Behavior Diagrams" de RDD100, le modèle de transactions de SES/Workbench, le modèle UVa, etc 
SCORE : 138157


 Il permet aussi d’allouer les tâches logicielles sur les processeurs matériels et par une démarche itérative basée sur une évaluation des performances, de trouver la meilleure répartition des tâches entre les différents processeurs 
SCORE : 137944


 Les méta-outils permettent, en effet, de se focaliser sur la méthode et la sémantique des modèles plutôt que sur des aspects bas niveau tels que l’intégration d’outils, la gestion d’une base de données et l’environnement graphique 
SCORE : 137917


 Dans cette définition, le terme le plus important est "concurrently" qui signifie que le développement simultané de la partie logicielle et de la partie matérielle du système s’effectue avec une interaction forte et permanente entre les deux parties 
SCORE : 137592


 Comme l’activité de co-design concerne rarement un système complet, une approche système est tout d’abord nécessaire pour déterminer la partie du système relevant de l’activité co-design 
SCORE : 137580


 A chaque fois que l’analyseur syntaxique lit un token provenant de l’analyseur lexical et qui ne complète pas une règle, il l’empile et va dans l’état correspondant au nouveau token lu: cette action s’appelle "a shift" 
SCORE : 137323


 La co-simulation est une simulation de la description mixte matériel-logiciel résultant d’un partitionnement: "Hardware-software cosimulation is a means of verifying the functionality of mixed hardware-software descriptions" [THOMAS-93] 
SCORE : 137190


 A chaque réduction de règle, on peut associer une action permettant par exemple de produire ou compléter une structure de données: la structure de données est alors construite au fur et à mesure de la vérification syntaxique 
SCORE : 137044


 Concernant l’aspect développement d’outils, ce travail a conduit à la réalisation d’un générateur de générateur de code ou méta-générateur et d’un générateur de code VHDL comportemental pour l’évaluation des performances et la vérification fonctionnelle 
SCORE : 136875


 Le temps de génération qui est de l’ordre de 4 mn, peut sembler pénalisant si le parcours du domaine des solutions possibles d’un partitionnement logiciel/matériel nécessite un nombre important de générations de code 
SCORE : 136863


 Nous décrivons tout d’abord l’activité de conception conjointe matériel/logiciel appelée usuellement co-design, son domaine d’application et les raisons de l’émergence de ce nouveau cycle de développement 
SCORE : 136777


 Le parallélisme tel qu’il est décrit permet d’occuper la ressource d’exécution (opération Op1) même si l’activité Proc est en attente de l’acquittement (attente de message provenant du port de communication Ack) 
SCORE : 136732


 Le terme macroscopique signifie que le système n’a pas besoin d’être entièrement détaillé et le terme non-interprété indique que seul les temps des opérations et les dépendances temporelles sont prises en compte 
SCORE : 136717


 Un générateur est alors le résultat de la définition des grammaires des langages source et cible afin d’obtenir les analyseurs syntaxiques associés, la définition d’un ou plusieurs fichiers template et l’écriture d’un script 
SCORE : 136656


E 135 Malheureusement, l’utilisation de GraphTalk a révélé progressivement un certain nombre de limitations: - les concepts de méta-modélisation sont trop limités pour décrire complètement le modèle MCSE et il fallait écrire de plus en plus de code C (API C) pour définir des démons et actions sur les objets du méta-modèle 
SCORE : 136506


 La troisième phase conduit généralement à un retour sur la première phase pour modifier, améliorer, poursuivre la décomposition du modèle, ou à un retour sur la deuxième phase pour modifier la sélection des résultats demandés ou des paramètres de l'évaluation 
SCORE : 136286


 La troisième phase conduit généralement à un retour sur la première phase pour modifier, améliorer, poursuivre la décomposition du modèle, ou à un retour sur la deuxième phase pour modifier la sélection des résultats demandés ou des paramètres de l'évaluation 
SCORE : 136286


 Si le block ne permet pas de traduire la notion de réplication/modèle de fonctions, il offre, contrairement aux entités, la possibilité d’accéder à des variables globales (Shared variable de VHDL‘93), ce qui est très utile dans certains cas 
SCORE : 136224


 Nous commentons l’enrichissement du modèle de performance, l’estimation des performances statiques d’un système, l’estimation du temps d’exécution des opérations élémentaires et l’exploitation d’un niveau de granularité plus fine pour le partitionnement matériel/logiciel 
SCORE : 136214


 La différence entre un parcours en préordre (top-down) et un parcours en postordre (bottom-up) est l’emplacement du traitement de la feuille: traitement de la feuille puis parcours de la sous-arborescence pour le préordre et l’inverse pour le postordre 
SCORE : 136110


 Comme ce modèle est composé entre autres du modèle fonctionnel et du modèle exécutif de MCSE, nous décrivons ensuite ces deux modèles dont l’association constitue la vue structurelle ou dimension organisationnelle du système 
SCORE : 136099


 Par conséquent, le concepteur doit faire un effort important pour trouver l’architecture basée sur les blocs disponibles même s’il veut simplement analyser un système à un niveau fonctionnel abstrait 
SCORE : 135973


 Les primitives d’accès aux éléments de relation doivent maintenant tenir compte du fait que le protocole en 4 phases peut être déjà commencé avant l’appel procédural 
SCORE : 135872


E La notation graphique utilise ici 3 types de symboles: - Lerectangle qui contient un identificateur ou une valeur (symbole terminal), - Unrond qui signifie le produit cartésien et qui veut aussi dire la composition de tous les champs qui en partent 
SCORE : 135867


 La second phase correspondant au parcours ascendant consiste à mettre à jour si nécessaire les éléments d’un niveau donné du modèle final en fonction d’informations provenant de niveaux inférieurs 
SCORE : 135861


1 Principe de fonctionnement de l’analyseur syntaxique utilisé L’analyseur syntaxique généré par JAVACUP est en fait une machine d’états pour laquelle chaque état correspond à une position dans une ou plusieurs règles partiellement analysées 
SCORE : 135750


 Au lieu de créer une sous-structure de données pour ces textes figés, le concepteur a la possibilité de les charger uniquement sous forme de chaînes de caractères en les délimitant par des mots clés spécifiques (NO_PARSE_TEXT et END_NO_PARSE_TEXT par exemple) 
SCORE : 135442


 VHDL permet de décrire plusieurs niveaux d’abstraction du système, plusieurs architectures pour un même composant et peut être utilisé durant tout le cycle de développement d’un système 
SCORE : 135404


 La partie délicate concerne la prise en compte de l’élément processeur qui conduit à restreindre le degré de parallélisme des fonctions qu’il supporte, mais c’est cette particularité qui permet la co-simulation 
SCORE : 135391


 null Au niveau de la règle primary, il y a un recouvrement de la règle string_literal au travers des règles name et literal et par conséquent il y aura un reduce/reduce conflit entre les règles name et literal 
SCORE : 135231


 Pour une évaluation des performances, la procédure itérative à suivre par les concepteurs se décompose donc en 3 phases: - modélisation incrémentale du système ou de l'application, - évaluation des performances souhaitées, - visualisation des résultats et interprétation 
SCORE : 135134


3 Transcription VHDL en C et C en VHDL Avec les générateurs obtenus, pour faire une vérification fonctionnelle, le concepteur doit saisir manuellement le code de chaque opération élémentaire du modèle de comportement des fonctions non raffinées de la description fonctionnelle 
SCORE : 135105


2 Transcription d’un port La transcription d’un port nécessite de tenir compte du comportement systématique de tout port (c’est-à-dire la gestion des messages reçus et délivrés) et de tous les attributs qui particularisent son comportement 
SCORE : 134959


 Le parcours du modèle MCSE nécessite un parcours descendant pour respecter la hiérarchie du modèle source et un parcours ascendant qui permet d’utiliser les informations recueillies à un niveau donné pour la mise à jour du niveau supérieur 
SCORE : 134948


 La comparaison avec notre modèle de performance est similaire à la distinction qui existe entre la description comportementale de haut-niveau d’un circuit et sa description architecturale basée sur des registres, additionnneurs, compteurs, etc 
SCORE : 134943


 Si le code source respecte un format donné, l’utilitaire javadoc génère un document HTML contenant la hiérarchie des classes, une description détaillée de chaque classe (attributs, constructeur, méthodes), un index, etc 
SCORE : 134879


 Comme tout objectif premier d’un développement est de satisfaire les exigences du demandeur, il est essentiel de pouvoir vérifier tout au long de la conception que la solution retenue permet de satisfaire les performances attendues 
SCORE : 134802


E -D- Transfert d'information ou d'objet, communications L'objet de couplage est assimilable à un tampon caractérisé par sa capacité qui peut varier de 0 (rendez-vous) à l'infini (*) et peut aussi être du type fugace 
SCORE : 134534


 Un point particulier de la transcription en VHDL concerne les éléments de relation à multiple producteurs/consommateurs lorsque les producteurs/consommateurs se situent dans des niveaux hiérarchiques différents comme le montre l’exemple de la Figure 4 
SCORE : 134359


 Le système est alors modélisé soit par un flot de transactions (modèle de SES/workbench [ROMDHANI-96]) soit par un modèle d’architecture dont tous les éléments sont caractérisés par des attributs temporels tel que le modèle de performance de MCSE [CALVEZ-96d] 
SCORE : 134298


1 Généricité et instanciations multiples Un constituant actif ou de relation peut être instancié plusieurs fois, ceci pour représenter facilement une organisation exploitant de multiples objets d'un même type (replication) 
SCORE : 134267


, mais aussi des performances locales ainsi que des contraintes temporelles impératives en particulier pour les systèmes temps réel: temps maximum de réaction à des événements, fréquence d’activation d’une tâche par exemple 
SCORE : 134090


12 représente la représentation graphique du modèle de comportement d’un exemple, sa description textuelle équivalente et le modèle graphique de la structure de données obtenue à partir de l’analyse de la description textuelle 
SCORE : 134033


 L’analyse des performances qui s’effectue lors de l’étape de conception fonctionnelle ou conception préliminaire aide au dimensionnement des éléments internes du système (taille d’un port de communication par exemple) 
SCORE : 133928


 L’emploi d’un émulateur matériel a cependant deux inconvénients majeurs: - les émulateurs sont très chers, - ils ne permettent d’émuler le système qu’à une fréquence 10 à 100 fois plus faible que la fréquence nominale de fonctionnement 
SCORE : 133770


 Ainsi, la connaissance de tels modèles génériques de solutions pour diverses classes de problèmes facilite la tâche du concepteur et favorise la production de solutions de qualité au sens : lisibilité, maintenabilité, efficacité  
SCORE : 133475


 Ainsi, la connaissance de tels modèles génériques de solutions pour diverses classes de problèmes facilite la tâche du concepteur et favorise la production de solutions de qualité au sens : lisibilité, maintenabilité, efficacité  
SCORE : 133475


 Une méthode efficace d'évaluation basée sur la simulation pour les propriétés dynamiques doit également lui être associée de manière à avoir un faible temps d'analyse-correction 
SCORE : 133437


 Il est en effet composé du modèle fonctionnel et du modèle exécutif préconisés par la méthodologie MCSE et d’un modèle comportemental qui décrit le comportement de chaque fonction de la vue fonctionnelle sous forme d’une composition d’activités dynamiques 
SCORE : 133394


 - la technique de co-simulation a nécessité le développement d’un générateur de code VHDL qui a été réalisé selon un principe générique de développement de générateurs de code ou d’outils de transformation de textes 
SCORE : 133201


 Pour élever le niveau d’abstraction des modèles du système, nous n’utilisons pas pour l’instant d’estimateurs statiques puisque ceux-ci nécessitent une description détaillée et interprétée du comportement des fonctions 
SCORE : 133195


 - Partitionnement au niveau système, qui vise à identifier à partir de la solution fonctionnelle complète la partie purement logicielle, la partie purement matérielle, la partie concernée par le co-design 
SCORE : 133157


 -A- Objectif d’efficacité L’exécution s’obtient par un programme se comportant comme un automate d’exécution assurant le parcours ordonné de la structure de données du script et exécutant au fur et à mesure les opérations élémentaires 
SCORE : 133147


 Avec l’expérience de la technologie méta-Case, l’équipe a également pris conscience que le succès du développement d’un outil CASHE repose essentiellement sur la généricité et l’évolubilité de la structure des données internes aux outils 
SCORE : 133130


 La description sous forme d’entité ou de block permet de garder la hiérarchie du modèle MCSE, la trace des entrées/sorties des composants actifs (port map) et la généricité (generic map) 
SCORE : 133024


 Après avoir défini la structure fonctionnelle de la solution et le comportement de chaque fonction, nous étudions l’influence de plusieurs solutions de partitionnement matériel/logiciel sur les performances du système 
SCORE : 132803


 L’efficacité d’un modèle dépend directement de ces concepts: l’ensemble des concepts de modélisation doit être restreint mais suffisant pour décrire n’importe quel système pour le domaine concerné 
SCORE : 132785


 Cette analyse, décomposée en une analyse de la composante structurelle puis de la composante comportementale, servira de base pour décrire les concepts complémentaires pour disposer d’un modèle approprié et efficace pour les 2 rôles indiqués ci-dessus 
SCORE : 132776


 Un générateur pour un programme ou texte donné en sortie peut se concevoir comme un programme écrit en C, C++ ou Java assurant les opérations nécessaires sur les structures de données et selon l’ordre approprié 
SCORE : 132769


 L’attribut ‘Power sert à faire varier simultanément les temps d’exécution de tous les constituants actifs inclus dans le constituant selon un coefficient qui représente la puissance en tant que ressource d’exécution 
SCORE : 132769


 L’un des attributs clef est le degré de concurrence d’un élément actif car il permet de simuler un processeur logiciel (processeur au degré de concurrence limité) et donc de faire de la co-simulation 
SCORE : 132707


 Basée sur la correction par retours-arrières, une phase de vérification en fin de chaque étape permet la détection des erreurs et induit un travail itératif avec des retours à l'intérieur de l'étape ou sur les étapes précédentes 
SCORE : 132532


 Basée sur la correction par retours-arrières, une phase de vérification en fin de chaque étape permet la détection des erreurs et induit un travail itératif avec des retours à l'intérieur de l'étape ou sur les étapes précédentes 
SCORE : 132532


 Le but d’une telle simulation est d’étudier l’influence du degré de parallélisme (nombre de processeurs) et de la puissance de traitement de chaque processeur Exécution comme support d’implantation de toutes les fonctions Enregistrement et Lecture 
SCORE : 132521


 Given a functional specification and an allocation of system components, we need to partition the specification and assign each part to one of the allocated components" 
SCORE : 132518


 Le bus transbus y est modélisé sous la forme d’un vecteur d’événements Token[1:k] représentant la circulation du jeton et un vecteur de ports de communication TB[1:k] pour le transfert de messages entre cartes 
SCORE : 132473


 On peut donc de cette manière décrire l’effet d’un microprocesseur comme support exécutif pour un ensemble de fonctions, activités, opérations, et étudier l’influence de sa vitesse d’horloge en agissant sur ‘Power 
SCORE : 132455


 En réalité, la recherche de la solution optimale ne nécessitera pas forcément plusieurs générations lorsqu’il y a utilisation judicieuse des paramètres génériques et le temps de génération sera certainement négligeable par rapport au temps de simulation 
SCORE : 132369


 Le temps ‘Use représente alors le temps d’écriture ou d’accès pour la lecture, tandis que les temps ‘Write et ‘Read représentent les temps d’échange avec le contrôleur du support de masse (exploitation d’un cache par exemple) 
SCORE : 132318


 Le diagramme de flot se compose en effet d’opérateurs de branchement conditionnel, d’itération, de point de sortie et de blocs de code constitués d’une séquence d’instructions saisie avec un éditeur orienté par la syntaxe 
SCORE : 132279


 Pour avoir un principe de génération commun à tous les générateurs de code et indépendant du langage cible, nous avons développé un méta-générateur qui a fait l’objet du chapitre 5 
SCORE : 132254


 L’intérêt est que l’exécution du modèle obtenu est beaucoup plus rapide que la simulation du modèle VHDL (rapport de 3 à 4), et ceci permet donc de parcourir plus rapidement l’espace des solutions possibles d’un partitionnement matériel/logiciel 
SCORE : 132226


 Ce processus doit permettre aux concepteurs de transformer correctement du premier coup les spécifications d’un système en un produit industriel comportant une partie logicielle et une partie matérielle et satisfaisant les contraintes Chapitre 1 2 M 
SCORE : 132175


 Pour cela, il faut exploiter les entrées de la fonction considérée du modèle structurel et disposer d’une technique pour exprimer des interactions internes à la fonction et de celle-ci avec son environnement 
SCORE : 132171


 Selon l’approche de modélisation que doit faire le concepteur, les modèles de performances peuvent être classés en deux catégories: - le modèle de flot de transaction basé sur la modélisation des files d’attentes et/ou les réseaux de Petri: modèle UVa, SES/WorkBench, Bones 
SCORE : 132024


 Pour la partie Supervision, la fonction SupervisionUsager gère les ordres provenant des utilisateurs (port CmdUsager en entrée et CmdCanalEnr et CmdCanalLec en sortie) et s’occupe aussi du retour d’information vers l’usager concerné (port RepCanal en entrée et RepUsager en sortie) 
SCORE : 131950


 Une estimation des propriétés de la solution est alors possible et sert à guider le concepteur qui peut alors modifier les ressources jugées critiques et l’implantation des fonctions et réévaluer le modèle de sa solution 
SCORE : 131911


 Les techniques de co-simulation se distinguent par l’utilisation d’un modèle ou langage unique ou non et par le niveau d’abstraction du modèle de description matérielle (VHDL comportemental, RTL, netlist) et logicielle (C, jeu d’instruction, microcode) [CHANG-95] 
SCORE : 131897


 La plupart des projets de co-design (COSMOS du groupe TIMA [ISMAIL-94b] [LIEM-97], Co-Saw [THOMAS-93]) utilisent une simulation VHDL de la partie matérielle et l’exécution d’une description algorithmique de haut niveau de la partie logicielle 
SCORE : 131798


 Même si celle-ci souffre encore de temps de simulation relativement longs, l’élévation du niveau d’abstraction des modèles et l’accroissement régulier de la puissance de calcul des ordinateurs tend à minimiser cet inconvénient 
SCORE : 131706


 Cette approche se distingue donc par: - l’utilisation de la simulation au lieu de l’évaluation analytique pour extraire les performances dynamiques (temps de réponse, taux d’occupation d’une ressource) d’un système 
SCORE : 131428


 En effet, rappelons que la procédure itérative à suivre par les concepteurs se décompose en 3 phases: - modélisation incrémentale du système ou de l'application, - évaluation des performances souhaitées, - visualisation des résultats, interprétations et prise de décision 
SCORE : 131353


 Ce tableau met en évidence que le temps de génération du générateur de code pour l’évaluation des performances est beaucoup plus long (rapport 3) que celui des générateurs de code pour la synthèse logicielle et matérielle 
SCORE : 131320


 Actuellement, cette intégration d’outils permet de couvrir toutes les phases de développement d’un système et de faire du suivi de projet (gestion des ressources humaines, analyse des risques, des coûts et des délais) [ALFORD-93] 
SCORE : 131216


 Une fonction est transcrite sous la forme d’une entité ou d’un block, ce qui permet de respecter la hiérarchie du modèle MCSE et de garder la trace des entrées/sorties (port map) et la généricité (generic map) 
SCORE : 131162


 La mise à jour inclut la destruction des champs inutiles car le template est une version complète, la modification de noms et valeurs de champs, l’ajout d’éléments supplémentaires dans les ensembles par copie du modèle dans le template 
SCORE : 131141


4 SPECIFICATION D’UNE META-STRUCTURE La présentation faite dans le paragraphe précédent permet maintenant de définir une méthode générale de construction d’un chargeur (loader) assurant la transformation d’un texte sous la forme d’une structure de données 
SCORE : 131108


 Pour l’aspect sûreté de fonctionnement, il faut être capable de modéliser le dysfonctionnement éventuel d’un processeur ou des éléments de communication inter-processeurs (mémoire commune, interruption et noeud de communication) 
SCORE : 131078


E 3- Développer une technique de génération de code automatique (modèle non-interprété pour l’évaluation des performances) ou semi-automatique (modèle interprété pour la vérification fonctionnelle et la synthèse) permettant de cibler sur différents langages 
SCORE : 130812


 Enfin et surtout la valeur de A (taille du buffer d’anticipation) n’est pas fixe et commune à tous les canaux haut débit, mais elle dépend de la valeur courante du débit de la séquence lue 
SCORE : 130809


 Pour gérer le problème de la traçabilité des liens entre éléments de relation et interfaces de composants, on utilise un lien bidirectionnel implanté dans la structure de données à l’aide de deux références (LinkUp et LinkDown) 
SCORE : 130702


 A priori, le générateur consomme beaucoup de temps à rechercher avant de déclarer un élément si la déclaration de ce dernier (type, signal, variable, procédure) n’a pas déjà été générée 
SCORE : 130643


 Les fonctions Prod et Cons sont implantées sous la forme d’une entité ou d’un block dont les entrées/sorties sont composées du signal States (ressource d’exécution limitée) et du signal PortIn (respectivement PortOut) pour le transfert de données 
SCORE : 130578


1 Analyse des textes source et résultat Pour comprendre le principe de génération basé sur l’emploi d’un template, considérons tout d’abord une très petite partie d’un exemple de modèle MCSE et du programme VHDL correspondant 
SCORE : 130536


3 Modèle de performance du système L’étude des performances peut commencer par une modélisation statique qui permet d’obtenir le nombre des disques représentés dans un premier temps par la variable partagée séquences 
SCORE : 130360


 Cette possibilité de surcharge est utilisée pour tenir compte du coût de la communication inter-processeurs ou par exemple pour faire varier les temps d’accès en fonction de la longueur des messages transmis 
SCORE : 130262


 C), - la liste ou ensemble (Y := {A}) Dans la littérature sur la modélisation des données, on retrouve d’ailleurs sous diverses formes, un modèle dit de composition hiérarchique basé sur les opérateurs de composition, alternative et ensemble [CALVEZ-90] 
SCORE : 130150


 L’ensemble des courbes obtenues nous a permis en regardant l’amplitude de variation du nombre de fragments dans le buffer d’obtenir un ensemble de points donnant une valeur expérimentale de la taille du buffer pour un débit donné 
SCORE : 130149


 Ensuite, la recherche d'une solution est à faire sur la base des variables internes nécessaires et non pas sur la base des fonctions internes, alors que la tendance naturelle consiste à appréhender le problème par les fonctions 
SCORE : 130141


 Ensuite, la recherche d'une solution est à faire sur la base des variables internes nécessaires et non pas sur la base des fonctions internes, alors que la tendance naturelle consiste à appréhender le problème par les fonctions 
SCORE : 130141


 Les principes de transcription ont d’abord été expérimentés sur l’exemple simplifié du serveur vidéo puis ont été validés à l’aide de deux exemples qui sont présentés dans le chapitre 7 
SCORE : 130129


 Chaque sous-ensemble fonctionnel à réaliser par logiciel est décrit par un schéma d'implantation logicielle qui exprime la priorité de chaque tâche, et les relations de dépendance spatiale (par des données) ou temporelles 
SCORE : 130082


 Chaque sous-ensemble fonctionnel à réaliser par logiciel est décrit par un schéma d'implantation logicielle qui exprime la priorité de chaque tâche, et les relations de dépendance spatiale (par des données) ou temporelles 
SCORE : 130082


 Pour éviter de surcharger les primitives d’accès aux éléments de relations du modèle MCSE en fonction du type de la donnée transmise, on regroupe les types et les attributs concernant les ports de communication dans le record TypeDefInformation 
SCORE : 130066


 Ainsi l’explication précédente montre que dans le cas de cet exemple, la structure du résultat s’obtient par une seule copie de la structure complète du template, puis par sa mise à jour 
SCORE : 129899


 Le concepteur d'un nouveau script pourra ainsi l'utiliser tel quel ou optimiser et compléter cette base à sa guise et concentrer ses efforts sur les règles de la partie génération 
SCORE : 129742


18-b, le rond noir sert à spécifier que chaque carte est capable d’envoyer un message à tous les éléments du vecteur TB et de générer un événement pour chaque élément du vecteur Token 
SCORE : 129721


 Il s’agit des contraintes de distance entre constituants ou/et entre entrées/sorties, des contraintes d’interfaces physiques et d’interfaces homme/machine, des contraintes de performances, de sûreté, de coût 
SCORE : 129711


 L’objectif de l’équipe était d’aboutir à un modèle de performance intégré à la méthodologie de conception complète MCSE et à une technique d’évaluation de ce modèle pour analyser des architectures de systèmes tout au long du cycle de développement 
SCORE : 129626


 L’outil peut être utilisé: - durant la phase de conception fonctionnelle: vérification fonctionnelle et/ou allocation d’exigences sur les constituants du système (taille d’un port, temps d’exécution max, 
SCORE : 129601


 Le choix de l’architecture matérielle est un élément de décision essentiel et la démarche diffère selon que l’architecture se trouve imposée ou choisie d’emblée ou que l’architecture et les Méthodologie de co-design et estimation des performances M 
SCORE : 129598


 Dans la mesure où le demandeur aborde sérieusement la rédaction du cahier des charges, il devra: •recueillir toutes les informations pertinentes sur le produit envisagé, •effectuer une analyse systématique des besoins, •définir les critères d'appréciation du résultat 
SCORE : 129575


 Contrairement à la plupart des modèles de performances existants qui ne distinguent pas nettement la vue fonctionnelle et la vue exécutive d’un système, notre modèle de performance est adapté à la problématique du partitionnement matériel/logiciel 
SCORE : 129548


 Le problème du partitionnement se réduit alors à un problème de partitionnement binaire matériel/logiciel pour l’allocation des éléments fonctionnels sur les constituants de l’architecture et peut se résoudre de manière automatique 
SCORE : 129463


25 "DebitMaxFile" "DebitMoyFile" Temps (s) Debit (Mbits/s) 0 10 20 30 40 50 60 70 80 90 100 0 5 10 15 20 25 30 "NbFragReadMoy" "NbFragRead" Temps (s) Nombre de Fragments Total (dans le système) Moyen (par buffer d’anticipation) Chapitre 7 218 M 
SCORE : 129412


 -B- Détermination d’une loi pour la valeur de A La loi empirique de la valeur de A en fonction du débit d’une séquence utilisée lors de la modélisation avec une variable partagée ne s’est plus avérée valable (valeur de A trop faible) 
SCORE : 129127


 Cependant, le protocole de communication indique à la tâche producteur qu’elle doit passer à l’état bloqué (Status égal à TaskBlocked) si le port ne peut satisfaire le requête du producteur 
SCORE : 128988


 Un système temps-réel réalise ses activités en respectant des contraintes de temps de nature externe (fréquence d’événement, débit de sortie) ou interne (temps de réaction) 
SCORE : 128959


 Comme tous ces générateurs utilisent le même modèle d’entrée et sont (ou seront) décrits par un script, il est apparu judicieux de décomposer tous les scripts en une partie analyse du modèle source et une partie génération 
SCORE : 128841


 La fin de cette étape est marquée par la publication d'un document de conception fonctionnelle, qui doit être validé par rapport au document de spécifications et qui servira lui-même de base pour l'étape suivante 
SCORE : 128751


 (0) -C- Elément partagé (Donnée ou ressource commune) Une donnée ou ressource commune est caractérisée par son degré de partage et sa capacité en nombre de bits ou de mots (grandeur statique ou dynamique) 
SCORE : 128572


 Les primitives d’accès aux éléments de relation ont été modifiées car le protocole peut maintenant être déjà commencé lors de leur appel procédural 
SCORE : 128425


 Chaque opérande est soit une désignation directe (cas d’une variable sans champ ou d’une constante), soit un champ d’un noeud désigné par une succession de champs (indirections multiples comme pour Arg1 de la figure 5 
SCORE : 128358


 Cette technique a été testée sur l’exemple du système de communication présenté dans le chapitre 7 et a permis de constater une réduction des temps de simulation d’un facteur 4 environ par rapport à l’utilisation d’une simulation VHDL 
SCORE : 128128


3 Test de la partie analyse du script La partie analyse du modèle source est essentielle car elle conditionne la partie génération et donc influe directement sur l’efficacité et la qualité d’implantation du générateur 
SCORE : 128006


 La phase 2 concerne cette fois le partitionnement du système complet et donc sa solution fonctionnelle vis-à-vis de la technologie de réalisation, c’est-à-dire matériel ou logiciel 
SCORE : 127994


 Les composants programmables ont des performances plus faibles (surface de silicium occupée, fréquence maximale de fonctionnement) et un coût plus élevé (production en grande série) que les circuit non programmables 
SCORE : 127921


 En associant des propriétés à chaque élément par des attributs, ce modèle permet une extraction de propriétés de performances sans avoir à décrire le comportement détaillé (c’est à dire algorithmique) de chaque opération 
SCORE : 127739


 Pour transcrire le modèle de performance en un code VHDL simulable, il faut tout d’abord définir les règles de transcription ce qui fait l’objet du chapitre 4 et ensuite les implanter dans un générateur de code 
SCORE : 127720


 -B- Efficacité de déduction Pour disposer d'une continuité des spécifications jusqu'au produit final, ce critère spécifie l’aptitude du modèle à représenter la solution à divers niveaux ainsi qu’à permettre des transformations de niveaux 
SCORE : 127657


 Le principe de génération de code qui est ensuite décrit repose également sur le concept de template qui est un fichier contenant toutes les constructions en langage cible nécessaires à la transcription 
SCORE : 127611


4 La technique de co-simulation utilisée La technique de co-simulation retenue par l’équipe MCSE repose sur la transcription du modèle de performance de la méthodologie MCSE en une description VHDL et l’utilisation d’un simulateur VHDL du commerce 
SCORE : 127463


 Lors de l’analyse des résultats de cette co-simulation, la détection éventuelle d’erreurs nécessite un retour vers les phases précédentes et notamment vers la phase de partitionnement matériel/logiciel 
SCORE : 127390


 Le mécanisme de communication (socket par exemple) doit être capable de relier le simulateur VHDL s’exécutant sur une machine sous unix et l’outil d’analyse de trace qui fonctionne dans l’environnement Windows 95/NT 
SCORE : 127234


 Cette procédure prend en compte la grandeur State (ici SupervisionState) pour connaître l’état actif de la ressource d’exécution (champ TaskState) et la puissance de cette ressource (champ Power) (voir le modèle de simulation présenté dans le paragraphe 4 
SCORE : 127225


 De tels modèles ayant la particularité pour la décomposition fonctionnelle d’être générateurs de multiples solutions, sont retenus car possédant des qualités intrinsèques: lisibilité, maintenabilité, simplicité, adéquation au modèle global MCSE 
SCORE : 127212


 De tels modèles ayant la particularité pour la décomposition fonctionnelle d’être générateurs de multiples solutions, sont retenus car possédant des qualités intrinsèques: lisibilité, maintenabilité, simplicité, adéquation au modèle global MCSE 
SCORE : 127212


 Le symbole «Exit» (carré noir) peut aussi être utilisée (voir plus loin) de manière à indiquer la fin de l'activité courante, ceci pour faciliter la représentation graphique 
SCORE : 127082


 Notre approche méthodologique basée sur la méthodologie MCSE [CALVEZ-90] pour l’approche système est aussi hiérarchique et incrémentale et permet donc de faire face à la complexité des systèmes en procédant par décomposition 
SCORE : 126913


 Mais un étage de pipeline d’instructions a moins d’influence sur les performances du processeur que la modélisation d’un cache mémoire et la prise en compte des interruptions: "Caches affect CPU performance even more than pipelining within the execution unit 
SCORE : 126836


2 NOUVELLE STRATEGIE DE DEVELOPPEMENT DES OUTILS Il est usuel de constater que dans la plupart des outils CASHE actuels le couplage de données entre outils est basé sur un échange par fichiers et non sur l’utilisation d’une base de données pour des raisons d’efficacité et d’indépendance 
SCORE : 126783


3 Analyse des structures de données Pour comprendre la technique de génération, la figure suivante représente (partiellement) la structure de données du modèle MCSE de l’exemple ci-dessus et la structure de données du template VHDL 
SCORE : 126618


 -C- Changement du niveau de granularité pour le partitionnement matériel/logiciel Le degré de granularité du partitionnement matériel/logiciel de notre méthodologie est du niveau tâche car l’unité d’allocation est la fonction 
SCORE : 126111


1 Parcours du modèle structurel de MCSE La vue structurelle permet de décrire les éléments actifs (fonction, processeur) d’un système et leurs interconnexions (événement, variables partagée et port de communication) 
SCORE : 126064


 Ainsi, la déclaration des types des signaux de connexion entre les éléments de relation et les composants actifs et celle des primitives d’accès ne dépendent plus directement du type de l’information transmise et sont uniques 
SCORE : 126038


 Ces deux fonctions sont reliées entre elles par la variable partagée Séquences qui représente l’ensemble des disques où sont stockés les fragments des séquences vidéo ou sonores disponibles sur le serveur 
SCORE : 126003


 Une méthodologie de conception système est habituellement organisée selon quatre étapes principales: l’élaboration des spécifications, la conception fonctionnelle ou préliminaire, la conception architecturale ou détaillée et la réalisation 
SCORE : 125972


) une répartition de la solution fonctionnelle en une partie purement logicielle, une partie purement matérielle et une partie plus délicate où une variation est possible entre le matériel et le logiciel 
SCORE : 125815


 Un tel template permet alors de disposer en interne de la structure XGrammarDs, la table des symboles et la structure de données XTemplateDs pour toute production d’une structure représentative du code de sortie 
SCORE : 125732


 D'une manière générale, l'observation des propriétés d'un système peut résulter de 3 techniques différentes: l'évaluation analytique (méthodes formelle), la simulation, l'observation et la mesure (monitoring) sur un prototype ou un émulateur 
SCORE : 125731


 Pour résoudre ce type de conflit, on n’a pas d’autres choix que de mettre à plat la description comme indiqué ci-dessous: subtype_declaration::= subtype_declaration_with_resolution_function_name  
SCORE : 125692


 Le chapitre 6 sur le générateur VHDL pour les performances décrit une partie analyse qui a été développée de façon suffisamment générique pour qu’elle soit commune à tous les générateurs 
SCORE : 125624


 On peut également définir plusieurs solutions d’architecture pour une même entité et choisir l’architecture retenue uniquement au moment de son instanciation (mécanisme de configuration) 
SCORE : 125595


E - l’absence de possibilité de suspension et reprise d’un process avec gel du temps ce qui aurait permis une modélisation aisée de la notion de ressource d’exécution avec degré de concurrence limité 
SCORE : 125451


 Or une séparation nette entre ces deux vues s’avère indispensable pour explorer facilement l’espace des solutions possibles pour l’architecture exécutive et pour le partitionnement matériel/logiciel 
SCORE : 125381


 Le couplage entre une fonction et un élément de relation est effectué avec un protocole de communication en 4 phases implanté sous la forme d’un signal bidirectionnel et d’une fonction de résolution 
SCORE : 125321


 Les critères tel que la flexibilité, la testabilité, l’utilisation de composants du commerce (COTS) ou technologies maîtrisées par l’entreprise, la sûreté de fonctionnement, le coût et l’expérience du concepteur influent directement sur cette première implantation 
SCORE : 125285


 Par exemple, la taille d'un message, la puissance d'un processeur, le facteur N d'instanciation multiple peuvent être des paramètres d'une modélisation qui servent à étudier son influence sur les résultats 
SCORE : 125219


 Le fait d’avoir placé la gestion des temps concernant l’accès à un élément de relation au niveau des primitives et non de l’entité gérant la relation est ici un avantage indiscutable 
SCORE : 125147


 -A- Caractéristiques et transcription d’un élément de transfert d’information L'objet Port pour le couplage est assimilable à un tampon caractérisé par sa capacité en nombre de messages (‘Capacity) et son degré de partage pour des accès multiples (‘Concurrency) 
SCORE : 125116


 En conclusion, tout texte source conforme à un langage X est représenté par une structure de données XDs dont la signification est fournie par une structure de donnée XGrammarDs qui est la transcription des règles de grammaire textuelles de X 
SCORE : 125085


 La traduction nécessite la création/instanciation de tâches et l’utilisation de mécanismes de synchronisation surtout si la création des tâches ne peut être dynamique comme c’est le cas pour VHDL 
SCORE : 124820


 Pour la partie logicielle, très souvent, une organisation multi-tâches doit être retenue par suite de l’existence de plusieurs fonctions asynchrones à implanter sur un même microprocesseur 
SCORE : 124801


 SPECIFICATION DE REALISATION Structure d’exécution Allocation Implantation logicielle VERIFICATION DES SPECIFICATIONS Schéma de réalisation Implantation et réalisation Test composants et cartes Ecritures : tâches modules procédures Compilation chargement Test du logiciel Dialogue Réalisation matérielle Réalisation logicielle INTEGRATION et TESTS produit opérationnel Outils Outils Instrumentation Système de développement ETUDES DE CAS 12 M 
SCORE : 124784


 SPECIFICATION DE REALISATION Structure d’exécution Allocation Implantation logicielle VERIFICATION DES SPECIFICATIONS Schéma de réalisation Implantation et réalisation Test composants et cartes Ecritures : tâches modules procédures Compilation chargement Test du logiciel Dialogue Réalisation matérielle Réalisation logicielle INTEGRATION et TESTS produit opérationnel Outils Outils Instrumentation Système de développement ETUDES DE CAS 12 M 
SCORE : 124784


 Pour la fonction F, le problème important à résoudre consiste à obtenir une exécution de toutes ses fonctions internes avec les échanges par relations conformément à ses attributs 
SCORE : 124681


 Comme chaque noeud possède son type même après duplication, les champs du noeud résultat sont définis par ceux de son noeud modèle dans la structure de la grammaire 
SCORE : 124563


 Un couplage entre les deux modèles de performances a été réalisé: les blocs hybrides [KUMAR-97] permettent en effet de relier le modèle UVa avec le modèle de performance de Honeywell Technology Center qui fait partie de l’outil Cosmos de Omniview 
SCORE : 124557


 La fonction Save est simplement un programme de parcours de la structure interne assurant sa transcription sous forme textuelle et son formatage par indentation et contrôle des retours de ligne 
SCORE : 124381


E - Ecrire le script pour implanter les opérations nécessaires pour réaliser la transcription: d’un point de vue macroscopique, une grande partie du temps sert à dupliquer des branches et à mettre à jour des noms 
SCORE : 124318


 Nous avons retenu cette idée car elle devrait permettre à toute autre personne de développer un générateur spécifique sans avoir à connaître et à intervenir dans le code du générateur 
SCORE : 124232


 Par conséquent, la modélisation des performances durant la conception nécessite l’ajout du concept de temps d’exécution pour les actions et les opérations afin d’extraire des propriétés temporelles du système 
SCORE : 124204


 Récemment, l’université de Virginie a pris conscience de la nécessité d’avoir une démarche système: "a local optimization made at the structural level of Design may have a detrimental effect on overall system performance" [KUMAR-96] 
SCORE : 124201


 Il reste alors chaque partie co-design qui nécessite une démarche plus affinée pour aboutir à sa spécification détaillée permettant ensuite la vérification et la réalisation 
SCORE : 124040


 Au besoin, il est possible de représenter et interpréter sur le même graphique la description structurelle d’un système (dimension organisationnelle) et l’évolution temporelle de ses composants (dimension temporelle) 
SCORE : 123982


 La transmission de chaque message sur le bus transbus est modélisée par l’envoi du message sur un des éléments du port TB dont l’index est défini par l’attribut ‘Id (valeur aléatoire entre 1 et K) 
SCORE : 123772


 Par rapport au SpecChart, comme notre modèle est non-interprété, il n’est pas nécessaire d’ajouter une boucle supplémentaire puisqu’en modifiant la procédure Delay, on peut terminer l’exécution d’une activité en temps nul 
SCORE : 123765


 Au contraire, pour chaque étape, plusieurs méthodes sont utilisables et c'est au concepteur de choisir selon des critères, celle qui lui permet de résoudre au mieux son problème 
SCORE : 123705


 Au contraire, pour chaque étape, plusieurs méthodes sont utilisables et c'est au concepteur de choisir selon des critères, celle qui lui permet de résoudre au mieux son problème 
SCORE : 123705


 Lors d’une exécution sur un processeur de degré de concurrence limité, l’entité n’a pas besoin de tenir compte de l’état (active, inactive, bloquée ou en attente) de la fonction (tâche) producteur 
SCORE : 123667


 Pour cela, nous avons défini l’instruction IncludeOp dont la syntaxe est: VarString := IncludeOp(FileAccessName, mode) L’inclusion d’un fichier texte peut se faire par copie (mode=0) ou par référence (mode=1) 
SCORE : 123643


 Le principe de fonctionnement est le suivant: l’analyseur lexical envoie une par une les unités à l’analyseur syntaxique qui les stocke (utilisation d’une pile) jusqu’à ce qu’une règle grammaticale soit complète 
SCORE : 123605


 C’est pourquoi, la plupart des outils d’analyse de performances basés sur ces modèles utilisent principalement la simulation et non l’évaluation analytique pour faire une estimation des performances 
SCORE : 123535


 Cependant, comme le langage VHDL ne dispose pas de mécanisme de suspension de process, nous avons du décrire explicitement un composant ordonnanceur et une procédure spécifique de gestion des temps d’attente 
SCORE : 123521


 Dans le passé, l’équipe MCSE a déjà développé trois types de générateurs de code pour le modèle fonctionnel de MCSE: un générateur de C [CALVEZ-93c], un générateur d’OCCAM [PASQUIER-93], un générateur de VHDL simulable [BAKOWSKI-92] et synthétisable [HELLER-92] [CALVEZ-93d] 
SCORE : 123493


 Lorsque les contraintes de temps sont assez faibles, la réalisation est logicielle avec ou sans l’emploi d’un exécutif temps-réel (utilisation du mécanisme de gestion des interruptions du processeur) 
SCORE : 123316


 Pour certaines descriptions, la même activité doit être utilisée à des instants différents ou/ et dans des activités ou fonctions différentes ou doit être instanciée plusieurs fois 
SCORE : 123132


 La fonction de manipulation parcourt la structure de données du modèle source et crée à partir des informations recueillies une structure de données de sortie dont la grammaire est celle du langage cible 
SCORE : 123092


 La simulation a bien montré l’effet de coïncidences défavorables (accès aux mêmes disques ou temps d’accès consécutifs à des disques plus élevés que la valeur moyenne) entraînant des ruptures de séquences 
SCORE : 122885


 Au fur et à mesure du raffinement de la solution, les développements concernent des problèmes plus spécifiques en rapport avec la réalisation : développement d'un composant, d'une fonction spécifique, d'un module logiciel  
SCORE : 122869


 Au fur et à mesure du raffinement de la solution, les développements concernent des problèmes plus spécifiques en rapport avec la réalisation : développement d'un composant, d'une fonction spécifique, d'un module logiciel  
SCORE : 122869


 Une fois le partitionnement matériel/logiciel terminé, les descriptions fonctionnelles sont transformées en code machine pour une implantation en logiciel et en un ensemble de portes logiques et de bistables pour une implantation en matériel 
SCORE : 122796


 On trouve ensuite les champs: - NextFriend pour permettre son inclusion dans une liste et donc dans un ensemble, - Father pour être capable de remonter la structure, - Reserved pour des utilisations ultérieures, - FieldNb qui définit le nombre de références qui suivent 
SCORE : 122788


 Le fonction Scheduler se charge aussi de mettre à disposition de chaque fonction qu’elle gère la puissance d’exécution à exploiter (Power d’une fonction = ‘Power de cette fonction * Power de la fonction englobante) 
SCORE : 122783


 Ainsi une activité raffinée peut exploiter des liens de 3 types: information, événement, donnée partagée - chacun défini par les attributs décrits pour les 3 types de relation du modèle structurel 
SCORE : 122703


 La procédure de génération d’une occurrence de trace doit alors être asservie à l’état d’un indicateur qui sera positionné par le simulateur en fonction des ordres provenant de l’outil d’analyse de trace 
SCORE : 122690


 Des valeurs génériques associées à l’activité permettent aussi de disposer d’activités génériques de manière à créer au moment de l’instanciation une activité avec des caractéristiques particulières 
SCORE : 122582


 Ils pensaient en effet que la possibilité de détecter les erreurs de spécification et de conception en simulant le système relativement tôt dans le cycle de développement, suffisait à obtenir une conception sans erreur et de qualité 
SCORE : 122533


 Dans un SpecChart (c) [GAJSKI-94], une différence est introduite entre TOC (Transition On Completion) qui veut dire que l’état A1 est achevé mais n’est quitté que sur la condition E, de l'état TI (Transition Immediately) qui correspond au diagramme à états finis ou au Statechart: sortie immédiate de A1 sur la condition E 
SCORE : 122458


 Ces résultats sont obtenus par une co-simulation du matériel et du logiciel à un niveau macroscopique et non-interprété mais suffisamment détaillé pour observer rapidement des résultats intéressants 
SCORE : 122136


 L'analyse de l'environnement conduit à une synthèse de la réalité sous la forme d’un modèle, et l'introduction des objectifs à atteindre conduit à un enrichissement de la modélisation précédente en considérant en supplément l'apport du système 
SCORE : 122125


 L'analyse de l'environnement conduit à une synthèse de la réalité sous la forme d’un modèle, et l'introduction des objectifs à atteindre conduit à un enrichissement de la modélisation précédente en considérant en supplément l'apport du système 
SCORE : 122125


E 7 Pour chaque étape, le concepteur dispose en entrée : de la description d'un niveau intermédiaire comme résultat de l'étape précédente, de renseignements complémentaires que sont les contraintes imposées dans les spécifications 
SCORE : 122104


E 7 Pour chaque étape, le concepteur dispose en entrée : de la description d'un niveau intermédiaire comme résultat de l'étape précédente, de renseignements complémentaires que sont les contraintes imposées dans les spécifications 
SCORE : 122104


 Bien que ce soit déconseillé, le concepteur peut modifier ces zones de texte figées avec l’instruction ReplaceCharAt qui permet de changer un caractère d’une chaîne de caractères et dont la syntaxe est: ReplaceCharAt(StringRef, Index, NewChar) 
SCORE : 122100


 Pour cela, à chaque lien de sortie est affecté un pourcentage, l'un des liens possède le qualificatif "else", sachant que ce cas n’est pas obligatoire, ce qui veut dire qu’il n’y a pas toujours génération d’une sortie 
SCORE : 122090


 En effet VHDL possède un certain nombre de propriétés intéressantes en particulier le parallélisme inhérent au langage qui permet aisément la description et la simulation de systèmes décrits par du parallélisme 
SCORE : 122076


6 Modélisation des performances du serveur avec des processeurs Une simulation qui consiste à faire intervenir la notion de structure d’exécution pour le dimensionnement de la solution matérielle est bien moins évidente 
SCORE : 122054


 Un "shift/reduce" conflit apparaît quand pour un token d’entrée il y a deux possibilités d’interprétation et que l’une des possibilités complète une règle (reduce option) et pas l’autre (shift option) 
SCORE : 121895


 Pour les applications qui nous concernent, il est indispensable de pouvoir modéliser l'activation d'une opération ou d'une activité parmi un ensemble et ceci lorsque la condition associée devient vraie 
SCORE : 121845


 La nature spécifique du traitement à effectuer et le couplage du système avec son environnement nécessitent aussi des compétences complémentaires: en traitement de l’information (signal, image, parole 
SCORE : 121823


 On peut imaginer qu’un générateur de code C ciblant sur différents exécutifs temps-réel utilisera une seule fonction d’analyse et plusieurs fonctions de génération et templates 
SCORE : 121733


E 35 Une séparation nette apparaît sur l’axe Interprétation entre : - les modèles non-interprétés pour lesquels seul le comportement ou les dépendances temporelles entre les sorties et les entrées sont observées 
SCORE : 121723


 Pour que tous les temps d’exécution n’évoluent que durant l’état Active, ils sont tous simulés par une procédure DELAY qui permet ainsi de gérer un point de préemption par la ressource d’exécution 
SCORE : 121513


2 CHOIX DU LANGAGE VHDL A première vue, le choix du langage VHDL conduit à disposer d’une excellente plate-forme pour l’évaluation des performances aussi bien pour la simulation que pour l’extraction et l’analyse des résultats 
SCORE : 121486


 Pour achever la réalisation, l'intégration et le test ont pour objectif de réunir toutes les parties des développements de manière à fournir un système opérationnel conforme aux souhaits du demandeur 
SCORE : 121479


 Pour achever la réalisation, l'intégration et le test ont pour objectif de réunir toutes les parties des développements de manière à fournir un système opérationnel conforme aux souhaits du demandeur 
SCORE : 121479


 Une fois que le processeur a effectué le travail désiré, la transaction accède aléatoirement à l’un des deux disques du système modélisés comme le processeur par la combinaison d’une file d’attente et d’un noeud de service 
SCORE : 121382


 Pour une entreprise, le développement d’un produit s’évalue en termes de : Coûts: Il faut connaître le véritable coût d’un développement en interne, mais aussi le véritable coût d’un projet sous-traité 
SCORE : 121277


 Pour cette simulation, le nombre d’utilisateurs et de canaux haut débit du serveur est 10 (limitation liée à la taille de la mémoire dynamique et virtuelle de la machine utilisée pour la simulation) 
SCORE : 121244


 La fonction de sauvegarde qui correspond à un parcours ordonné de la structure de données créée et à l’exploitation de la grammaire pour le formatage du texte de sortie génère le fichier texte final 
SCORE : 120777


 La première phase correspondant au parcours descendant consiste à générer même de manière incomplète tous les éléments du modèle final permettant de respecter la hiérarchie du modèle source 
SCORE : 120603


 Plutôt que d’effectuer l’interprétation du texte du script pour l’exécution, le script est aussi chargé en mémoire sous la forme d’une structure de données comme le montre la figure 5 
SCORE : 120534


 - La conception fonctionnelle, qui a pour objectif de trouver la description fonctionnelle, composée d’une structure fonctionnelle pour l’organisation interne de la solution et du comportement de toutes les fonctions nécessaires (HOW) 
SCORE : 120441


 - La conception fonctionnelle, qui a pour objectif de trouver la description fonctionnelle, composée d’une structure fonctionnelle pour l’organisation interne de la solution et du comportement de toutes les fonctions nécessaires (HOW) 
SCORE : 120441


 Les éléments de relation que sont les événements, les variables d’état, les ports sont aussi caractérisables par des spécifications temporelles que sont par exemple les temps de lecture et d’écriture, le degré d’accès simultanés 
SCORE : 120415


1 Présentation de l’exemple Il s’agit d’un système de communication basé sur un ensemble de cartes identiques inter-connectées par un bus série du type anneau à jeton appelé Transbus et détaillé dans [CALVEZ-96c] 
SCORE : 120349


 Ils sont représentatifs des systèmes pour lesquels les réalisations autrefois à dominante matérielle ont progressivement évoluées vers un partage matériel/logiciel avec un accroissement de la partie logicielle car les microprocesseurs sont devenus de plus en plus puissants 
SCORE : 120302


5 Bilan sur la transcription du modèle structurel La partie délicate de la transcription a concerné la prise en compte d’un processeur logiciel qui conduit à restreindre le degré de parallélisme des fonctions qu’il supporte 
SCORE : 120291


 A noter que pour respecter des règles de bonne structuration, tout résultat de composition possède un point d’entrée temporel en dessus et surtout une seule sortie en bas 
SCORE : 120280


 La démarche consiste ensuite à rechercher par raffinements successifs et pour chaque fonction à concevoir, les variables et événements internes caractéristiques nécessaires et si possible suffisants 
SCORE : 120243


 La démarche consiste ensuite à rechercher par raffinements successifs et pour chaque fonction à concevoir, les variables et événements internes caractéristiques nécessaires et si possible suffisants 
SCORE : 120243


 Lorsque le simulateur VHDL reçoit une information de l’exécution de la partie C (socket), il met à jour les signaux concernés après un délai d’attente qui correspond au temps d’exécution de la partie C 
SCORE : 120176


 Si plusieurs générateurs utilisent le même modèle source, il faut essayer d'obtenir une partie Analyse suffisamment générique pour qu'elle soit commune à tous les générateurs 
SCORE : 120143


 L’estimation des performances statiques telles que la surface de silicium occupée, la puissance consommée repose sur des techniques de synthèse qui nécessitent une description au moins du niveau algorithmique 
SCORE : 120135


 -C- Efficacité d'évaluation Comme l'objectif est de déduire rapidement les propriétés utiles de la solution décrite, il faut pouvoir disposer d'un moyen efficace et fiable d'extraction des données objectives essentielles 
SCORE : 120099


 Les solutions de co-simulation reposent sur l’emploi d’un langage de représentation unique et exécutable ou pour une simulation hétérogène sur l’utilisation d’un mécanisme de communications entre différents simulateurs 
SCORE : 120012


 On peut conclure que tout texte respectant une grammaire peut se décrire sous la forme d’une structure de données construite sur la base des 2 opérateurs: composition et ensemble 
SCORE : 119728


 La complexité des systèmes que nous considérons sort souvent du domaine d’application strict des modèles analytiques et la simulation reste alors la seule alternative possible 
SCORE : 119623


 Les concepts suivants servent, d’une part à exprimer ces propriétés, d’autre part à disposer d’un modèle facilitant la transition progressive des spécifications en une solution interne détaillée 
SCORE : 119559


 La modélisation des performances faite pour les 2 niveaux d’abstraction du serveur (fonctionnel et exécutif) a permis de déduire et confirmer des paramètres importants que nous ne pouvions pas déterminer par la modélisation statique 
SCORE : 119427


 Le partitionnement de la structure fonctionnelle est la première tâche qui permet d’identifier les fonctions qui peuvent être implantées en logiciel et les fonctions à implanter obligatoirement en matériel 
SCORE : 119364


 F McseDs ComponentDef 1:n Relations F1 1:n Component DefV <Var> Relation V 0:n DefV <Var> Interface V <InOut> InputOutput Description ComponentDef F11 1:n Component 0:n DefV <Var> Interface V <Out> InputOutput Description F12 0:n DefV <Var> Interface V <In> InputOutput Niveau 1 Niveau 2 BehaviorDef F2 Component 0:n DefV <Var> Interface V <InOut> InputOutput Description BehaviorDef BehaviorDef F1 F11 F12 V F2 F Représentation graphique de la structure fonctionnelle du système Représentation graphique partielle de la structure de données du système <RelationTypes> DefV 
SCORE : 119332


 Il faut être conscient à ce stade de la variété des stratégies de réalisation qui dépendent d'au moins 3 facteurs : les spécifications en entrée, les techniques à mettre en oeuvre, les outils et méthodes disponibles 
SCORE : 119315


 Il faut être conscient à ce stade de la variété des stratégies de réalisation qui dépendent d'au moins 3 facteurs : les spécifications en entrée, les techniques à mettre en oeuvre, les outils et méthodes disponibles 
SCORE : 119315


 Si la demande est correcte, un tirage aléatoire (Proba) permet d’orienter l’ordre vers la fonction d’enregistrement Recording par OrderRec ou vers une fonction de lecture ReadMovie associée au téléviseur du même indice par OrderRead[‘Id] 
SCORE : 119288


 Il est utile de compléter cette évaluation par une estimation du temps d’exécution des opérations (activités élémentaires) et une analyse des performances dites statiques des propriétés des constituants et du système résultant 
SCORE : 119044


 Pour mieux interpréter les différences existant entre les modèles de performance qui vont être présentés dans ce chapitre, considérons l’espace de modélisation tri-dimensionnel représenté par la figure 2 
SCORE : 118928


 - la gestion de la maintenance : domaine et procédures de maintenance, solutions et outils, planification, - la gestion de la qualité : assurance qualité, méthode pour l'obtention de la qualité, procédures de contrôle 
SCORE : 118760


 - la gestion de la maintenance : domaine et procédures de maintenance, solutions et outils, planification, - la gestion de la qualité : assurance qualité, méthode pour l'obtention de la qualité, procédures de contrôle 
SCORE : 118760


 - Lorsque la structure est complète, le programme code est produit dans un fichier par la fonction Save qui exploite la grammaire XGrammarDs pour l’interprétation et sa table des symboles pour l’écriture des champs terminaux 
SCORE : 118675


 L’outil COSMOS n’est en effet pas capable de modéliser le comportement d’une fonction implantée en matériel puisque la vue logicielle ne permet de décrire que le comportement de tâches logicielles 
SCORE : 118497


 Les générateurs de code qui seront obtenus à partir du méta-générateur MetaGen doivent permettre de produire un programme complet pour faire une simulation fonctionnelle ou une synthèse 
SCORE : 118406


 Il permet ainsi au concepteur de trouver par une démarche itérative le partitionnement et l’allocation optimale vis à vis des contraintes de performances dynamiques qui lui sont imposées 
SCORE : 118307


 Tout comme pour le parcours BFS, l’utilisation de ce type de parcours n’est possible que si la génération des éléments d’un niveau ne nécessite pas d’informations provenant de l’analyse de niveaux inférieurs 
SCORE : 118294


 Pour l’extraction de résultats, on peut facilement définir une librairie de composants permettant d’extraire par exemple le taux d’occupation d’une ressource ou le débit sur un port de communication 
SCORE : 118238


 -- on ne peut pas definir des types non contraint d'elements non -- contraint donc comme on ne connait pas N et ND(P) au niveau du -- Package on est oblige de declarer des primitives send a ce niveau PROCEDURE send( information : IN DefDemD 
SCORE : 118211


 La méthode de partitionnement proposée repose sur la démarche itérative suivante: Compte tenu des divers critères qui lui sont imposés, le concepteur définit une première architecture matérielle 
SCORE : 118195


 Après avoir analysé la spécification d’une grammaire, nous présentons dans ce chapitre ce modèle générique appelé par la suite méta-structure ainsi que l’architecture commune des générateurs 
SCORE : 118183


 Les données d’entrée en tant que spécifications sont: la description fonctionnelle détaillée de la partie concernée par le co-design, les spécifications non-fonctionnelles de cette partie 
SCORE : 118153


 Il est facile d’extraire dans cet exemple la partie minimale à implanter en matériel pour satisfaire le débit du bus et le protocole de communication au niveau bit imposé par Transbus [CALVEZ-96c] 
SCORE : 118103


 Cette propriété est intéressante pour le développement d’un générateur d’interface matériel/logiciel qui doit laisser le choix au concepteur entre plusieurs solutions d’implantation possibles 
SCORE : 117845


1 PRESENTATION DE LA METHODOLOGIE DE CO-DESIGN Les méthodologies proposées pour le co-design se distinguent essentiellement par: - les concepts de modélisation utilisés de la spécification du système au produit final, - les modèles de l’architecture cible 
SCORE : 117825


E 163 - le nom du script qui est utilisé pour nommer la classe d’objet obtenue par la transcription du script en code JAVA, - la clause de configuration qui permet de paramétrer l’exécution et la génération du script 
SCORE : 117810


 Interrupt latency, the time required for the CPU to execute the first instruction of a interrupt handler after an interrupt is raised can significantly affect performance 
SCORE : 117810


 L’architecture cible peut être une architecture mono-processeur constituée d’un processeur, d’un ensemble de composants matériels spécifiques (ASIC, FPGA) et éventuellement une mémoire commune 
SCORE : 117784


 Pour une exploitation efficace du template, la structure de données est parcourue une seule fois au début de la génération et un ensemble de pointeurs sur ses éléments caractéristiques est mis à jour 
SCORE : 117652


 Il s’agit donc de développer la fonction Generation selon une approche d’automate d’exécution s’appliquant sur le parcours du script représenté en interne par sa structure de données 
SCORE : 117608


 Cette transformation s’effectue habituellement en deux phases: la sélection d’une architecture matérielle et l’allocation des éléments (fonctions et éléments de relations) du modèle fonctionnel sur les éléments de cette architecture 
SCORE : 117564


 Il existe dans les domaines universitaire et commercial un certain nombre d’outils qui regroupent un générateur d’analyseur lexical, un générateur d’analyseur syntaxique et de structure interne et une interface de programmation (API C/C++) 
SCORE : 117546


 -G- Attributs utilisateur Tout autre attribut peut être ajouté par l’utilisateur sur son modèle, en particulier lorsqu’il s’agit de spécifier un contenu de variable partagée ou d’un message 
SCORE : 117539


 Il commence par calculer le nombre de cycles nécessaires aux accès mémoire en tenant compte de l’utilisation éventuelle d’un cache et additionne ce résultat aux cycles de l’instruction 
SCORE : 117463


 Avec cet exemple, nous avons montré que notre modèle autorise la co-simulation macroscopique et non-interprétée des fonctions logicielles et des composants matériels 
SCORE : 117420


 Le diagramme des activités favorise la structuration du comportement global de l’élément considéré (système, fonction) en comportements partiels et décrit clairement les interactions entre parties 
SCORE : 117293


 Le diagramme des activités favorise la structuration du comportement global de l’élément considéré (système, fonction) en comportements partiels et décrit clairement les interactions entre parties 
SCORE : 117293


5 Co-simulation et résultats L’objectif de cette co-simulation est de montrer que le modèle de performance permet d’évaluer les performances globales de différentes implantations de la solution fonctionnelle d’un système 
SCORE : 117291


 Ces modèles ont l’avantage de s’appuyer sur un formalisme mathématique qui dans certains cas permet d’extraire des informations sans qu’une simulation dynamique soit nécessaire 
SCORE : 117268


 -B- Le modèle de performance de MCSE Le travail effectué lors de cette thèse a permis d’enrichir et valider les concepts du modèle de performance utilisé pour l’estimation des propriétés d’un partitionnement matériel/logiciel 
SCORE : 117221


 L'apprentissage est d'autant plus efficace si le concepteur a pu prendre quelquefois la responsabilité de toutes les phases d'un projet: cahier des charges, spécifications, développement, réalisation, tests, production 
SCORE : 117109


 Le processeur logiciel peut aussi être modélisé comme une ressource active caractérisée par un ensemble d’attributs influençant son comportement temporel 
SCORE : 117058


3 Le modèle fonctionnel Pour concevoir le système de communication, il est nécessaire de prendre en compte la décomposition du système en un ensemble de cartes et le bus d’interconnexion (répartition géographique de l’application) 
SCORE : 117021


 A partir de l’étape de conception fonctionnelle, l’unicité du modèle facilite aussi la conception sans erreur (pas de déformation ou perte d’information liées à une transcription de modèle) et améliore la traçabilité 
SCORE : 116885


 Les spécifications fonctionnelles et opératoires sont utilisées durant l'étape de conception fonctionnelle, tandis que les spécifications technologiques ne servent que pour les étapes de définition de la réalisation et de réalisation 
SCORE : 116823


 Les spécifications fonctionnelles et opératoires sont utilisées durant l'étape de conception fonctionnelle, tandis que les spécifications technologiques ne servent que pour les étapes de définition de la réalisation et de réalisation 
SCORE : 116823


 L’entité gérant cet élément de relation est capable d’ordonnancer les accès multiples soit en fonction de leur priorité (‘Priority) soit en fonction de leur estampille (‘Date) 
SCORE : 116798


 Pour une séquence donnée, l’accès des fragments successifs sur l’ensemble des disques se fait maintenant selon une technique de Round Robin et le numéro de disque du premier fragment est tiré aléatoirement 
SCORE : 116783


 L’attribut ‘Power de la fonction F implique simplement la modification des temps d’exécution de tous les constituants internes en utilisant Power comme facteur multiplicatif (<1 implique un ralentissement, > 1 implique une accélération) 
SCORE : 116781


 Avant de décrire le principe de partitionnement qui repose sur une démarche itérative et sur une évaluation des performances dynamiques du système, nous passons en revue différentes méthodes de partitionnement 
SCORE : 116730


 Le modèle de performance de MCSE décrit sous une forme textuelle ou résultant d’une saisie graphique sert de point d’entrée à un générateur de code (MCSE-GEN) qui le transforme en un code VHDL simulable 
SCORE : 116556


 Si le logiciel doit satisfaire des contraintes de temps sévères, un programme Java peut aussi être compilé en code machine à la volée (compilateur Just- In- Time) ou définitivement (compilateur natif) 
SCORE : 116554


 Si ils sont utilisés, ces attributs seront alors définis dans le message lui-même au niveau du record DefInformation comme nous le verrons plus loin 
SCORE : 116530


 Le terme "template" représente ici un fichier écrit dans le langage cible souhaité et contenant toutes les constructions nécessaires pour la translation texte à texte 
SCORE : 116520


E 27 logicielles, il faut faire communiquer différents simulateurs (IPC d’unix [THOMAS-93], fond de paniers de simulateurs, Ptolemy [KALAVADE-95], interface via le bus du microprocesseur [McCabe-94]) 
SCORE : 116425


 Si l’activité est implantée sur un processeur, il nous faut enfin également modifier les primitives BlockingTask et WaitingTask pour ne pas rester bloqué dans ces primitives lors d’une fin d’exécution forcée 
SCORE : 116424


 Les opérateurs de composition qui concernent des occurrences sont: - & pour le ET séquentiel qui impose une relation d'ordre strict d'apparition, - ^ pour le ET logique sans ordre d'apparition, - OR pour le OU logique, - S pour la sélection 
SCORE : 116414


 Des symboles spécifiques sont exploiter pour représenter, d’une part l’enchaînement (structure de contrôle), d’autre part les actions associées aux éléments de synchronisation ou de communication 
SCORE : 116311


 Enfin, tout comme les systèmes temps-réel, ils doivent généralement respecter des contraintes dynamiques (temps de réaction faible, débit élevé) 
SCORE : 116152


 D’autre part, les contraintes de temps doivent être évaluées correctement pour le cas le plus défavorable de manière à pouvoir prouver a priori le bon fonctionnement de l'application 
SCORE : 116131


 D’autre part, les contraintes de temps doivent être évaluées correctement pour le cas le plus défavorable de manière à pouvoir prouver a priori le bon fonctionnement de l'application 
SCORE : 116131


 Pour cela, les caractéristiques d'un tel modèle ont tout d'abord été présentées, ainsi qu'une analyse des concepts essentiels avec leurs propriétés 
SCORE : 116120


 Il est bon de noter qu’une méthode efficace doit reposer sur un ensemble de concepts de modélisation restreint mais suffisant pour décrire n’importe quel système 
SCORE : 116059


 L’ensemble de la solution - matériel, logiciel, interfaces - sert ensuite pour une vérification détaillée de toutes ses propriétés: propriétés fonctionnelles et non-fonctionnelles 
SCORE : 116037


 Si de plus, l’application est implantée sur le modèle client-serveur et utilise le protocole RMI (Remote Method Invocation), alors elle est utilisable par tous mais sa propriété intellectuelle (code source) est préservée 
SCORE : 115844


 Le travail sur la génération de code présenté dans ce chapitre a aussi amené l’équipe MCSE à revoir sa stratégie de développement des outils comme support pour la méthodologie MCSE 
SCORE : 115825


 S’ajoute un autre attribut (‘Kind) permettant de différencier une opération d’attente qui ne nécessite pas de ressource d’exécution (passive) d’une opération d’exécution impliquant l’emploi d’une ressource (active) 
SCORE : 115754


 Un premier paramètre concerne sa vitesse d'exécution pour tous les constituants inclus qui correspond à sa puissance exprimée par rapport à l’unité (puissance relative) 
SCORE : 115709


 Les descriptions concurrentes représentent alors les différents processeurs matériels et logiciels et pour chaque processeur logiciel la partie logicielle est représentée par une description séquentielle 
SCORE : 115687


 Ceci est normal car le modèle de composition hiérarchique est le modèle d’une structure de donnée qui est une instance de notre méta-modèle et pour laquelle l’élément optionnel est remplacé soit par la valeur A soit par l’élément nul 
SCORE : 115534


 -A- Maximum en matériel (zone 2 et 3 en matériel) Pour obtenir des résultats appropriés, il est nécessaire de connaître le temps de transfert d’un octet sur le bus quand les fonctions EmissionMess et ReceptionMess sont implantées en matériel 
SCORE : 115448


 La première forme d’observation sert plus particulièrement pour la mise au point et la vérification fine du bon comportement du modèle et nettement moins pour l’évaluation des indices de performance 
SCORE : 115316


 Les fonctions Prod et User sont implantées sous la forme d’une entité dont les entrées/sorties sont composées du signal States (ressource d’exécution limitée) et du signal EvIn (respectivement EvOut) pour la synchronisation 
SCORE : 115304


5 GENERATION DU LOADER L’objectif est de disposer d’un programme Loader capable de transformer tout texte MCSE conforme aux règles de grammaire du modèle MCSE en une structure de données McseDs et un ensemble de tables des identificateurs 
SCORE : 115233


 La fonction Save qui correspond à un parcours ordonné de la structure de données interne et à l’exploitation de la grammaire pour le formatage du texte de sortie ne pose pas de difficultés particulières d’implantation 
SCORE : 115220


 Sur les 28 secondes, 18 sont utilisées par l’analyseur lexical et l’analyseur syntaxique pour le chargement de la structure de données de l’exemple à partir de sa description textuelle 
SCORE : 115192


 Concernant le comportement du port, rappelons qu’un producteur doit se bloquer s’il n’y a plus de place pour le dépôt et qu’un consommateur doit se bloquer en l’absence de messages dans la file du port 
SCORE : 115157


 - le niveau Description exécutive, qui explicite les spécifications complètes de la réalisation en décrivant la partie matérielle par une structure d’exécution et la partie logicielle par des schémas d’implantation logicielle 
SCORE : 114994


 - le niveau Description exécutive, qui explicite les spécifications complètes de la réalisation en décrivant la partie matérielle par une structure d’exécution et la partie logicielle par des schémas d’implantation logicielle 
SCORE : 114994


 Dans le cas d'un lien physique de communication ou de transfert, qui lui peut être bidirectionnel ou unidirectionnel, le degré de partage permet de différencier entre liens fullduplex ou half-duplex 
SCORE : 114968


 A noter que la deuxième phase se doit d'être la plus transparente et la plus efficace possible pour l’utilisateur, l’objectif de ce dernier étant de permettre d’itérer rapidement entre les phases 3 et 1 
SCORE : 114957


 Le méta-Parser exploite en entrée la méta-grammaire à laquelle se trouvent associées les règles de production du code source de Grammar-Parser, de la MetaDs, de la table des symboles de la méta-grammaire 
SCORE : 114902


 L’entité gérant l’élément de relation est passive par rapport à la ressource d’exécution car les temps d’accès à l’élément de relation sont simulés du coté producteur/consommateur 
SCORE : 114878


 Une telle copie concerne la duplication de tous les noeuds de la structure, de tous les identificateurs et valeurs, de la mise à jour de tous les champs de cette nouvelle structure 
SCORE : 114845


 Pour chaque outil de cette liste non exhaustive, on s’intéresse plus aux propriétés des modèles de performances considérés qu’aux caractéristiques de l’outil support 
SCORE : 114735


 Ce comportement est décrit sous la forme d’un diagramme de flot ou sous le forme d’un programme VHDL saisi manuellement par l’utilisateur (utilisation d’un ensemble de primitives prédéfinies) 
SCORE : 114697


7 PRINCIPE DE GENERATION DE CODE Le principe de génération de code retenu est d’exploiter la structure de données équivalente d’un fichier template (ou fichier modèle) écrit dans le langage cible noté ici X 
SCORE : 114650


 Ce chapitre présente la méthodologie de co-design préconisée au sein de l’équipe MCSE caractérisée par sa méthode de partitionnement et sa technique de co-simulation 
SCORE : 114522


 - la co-synthèse (étape de réalisation) qui se charge de transformer les descriptions fonctionnelles en descriptions directement implantables sur les processeurs matériels et logiciels de l’architecture cible 
SCORE : 114515


 -A- Représentation de la vue matérielle La saisie du modèle d’architecture matérielle graphique et hiérarchique repose sur l’interconnexion de blocs et l’utilisation d’une librairie VHDL (modèle de performance de Honeywell Technology Center) dont les composants sont paramétrables 
SCORE : 114511


E 193 L’algorithme de parcours du modèle comportemental se déduit de l’analyse du métamodèle de structure de données pour la description des activités dont la représentation graphique est donnée ci-dessous 
SCORE : 114313


 L’utilisation d’un niveau de granularité fine concerne plutôt des systèmes de faible complexité ou une conception architecturale avancée qui se situe relativement tard dans le cycle de développement 
SCORE : 114223


 Un générateur est alors le résultat de la définition des grammaires des langages source et cible afin d’obtenir les analyseurs syntaxiques associés, la définition d’un ou plusieurs fichiers Chapitre 5 172 M 
SCORE : 114151


 A ce titre, on peut citer le langage de description VHDL [3] souvent associé à un environnement de description graphique tel que HDL-Designer ou bien des environnements de modélisation de systèmes comme Matlab-Simulink 
SCORE : 114093


 Cette librairie contient les modèles de performances de 4 types d’éléments: les processeurs, les mémoires, les a) Modèle logiciel b) Modèle matériel File d’attente Tache Periodique Matrice d’interconnection Bloc raffiné Méthodologie de co-design et estimation des performances M 
SCORE : 114022


 La modification de la structure de données d’un script peut aussi se faire en interactif par une édition orientée par la syntaxe car toutes les règles de grammaire sont connues par l’outil 
SCORE : 114007


 -A- Attributs ‘Time, ‘Write, ‘Read L’attribut ‘Time sert à définir le temps nécessaire pour une opération ou une activité et les attributs ‘Write et ‘Read pour une interaction avec l'environnement: lecture d'une donnée, dépôt d'un message, etc 
SCORE : 113972


 -A- Association du modèle de structure et du modèle de comportement Le premier aspect intéressant est de constater qu’il est possible d’exploiter simultanément le modèle de structure fonctionnelle et le modèle comportemental rappelés ci-dessus 
SCORE : 113916


2 Couplage avec l’outil d’analyse de trace Le couplage entre le couple générateur/simulateur VHDL et l’outil d’analyse de trace est pour l’instant du type hors ligne 
SCORE : 113913


 Lorsque le script est transcrit en code Java, l’exécution est plus rapide, sachant qu’en contre-partie il ne peut plus être modifié par un programme extérieur que par une surcharge de méthodes 
SCORE : 113814


 Avec les temps choisis pour les opérations élémentaires du modèle de performance de la fonction Lecture, on peut seulement conclure qu’un seul processeur d’exécution peut gérer 10 0 
SCORE : 113806


 A ce stade, les concepteurs effectuent facilement en tenant compte de différents critères (répartition géographique, performance, coût, sûreté de fonctionnement, flexibilité, testabilité, etc 
SCORE : 113800


 -B- Analyse d’une activité simple Un nom d’activité peut représenter une activité élémentaire ou un découpage de l’activité analysée défini dans l’ensemble BehaviorDefinition d’où la règle suivante 
SCORE : 113765


 L’instruction RelationLinks crée donc une association bidirectionnelle entre l’élément de relation interne et l’interface de l’activité ou le champ ElementName associé à une condition d’évolution ou une action 
SCORE : 113721


 Il s’agit d’un modèle générique et très abstrait car: les disques contenant les films sont modélisés par une variable partagée, les lignes de transmission et les interfaces nécessaires sont modélisées par des ports de communication 
SCORE : 113701


 Il s’agit donc d’exploiter le modèle fonctionnel complet et optimisé pour lequel la partie co-design du système qui vient d’être conçue est remplacée par le résultat de cette phase 2 
SCORE : 113690


 Cet analyseur syntaxique est obtenu par un générateur d’analyseur syntaxique à partir de la spécification de la grammaire (syntaxe d’entrée du texte source) et des règles de production 
SCORE : 113564


 Cet analyseur syntaxique est obtenu par un générateur d’analyseur syntaxique à partir de la spécification de la grammaire (syntaxe d’entrée du texte source) et des règles de production 
SCORE : 113564


1, (‘Concurrency définit le nombre de disques, ‘Use définit le temps d’accès pour la variable Séquences et donc celui des disques, ‘Capacity est la taille en nombre de messages de chaque port), Chapitre 7 212 M 
SCORE : 113148


 Sur la base de ce constat, l’équipe a donc décidé de développer une nouvelle plate-forme d’outils basée sur un couplage possible entre outils par fichiers 
SCORE : 113093


 Le mode interprété permet d’instancier des classes d’objets dont on ne connaît pas le nom (nom saisi par l’utilisateur par exemple) lors de la compilation en byte-code 
SCORE : 113016


 D’une manière générale, la spécification en entrée de l’activité de co-design se doit d’être le résultat d’une démarche d’un niveau supérieur qui est le niveau système 
SCORE : 112973


 - larelation de synchronisation (par événement) représente une relation de précédence d’exécution de deux fonctions: la fonction réceptrice ne peut s’exécuter que si l’événement d’activation a été émis 
SCORE : 112707


 La technique de co-simulation retenue pour l’évaluation des performances dynamiques des systèmes repose sur la transcription du modèle de performance en une description VHDL et l’utilisation d’un simulateur du commerce 
SCORE : 112567


 Lorsque l’émission du message est terminée, EmissionMess relache le jeton ReqEmis TokenOut OkToken Treq[1:n] Tcons[1:n] Lind Prod Cons Routing Dmux Lreq Prod[1:n] Cons[1:n] Lcons Token[i+1 mod K] TransBusOut TransBusIn EndEmis TB[1:K] Carte TB[1:K] TB[i] Token[1:K] Carte[i] Token[i] b) interconnexion des cartes a) solution fonctionnelle de chaque carte Management Token EmissionMess ReceptionMess Matériel ou Logiciel Logiciel 1 3 2 Carte[1:K] ‘Capacity=1 ‘Capacity=1 ‘Capacity=5 ‘Capacity=5 ‘Capacity=0 Matériel ou Logiciel Chapitre 7 228 M 
SCORE : 112534


 Le programme ci-dessous est la traduction de l’attente conditionnelle utilisée dans la description du comportement de la fonction SupervisonUsager de l’exemple du serveur vidéo présenté dans le chapitre 7 
SCORE : 112393


2 Structure de données pour une grammaire La figure suivante montre les règles de grammaire ci-dessus, mais cette fois représentées sous une forme graphique 
SCORE : 112296


 Le résultat issu de cette étape de co-design peut ensuite être prototypé, vérifié et validé puis intégré dans la solution d’ensemble du système complet 
SCORE : 112291


 En suivant la méthodologie MCSE, la spécification du matériel pour le système complet se fait en définissant le support d’exécution (ou architecture matérielle) et toutes ses propriétés 
SCORE : 112175


 La seconde approche consiste à partir du modèle source (modèle MCSE) et à utiliser un ensemble de règles de la forme "si <condition_modèle_source> alors <génération_modèle_final> 
SCORE : 112057


 - Les algorithmes utilisés dans Co-Saw [ADAMS-95] et dans SpecSyn [VAHID-95] sont basés sur la construction progressive de groupes de fonctions (clustering based algorithm) pouvant partager la même ressource matérielle ou logicielle 
SCORE : 112005


 Les attributs associés au port sont les paramètres génériques de l’entité (attributs statiques) et/ou font partie des entrées/sorties de l’entité (attributs dynamiques) 
SCORE : 111973


 A chaque étape de la réalisation, il y a lieu de vérifier si le comportement du circuit est conforme à celui qui a été prévu dans le développement (en particulier, aux simulations) 
SCORE : 111899


 Cet ordonnanceur est chargé de gérer les différentes tâches (fonctions) allouées au processeur en fonction de la politique d’ordonnancement choisie (attribut ‘Policy) et des priorités respectives de tâches (attribut ‘Priority) 
SCORE : 111829


 Pour cela, nous avons développé le concept de Script qui est un langage de description des manipulations à effectuer sur les structures de données Méthodologie de co-design et estimation des performances M 
SCORE : 111813


 Dans cet exemple, avant de commencer la conception architecturale, le concepteur doit en effet déterminer: - le nombre de disques utilisés pour stocker les séquences vidéo ou sonores 
SCORE : 111729


 Ce script sert de point d’entrée au générateur de générateurs de code ou méta-générateur nommé MetaGen qui permet d’interpréter le script ou de le transcrire en code JAVA 
SCORE : 111718


 Ce script sert de point d’entrée au générateur de générateurs de code ou méta-générateur nommé MetaGen qui permet d’interpréter le script ou de le transcrire en code JAVA 
SCORE : 111718


 Il modélise en parallèle un flot de données (axe fonctionnel) décrivant les transformations sur les données et un flot de contrôle décrivant les ressources utilisées (axe architectural) 
SCORE : 111679


 Le rôle de ce générateur de code est de transcrire la description textuelle du modèle de performance d’un système en un programme VHDL conformément aux règles de transcription décrites dans le chapitre 4 
SCORE : 111631


 Le problème de la transcription d’un achèvement forcé d’activités (symbol Exit) est à rapprocher de celui de la transcription des EI Arcs (Exit Immediatly) d’un SpecChart: Il faut avoir la possibilité de terminer l’exécution d’un process immédiatement 
SCORE : 111576


 - une modélisation du système à un niveau d’abstraction plus élevé que celui habituellement utilisé pour la co-simulation qui généralement nécessite une description détaillée de la solution 
SCORE : 111558


 -A- Constituant actif Une fonction, un processeur, un système, c'est-à-dire un constituant structurel actif peut se spécifier globalement par son comportement qui est alors macroscopique 
SCORE : 111486


 Il est bon de noter que pour cet aspect de la co-simulation, notre approche se distingue par une modélisation du système et de son environnement avec le modèle de performance de MCSE 
SCORE : 111461


 Délimitation des entrées sorties première décomposition fonctionnelle Fonctions Première approche fonctionnelle Raffinement Synthèse fonctionnel Raffinement Description algorithmique Document de conception fonctionnelle Structure fonctionnelle finale Document de spécifications ETUDES DE CAS 10 M 
SCORE : 111370


 Délimitation des entrées sorties première décomposition fonctionnelle Fonctions Première approche fonctionnelle Raffinement Synthèse fonctionnel Raffinement Description algorithmique Document de conception fonctionnelle Structure fonctionnelle finale Document de spécifications ETUDES DE CAS 10 M 
SCORE : 111370


 Faisant partie intégrante de l’étape de définition de la réalisation, le travail de co-design est appliqué sur une ou des parties qui ont été pleinement identifiées comme justifiant d’une telle approche 
SCORE : 111125


 Ainsi, il facilite la compréhension des dépendances d’activation entre tâches et la recherche des éventuels problèmes d’ordonnancement (non respect de contrainte de temps, interblocage, etc 
SCORE : 111065


 En effet, en remplaçant le temps des opérations élémentaires par une description algorithmique, on obtient alors un modèle interprété qui permet de faire une vérification fonctionnelle du système 
SCORE : 111033


 En effet, en remplaçant le temps des opérations élémentaires par une description algorithmique on obtient alors un modèle VHDL interprété qui permet de faire en plus une vérification fonctionnelle du système 
SCORE : 111033


 - Lorsque la structure est complète, le programme code est produit dans un fichier par la fonction Save qui exploite la XGrammarDs pour l’interprétation et sa table des symboles pour l’écriture des champs terminaux 
SCORE : 111000


 L’analyse des performances qui a été effectuée lors de l’étape de conception fonctionnelle ou conception préliminaire aide au dimensionnement des éléments internes du système 
SCORE : 110924


 ScriptName Constants OpName Script 0:n ConsValue ConstDef Const Name 0:n VarType VarDef Var Name Variables Operations 0:n OpDef OpName *Operations CompoundOp OpType Arg1 1:1 ElementaryOp Arg2 Arg3 Value Variable ou constante Index de champ Noeud de type connue par VarType Variables regroupées sous la forme d’un vecteur Gestion LIFO de chaque variable VarName Désignation par l’index dans le vecteur Le Méta-Générateur MetaGen M 
SCORE : 110908


 -C- Analyse d’un élément actif L’interface d’un composant comprend sa dimension (Range), les paramètres génériques (GenericParameters) et la définition des entrées et sorties du composant et le type de chacune 
SCORE : 110842


 GenerateExit Pas implanté pour l’instant UpdateGenerationOfComponentModel informations fournies: NbTask, ComponentRangeExpression Mise à jour du paramètre générique des composants de relation du niveau représentant le nombre d’accès du niveau à ce composant 
SCORE : 110816


 Beaucoup de travaux de co-synthèse concernent aussi la génération des interfaces matériel/logiciel [GUPTA-93] [YEN-95] [DAVEAU-95] [BORIELLO-96] [FISCHER-96] [MULLER-96] 
SCORE : 110809


 Le générateur d’analyseur syntaxique fournit un rapport de la syntaxe saisie très utile lors du développement du script (recherche de la syntaxe d’une règle) 
SCORE : 110664


2 Objectif de l’évaluation des performances pour cet exemple L’objectif du concepteur du système est de concevoir et implanter correctement une carte en tenant compte des contraintes de performances 
SCORE : 110636


 Deux solutions de monitoring sont envisageables: - une solution systématique qui se traduit par une instrumentation automatique du code VHDL pour observer toutes les transitions exploitables pour les performances, - une solution spécifique pour chaque modèle 
SCORE : 110568


 Il semble judicieux de laisser le choix à l’utilisateur entre une génération automatique de trace et l’utilisation d’une librairie de composants de monitoring mise à la disposition du concepteur 
SCORE : 110525


 La simulation du code généré produit un fichier de trace représentant l'évolution des fonctions et des relations inter-fonctions (mécanismes de communication et de synchronisation) 
SCORE : 110459


 Les spécifications internes, qui peuvent surprendre car faisant référence à des éléments de la conception, servent à fixer des contraintes d’utilisation de la structure ou d’un élément de celle-ci 
SCORE : 110411


 Pour des informations plus précises sur la démarche et pour mieux comprendre les études de cas décrites dans les chapitres suivants, le lecteur est invité à lire l’ouvrage: "Spécification et Conception des systèmes, une méthodologie MCSE" de l’auteur 
SCORE : 110395


 Pour des informations plus précises sur la démarche et pour mieux comprendre les études de cas décrites dans les chapitres suivants, le lecteur est invité à lire l’ouvrage: "Spécification et Conception des systèmes, une méthodologie MCSE" de l’auteur 
SCORE : 110395


 Les critères de performances retenus ici sont à la fois internes (taux d’occupation du processeur) et externes (débit sur le bus, temps de latence des messages) 
SCORE : 110348


 Le partitionnement s’effectue par des approches successives soit de manière automatique par le biais d’algorithmes de recherche soit de manière interactive avec l’aide du concepteur 
SCORE : 110305


 Le débit sur le bus est encore constant et un peu plus faible que précédemment car 20 s ont été rajoutées entre deux émissions successives de messages 
SCORE : 110277


 Pour éliminer les shift/reduce et reduce/ reduce conflits de notre grammaire VHDL, nous avons fait quelques petites transgressions des règles syntaxiques décrites dans le LRM 
SCORE : 110203


 Comme le taux d’occupation du processeur d’exécution est faible (25%), nous nous sommes intéressés à l’influence du nombre d’utilisateurs sur l’attribut ‘Power du processeur d’exécution 
SCORE : 110201


2 MOTIVATIONS DE L’EQUIPE La plupart des techniques de partitionnement automatique se limitent à une architecture matérielle constituée d’un microprocesseur, d’un ensemble de composants matériels programmables et éventuellement d’une mémoire commune 
SCORE : 110172


 L’attribut ‘Power est très utile pour modifier la vitesse d’exécution de toutes les tâches logicielles et d’étudier son influence sur les performances globales du système 
SCORE : 110107


 Ce mécanisme est également valable pour les générateurs engendrés par le métagénérateur pour lesquels plusieurs générations de code successives seront nécessaires pour parcourir le domaine des solutions possibles 
SCORE : 110097


 Le concepteur peut aisément explorer plusieurs alternatives de partitionnement du système en manipulant une hiérarchie d’automates à états finis concurrents représentée selon le formalisme SOLAR 
SCORE : 110021


2 Objectif de l’évaluation des performances pour cet exemple Cet exemple permet de montrer que le modèle de performance est approprié pour aider au dimensionnement et au partitionnement matériel/logiciel d’un système 
SCORE : 109999


 Il doit associer la vue structurelle pour représenter la décomposition ou l’organisation du système et la vue comportementale pour décrire les propriétés temporelles de chaque constituant 
SCORE : 109936


 Pour chaque exemple, après une présentation succincte de l’exemple et des objectifs de l’évaluation des performances, nous décrivons le modèle de performance du système et de son environnement 
SCORE : 109855


 En effet, avec ce modèle, la description d’une phase de conception ne peut pas être enrichie ou détaillée en remplaçant le modèle comportemental d’un composant par son raffinement structurel 
SCORE : 109843


 Lorsque la taille concerne un objet de transaction, l'attribut est associé au lien, sinon elle est associée à l'élément de relation et est dans ce cas utilisé par défaut 
SCORE : 109833


 L’emploi de VHDL a cependant permis d’expérimenter rapidement le modèle de performance sur des exemples alors que le simulateur C++ a demandé un temps de développement et de mise au point relativement long 
SCORE : 109801


 Les critères de performances retenus sont le taux d’occupation du processeur exécutant le logiciel de chaque carte, le débit sur le bus et le temps de latence des messages 
SCORE : 109798


 Ce principe a été implanté dans un outil qui constitue un générateur de générateurs de code ou méta-générateur exploitable pour tout type de générateur de code 
SCORE : 109768


2 Utilisation d’un lien de connexion bi-dimensionnel Si l’élément de relation est multiple et est relié à plusieurs producteurs/consommateurs alors le signal de connexion est un vecteur de vecteur 
SCORE : 109763


 Les règles de transcription ont été validées en autres sur l’exemple simplifié du serveur vidéo dont le modèle de performance a été présenté dans le chapitre 3 
SCORE : 109757


 Dans le troisième cas, comme les n producteurs peuvent accéder aux m éléments du vecteur de port, le signal assurant le protocole est un vecteur de vecteur 
SCORE : 109740


 Pour un générateur donné, le fichier source et un fichier template sont analysés, puis les opérations de manipulation des structures de données résultantes sont exécutées pour réaliser la transcription 
SCORE : 109736


 } Les informations mises à disposition de la règle de génération d’un élément actif sont: sa dimension, son nom et sa liste d’attributs 
SCORE : 109710


 Le couplage entre le simulateur et l’outil d’analyse de trace peut s’effectuer grâce à l’interface Foreign Language Interface (VHDL’93) et à un mécanisme de communication inter-outils 
SCORE : 109565


 Le système est alors décrit sous la forme d’une partie opérative et une partie contrôle dans lesquelles la vue fonctionnelle et la vue architecturale sont complètement amalgamées 
SCORE : 109514


 Un téléviseur est modélisé comme un récepteur attendant les blocs successifs sur sa ligne de réception modélisé par BlockOut[] séparés apr une attente égale à la période entre 2 blocs consécutifs 
SCORE : 109464


 Le comportement du système pour les fonctions de la structure fonctionnelle doit être explicité pour disposer d’une spécification exécutable (ce qui veut dire simulable pour la vérification) 
SCORE : 109447


 Actuellement, il n’existe pas de méthodes formelles réellement opérationnelles qui permettent à partir des contraintes à satisfaire et des spécifications du système de générer directement une répartition matériel/logiciel 
SCORE : 109393


 Il s’agit souvent du langage C avec lequel a été également écrit le noyau du simulateur VHDL auquel on accède via un ensemble de primitives spécifiques 
SCORE : 109305


5 Achèvement forcé d’activités L’achèvement forcé d’une activité ou opération permet de modéliser certaines circonstances particulières telles que des durées maximale d’exécution, l’apparition d’exceptions, etc 
SCORE : 109275


 Lorsque certaines propriétés de l’entité n’ont pas à être exploitées, particulièrement l’intérêt de plusieurs modèles, il est possible d’utiliser une notion relativement proche: le block 
SCORE : 109223


 L’utilisation d’un block à la place d’un entité offre plusieurs avantages: - un block est instanciable directement, ce qui en contre partie ne permet pas la réplication (pas de déclaration de composant) 
SCORE : 109219


 Ceci implique du point de vue implantation qu’il faut utiliser des listes intermédiaires et non pas directement les ensembles de la structure de données source 
SCORE : 109140


 La transformation des règles textuelles d’une grammaire donne une structure de données appelée GrammarDs conforme à la notation MetaDs construite sur la base des règles qui viennent d’être définies 
SCORE : 109130


 Elle possède alors une réelle qualité quant à la forme et au fond puisqu'elle relate, en plus de la solution, la démarche suivie et l'argumentation qui justifie les décisions importantes 
SCORE : 109114


 Elle possède alors une réelle qualité quant à la forme et au fond puisqu'elle relate, en plus de la solution, la démarche suivie et l'argumentation qui justifie les décisions importantes 
SCORE : 109114


 Le programme Grammar-Parser doit disposer en entrée: - de la grammaire du modèle MCSE qui est le texte parsé, - intégrées à cette grammaire, les règles de production de la MCSEGrammarDs, de la table des symboles de la grammaire et du code source de MCSE-Parser 
SCORE : 109068


 Dans ces cas, la complexité de la solution d’implantation en VHDL retenue se paie malheureusement au niveau de la génération de code et de la lisibilité et l’efficacité du code VHDL produit 
SCORE : 109053


 Dans le deuxième cas, comme n producteurs ou consommateurs peuvent accéder au même port, le signal assurant le protocole est un vecteur non contraint 
SCORE : 109046


 Avec cet outil, un générateur particulier s’obtient par l’écriture d’un script qui définit les manipulations à effectuer sur les structures de données pour mener à bien la transcription 
SCORE : 109036


 Alors un retour (feedback) doit exister entre le port et le producteur pour indiquer que le port a satisfait la requête de l’utilisateur et que la demande d’accès peut être inhibée 
SCORE : 109004


 Les constructions telles que l’attente conditionnelle, l’achèvement forcé d’activité et certains cas de l’instanciation multiple ont posé des difficultés de transcription 
SCORE : 108892


 Or, toute structure de données peut être engendrée d’une manière automatique par un analyseur syntaxique enrichi des règles de production de la structure de données 
SCORE : 108874


 Les spécifications de la partie relevant du co-design résultent de l’approche système qui consiste en la spécification, la conception fonctionnelle et le partitionnement au niveau système 
SCORE : 108822


 } Lorsqu’il n’y a pas de paramètres génériques, il faut détruire si nécessaire la construction correspondante dans la structure de données cible (clause générique d’une entité VHDL par exemple) 
SCORE : 108775


 Dans ce cas, chaque fonction est implantée comme une tâche et les relations entre fonctions utilisent les mécanismes de sémaphore, de boite à lettre, de partage de ressources 
SCORE : 108628


 Une autre solution consistait à définir tous les types séparément et à déclarer autant de primitives d’accès aux éléments de relation (surcharge de procédures) 
SCORE : 108567


 Puis, la production de la structure de sortie consiste à parcourir la structure de données du modèle source, copier des parties de la structure du template puis les mettre à jour 
SCORE : 108547


 Ainsi, la production de la structure de sortie consiste à parcourir la structure de données du modèle source, copier des parties de la structure du template puis les mettre à jour 
SCORE : 108547


 Cette fonction simule une ressource ayant un degré de concurrence de 1, ce qui signifie qu’une seule fonction peut être active à un moment donné 
SCORE : 108507


 Le connaître, c'est dans un premier temps modéliser les objets, et dans un second temps, expliciter les relations entre eux sous la forme d'une description fonctionnelle 
SCORE : 108474


 Le connaître, c'est dans un premier temps modéliser les objets, et dans un second temps, expliciter les relations entre eux sous la forme d'une description fonctionnelle 
SCORE : 108474


 A l’époque où les possibilités d’implantation matérielle et logicielle étaient limitées, l’expérience seule des concepteurs pouvait suffire à les guider vers une solution proche de l’optimum 
SCORE : 108430


 -A- Enrichissement de l’estimation des propriétés des systèmes Notre technique d’estimation des propriétés d’un système par co-simulation s’applique efficacement aux performances dynamiques du système 
SCORE : 108411


 Les temps de simulation relativement importants même pour un modèle macroscopique et non interprété ne permettent pas de parcourir très rapidement l’espace des solutions possibles 
SCORE : 108367


6 Configuration d’un script -A- Configuration L’interprétation du script et sa transcription en code Java peuvent être pilotées en fonction de paramètres contenus dans un fichier de configuration situé dans le répertoire du projet 
SCORE : 108328


 En effet par définition, une arborescence est un arbre dans lequel on particularise un sommet appelé la racine, ici le sommet McseDs, et à partir duquel sont placés les autres sommets par niveaux successifs 
SCORE : 108304


 La description du comportement est décrite sous une forme graphique représentant le déroulement temporel selon l’axe vertical ceci pour faciliter la compréhension 
SCORE : 108220


 En effet, la taille des vecteurs sera généralement définie avec un paramètre générique permettant de modifier facilement la dimension et la topologie du système 
SCORE : 108206


 Un attribut particulier ‘Débit a été ajouté pour définir le débit de transmission pour la séquence correspondante, ainsi qu’un attribut ‘Canal pour définir le canal à utiliser 
SCORE : 108189


 Pour les variations ponctuelles de vitesse d’écriture sur les disques dues à la concurrence d’accès et à la variation du temps d’accès, il est nécessaire de considérer une fifo entre les messages de SéquencesIn[] et les écritures dans Séquences 
SCORE : 108118


 Si la spécification de la grammaire est enrichie de règles de production, alors elle peut engendrer la structure de données interne image du texte analysé 
SCORE : 108091


 De plus, un modèle de comportement peut se remplacer par un modèle de structure lors d’une opération de raffinement et réciproquement un modèle de structure peut se remplacer par un modèle de comportement lors d’une opération d’abstraction 
SCORE : 108086


 Les propriétés retenues sont généralement des contraintes de coût et de performances statiques (taille, puissance consommée) ou dynamiques (temps de réponse, charge du processeur) 
SCORE : 108074


 Le principe de génération de code développé permet de transcrire facilement le modèle MCSE (ou tout autre langage source) vers d’autres langages cibles 
SCORE : 107926


 La présentation de la nouvelle philosophie de développement de la plate-forme MCSE montre qu’elle repose sur les concepts d’analyseurs syntaxiques et de méta-structure 
SCORE : 107921


 La partie supérieure (au dessus du pointillé) montre un exemple de structure fonctionnelle représentant la décomposition de la fonction F en les fonctions F1 et F2[1:m] et la relation par V[1:m] 
SCORE : 107909


2 Les classes de systèmes concernées par le co-design Le développement des systèmes électroniques composés d’une partie matérielle et d’une partie logicielle n’est pas un problème nouveau 
SCORE : 107777


 -A- La méthodologie de co-design préconisée Pour répondre à l’objectif initial, nous avons défini une nouvelle méthodologie de codesign basée sur la méthodologie MCSE 
SCORE : 107756


 Nous avons utilisé une fifo où l’on mémorise par ordre croissant la date de la prochaine décrémentation de NbUse et le process est asservi sur une modification des protocoles des liens sur la variable et sur la prochaine décrémentation de NbUse 
SCORE : 107727


 Mais l’utilisation d’un tel cycle de développement pour les systèmes électroniques embarqués s’est révélé très pénalisante et inadaptée pour répondre à des contraintes de qualité, de coûts et délais de plus en plus sévères 
SCORE : 107696


 Parfois le demandeur peut imposer une partie de la solution, non pas parce qu’elle est la meilleure, mais parce qu’elle lui convient  
SCORE : 107671


 Définition de la réalisation La troisième étape consiste à rechercher, d'une part le support exécutif, d'autre part la manière d'y implanter les fonctions réalisées par logiciel 
SCORE : 107643


 Définition de la réalisation La troisième étape consiste à rechercher, d'une part le support exécutif, d'autre part la manière d'y implanter les fonctions réalisées par logiciel 
SCORE : 107643


 Le travail effectué sur la génération de code a aussi amené l’équipe MCSE à revoir sa stratégie de développement des outils comme support pour la méthodologie MCSE 
SCORE : 107625


 Le travail effectué sur la génération de code a aussi amené l’équipe MCSE à revoir sa stratégie de développement des outils comme support pour la méthodologie MCSE 
SCORE : 107625


 Lorsque l’on transcrit une feuille, on dispose forcément de toutes les informations nécessaires car celles-ci ont été collectées durant le parcours d’accès à cette feuille 
SCORE : 107608


 Il s’agit d’un modèle: - macroscopique: le système n’a pas besoin d’être entièrement détaillé ce qui autorise à faire une évaluation des performances très tôt dans le cycle de développement 
SCORE : 107576


E 37 Une approche de modélisation, d’évaluation des performances et de co-synthèse des systèmes matériel/logiciel basée sur l’utilisation des réseaux de Petri étendu (ETPN) est présentée dans [STOY-94] 
SCORE : 107457


 Si le modèle final ne permet pas de garder la hiérarchie du modèle source, l’algorithme de parcours le plus efficace pour la fonction analyse du générateur est le parcours ascendant (bottom-up) 
SCORE : 107412


 -A- Les différents types d’algorithme de parcours d’une structure MCSE Il y a deux catégories de parcours pour les arborescences: le parcours en largeur d’abord abrégé BFS (Breath First Search) et le parcours en profondeur d’abord abrégé DFS (Depth First Search) 
SCORE : 107276


 Pour le dernier cas, la fonction de sélection du destinataire est implantée très simplement par un argument de plus dans l’appel de Send et qui indique l’indice du port concerné (ici CmdUser 
SCORE : 107190


 Il faut noter que pour un block la partie Generic Map et Port Map est optionnelle et purement déclarative: un oubli d’une entrée/sortie ou d’un paramètre générique n’entraînera pas forcément d’erreur de compilation (passage par effet de bord) 
SCORE : 107185


 Pour étudier l’influence d’un ou plusieurs paramètres, ceux-ci sont utilisés dans l’expression de calcul de l’attribut et déclaré comme paramètre générique pour le composant 
SCORE : 107025


 Comme tous les outils de la plateforme MCSE ToolBox, un générateur de code repose sur une architecture générique comportant une fonction de chargement, de modification et de sauvegarde de structure de données 
SCORE : 106989


 Le signal nbactivetasksprocessorexecution avant dernier chronogramme réprésente le nombre de tâches actives sur le processeur d’exécution et sert également pour calculer le taux d’occupation du processeur 
SCORE : 106976


 Ce parcours de l’espace des solutions possibles peut être automatique ou interactif et repose toujours sur une estimation des propriétés résultantes du partitionnement choisi 
SCORE : 106709


 Ces techniques de partitionnement automatique ne sont donc intéressantes que pour le prototypage rapide [WENDLING-94] sur une carte constituée d’un microprocesseur, d’un ensemble de FPGA et éventuellement une mémoire commune 
SCORE : 106575


3 0 5 10 15 20 25 30 "CPU Utilization Rate" 0 1e+07 2e+07 3e+07 4e+07 5e+07 6e+07 7e+07 8e+07 0 5 10 15 20 25 30 "CurrentThroughput" 0 
SCORE : 106556


 Le développement de ces parties se distingue des approches système par la nécessité d’une interaction forte entre les développements de la partie logicielle et de la partie matérielle 
SCORE : 106527


3, le modèle de performance est surtout graphique et basé sur deux vues complémentaires: la vue structurelle (dimension organisationnelle) et la vue comportementale (dimension temporelle) 
SCORE : 106493


1 LA TECHNOLOGIE META-CASE De 1993 à 1996, le développement de la plate-forme MCSE a reposé sur l’utilisation d’un méta-outil orienté éditeur de graphes (GRAPHTALK) et d’un méta-outil orienté éditeur syntaxique (LEdit) 
SCORE : 106479


E (événement EndEmis) qui est envoyé par la fonction TokenManagement à la carte voisine (événement Token[i+1MOD k]) La fonction ReceptionMess reçoit chaque message addressé à la carte et l’envoie à la fonction Dmux via le port Lind 
SCORE : 106445


 Pour les spécifications d’entrée d’un partitionnement, trois niveaux de granularité du partitionnement sont habituellement utilisés: le niveau tâche, le niveau procédure et le niveau instruction 
SCORE : 106425


 L’analyse des graphes [WOLF-94] [GUPTA-96] permet d’extraire une approximation du temps d’exécution de chaque fonction et de vérifier le respect des contraintes temporelles 
SCORE : 106400


 La génération se passe en deux phases: une phase de déclaration lors du parcours descendant et une phase de mise à jour lors du parcours remontant 
SCORE : 106335


 Un des points caractéristiques de cet outil est son efficacité de gestion de la traçabilité d’une exigence des spécifications jusqu’aux tests d’implantation [PENCOLE-96] 
SCORE : 106317


 La phase 1 amène ainsi à déformer la solution fonctionnelle de l’étape précédente au sens de son enrichissement par des détails en vue de satisfaire des contraintes d’ordre technologique 
SCORE : 106203


 L’unicité du modèle de description facilite la transition entre les phases de conception, diminue les risques d’erreur liés à une transcription de modèle (pas de déformation ou perte d’information) et améliore la traçabilité 
SCORE : 106202


 Lorsque l’élément de composition de conditions ne comporte qu’un vecteur d’entrée, la plupart des générateurs de code traduiront cette construction sous une forme particulière 
SCORE : 106193


E 141 structure doit pouvoir se modifier par un éditeur syntaxique par exemple, les alternatives possibles sont connues par l’analyse du noeud de la GrammarDs qui indique les possibilités par le Set 1:1 
SCORE : 106188


 La fiche jointe sur la page suivante a été établie comme guide simplifiée utilisable dans le cas d’un projet qui peut se développer d’une manière linéaire 
SCORE : 106151


 La fiche jointe sur la page suivante a été établie comme guide simplifiée utilisable dans le cas d’un projet qui peut se développer d’une manière linéaire 
SCORE : 106151


 Pour avoir un générateur facilement reconfigurable, nous avons décidé de décrire les opérations de manipulation de structures de données dans un langage interprété nommé Script 
SCORE : 106000


 En particulier les programmes générés doivent être simples, lisibles, compréhensibles car leurs mises au point nécessitent généralement une interprétation et compréhension détaillée par le concepteur 
SCORE : 105944


 On doit alors trouver dans Texte2 la même description que Texte1 mais avec en plus un formatage qui peut être meilleur si Texte1 ne respectait pas les règles de présentation 
SCORE : 105886


 Durant l’étape de spécification, elle est utile pour vérifier et valider les spécifications avec le client puis faire une rapide étude de faisabilité du projet 
SCORE : 105875


 Comme le modèle de performance représente à la fois la partie logicielle et la partie matérielle résultant du partitionnement, il s’agit en fait d’une technique de co-simulation 
SCORE : 105872


 Ainsi, les activités d’une fonction considérée jusqu’à présent indivisible, pourraient être allouées sur plusieurs processeurs ou réalisées par un même processeur matériel à des instants différents 
SCORE : 105840


 A ce stade, il est également important de bien définir la charge imposée au système et les critères de performances retenus pour décider laquelle des implantations est la meilleure 
SCORE : 105828


 •Convient aussi pour traduire un comportement stimuli/réponse (protocole de communication) •C’est une vue temporelle, elle ne correspond donc pas à un circuit proprement dit 
SCORE : 105813


12 LA TECHNOLOGIE JAVA Le changement de philosophie de conception des outils MCSE a offert l’opportunité d’utiliser pour l’implantation des outils, le dernier né des langages orienté objet, c’est à dire le langage Java 
SCORE : 105808


 Trois modèles, chacun exprimant un point de vue, sont usuels : le modèle structurel, le modèle comportemental, et le modèle donnée ou objet, - l’axe d’interprétation, qui représente le niveau de détail du modèle 
SCORE : 105622


 On se limitera dans ce document uniquement à la génération de code, ce qui signifie que l’outil de génération à développer n’est pas capable de choisir une solution d’implantation de lui-même 
SCORE : 105552


 C’est autour de cette grandeur qui modélise l’ensemble des disques du système que la solution fonctionnelle a ensuite été organisée lors de l’étape de conception fonctionnelle 
SCORE : 105389


 Pour la compréhension de la technique employée par un générateur d’analyseur syntaxique, nous commençons par présenter quelques règles de grammaire pour un exemple très simple 
SCORE : 105371


 Une fois transcrit en code Java par le méta-générateur, le script a été associé à une interface utilisateur et a été intégré au "framework" de la plate-forme "MCSE ToolBox" 
SCORE : 105307


 Pour l’évaluation du modèle de performance, plusieurs approches ont été envisagées: une évaluation analytique, le développement d’un simulateur spécifique et la transcription du modèle en un langage simulable 
SCORE : 105168


) utiles pour la conception architecturale, - durant la phase de conception architecturale: aide au partitionnement logiciel/matériel (co-simulation non-interprétée) 
SCORE : 105057


 Nous citons ci-dessous pour chaque étape, quelques-unes des difficultés que tout utilisateur de la méthodologie risque de rencontrer et le point de vue à adopter 
SCORE : 104846


 Nous citons ci-dessous pour chaque étape, quelques-unes des difficultés que tout utilisateur de la méthodologie risque de rencontrer et le point de vue à adopter 
SCORE : 104846


E Il est aisé de comprendre que, par exemple, la création de chaque port ou chaque fonction va nécessiter la copie des lignes de VHDL du template pour chaque élément 
SCORE : 104800


 Comme il autorise également le lancement de différents process (programme C, simulateur spécifique), Java est donc très intéressant pour faire de la co-simulation hétérogène 
SCORE : 104775


 Il s’agit d’une valeur moyenne obtenue en considérant un débit moyen de 7,5 Mbits/s par utilisateur, et il ne faut pas oublier que pour des séquences de haut débit la valeur de A est supérieur à 4 (5 à 7) 
SCORE : 104741


 L’utilisation des possibilités de "debugging" et d’analyse du simulateur Définition des attributs Modèle système Saisie Règles de transcription Transcription en VHDL Paramètres, workload Simulation en VHDL Interprétation des résultats Programme VHDL simulable Modèle graphique Méthode en développement graphique du modèle Transcription du modèle de performance en VHDL M 
SCORE : 104726


 En remplaçant ensuite, les opérations élémentaires par du code interprété, le concepteur peut également faire une vérification fonctionnelle de sa solution 
SCORE : 104681


 La recherche de la structure fonctionnelle se fait tout d'abord à partir de la délimitation du système avec ses entrées et ses sorties 
SCORE : 104638


 La recherche de la structure fonctionnelle se fait tout d'abord à partir de la délimitation du système avec ses entrées et ses sorties 
SCORE : 104638


E Les spécifications externes correspondent à une appréciation externe du comportement du système considéré comme une "boite noire", basée sur l’évolution temporelle ou fréquentielle des entrées et des sorties 
SCORE : 104609


 L’interface entre l’API du simulateur VHDL et l’environnement de programmation C (compilateur, debuggeur, etc) utilise des mécanismes de communication inter-process (IPC d’unix) [THOMAS-93] [VALDER 
SCORE : 104583


 L’exécution du script est alors le résultat d’un automate de parcours de la structure de données du script et d’exécution des opérations élémentaires qu’il spécifie 
SCORE : 104520


 Cette approche évite de passer des stimuli au simulateur et permet surtout de modéliser plus facilement les comportements éventuellement complexes des entités de l’environnement du système 
SCORE : 104390


 La transcription systématique consiste à considérer que le modèle active 2 ou plus de 2 process sur la divergence ET et se met en attente d’achèvement de tous ces process pour assurer la convergence ET 
SCORE : 104349


 Interprétation interprété non-interprété Abstrait Concret Spécification niveau fonctionnel niveau architectural niveau physique Niveaux de description Comportement Structure Donnée/Objet Représentation 1 2 Méthodologie de co-design et estimation des performances M 
SCORE : 104295


 Des attributs ont aussi été associés aux éléments de la dimension structurelle (vues fonctionnelle et exécutive) et de la dimension comportementale 
SCORE : 104272


 Ses attributs associés sont les paramètres génériques de l’entité (attributs statiques) et/ou font partie des entrées/sorties de l’entité (attributs dynamiques) 
SCORE : 104248


 Après avoir reçu l’acquittement, la branche de gauche signale (signalisation ready) à la branche de droite qu’elle peut envoyer une nouvelle requête 
SCORE : 104245


 SES/workbench est orienté flot de transactions: le concepteur décrit explicitement le chemin suivi par chaque transaction et les ressources qu’elle utilise 
SCORE : 104177


 Le symbole Simultanéité (^) représente une génération commune qui ne s'achève que lorsque toutes les générations ont été faites en tenant compte des temps d’écriture 
SCORE : 104140


 Le concepteur doit disposer pour chaque étape d'un guide précis lui expliquant COMMENT passer de la spécification en entrée à une solution possédant des qualités 
SCORE : 104103


 Le concepteur doit disposer pour chaque étape d'un guide précis lui expliquant COMMENT passer de la spécification en entrée à une solution possédant des qualités 
SCORE : 104103


 Une ressource active est caractérisée par sa puissance qui intervient comme un facteur multiplicatif de la durée de traitement d’une opération et son degré de concurrence 
SCORE : 104028


 En effet, si un composant contient un autre composant, on doit retrouver la structure de données de cet autre composant (différence Le Méta-Générateur MetaGen M 
SCORE : 103940


 Le fonctionnement possible pour un générateur piloté par un script est alors le suivant: - Il commence par lire le fichier texte McseModel de manière à construire la structure interne McseDs 
SCORE : 103899


16 représente un cas où le signal reliant le composant gérant l’élément de relation et les blocks représentant les fonctions est obligatoirement un vecteur 
SCORE : 103844


 Cette machine virtuelle peut se décrire à différents niveaux: système d’exploitation multi-tâches, jeu d’instructions, architecture physique [KUMAR-96] 
SCORE : 103823


 Ce concept de couleur caractérise le modèle comme étant non interprété et est proche du concept d’attribut associé aux échanges d’information de notre modèle MCSE 
SCORE : 103635


 Réalisation matérielle et réalisation du logiciel peuvent se développer simultanément, ce qui permet de réduire le temps de la réalisation et de faire intervenir conjointement des spécialistes des 2 domaines 
SCORE : 103598


 Réalisation matérielle et réalisation du logiciel peuvent se développer simultanément, ce qui permet de réduire le temps de la réalisation et de faire intervenir conjointement des spécialistes des 2 domaines 
SCORE : 103598


 Sinon la structure de données ne sert à rien, car il aurait mieux valu faire une transcription directe au niveau de la règle de production de l’analyseur syntaxique 
SCORE : 103584


 Enfin, il ne facilite pas la compréhension des dépendances d’activation entre tâches et la recherche des éventuels problèmes d’ordonnancement (non respect de contrainte de temps, interblocage) -Figure 2 
SCORE : 103503


 Romdhani [ROMDHANI-96] propose une méthode de partitionnement matériel/logiciel où l’évaluation des performances dynamiques du système est effectuée avec l’outil SES/Workbench 
SCORE : 103490


3 Démarche pour le co-design Le travail de co-design s’intègre ici comme un sous-ensemble de l’étape 3 de définition de la réalisation de la méthodologie MCSE 
SCORE : 103431


 Dans ce cas, l’activité Activity1 est déclarée comme un modèle d’activité nommé Activity1Model dans la liste ActivityUnitList (partie en pointillé des figures) et comme une instance de ce modèle au niveau du comportement de l’activité Proc 
SCORE : 103409


 Connaissant la grammaire, on peut alors disposer d’un analyseur syntaxique capable d’analyser un texte modèle et de produire la structure de données interne équivalente 
SCORE : 103385


14 CONCLUSION Ce chapitre a décrit la stratégie adoptée pour disposer d’un outil général permettant une conception aisée et efficace de tout générateur de code 
SCORE : 103234


 Les fonctions du système ne doivent être que des fonctions de l'application, qu'il ne faut surtout pas confondre avec les fonctions internes du système 
SCORE : 103220


 Les fonctions du système ne doivent être que des fonctions de l'application, qu'il ne faut surtout pas confondre avec les fonctions internes du système 
SCORE : 103220


1 Résultats de simulation du modèle fonctionnel La première simulation consiste à vérifier le bon déroulement temporel de l’application sans considérer l’effet du processeur P 
SCORE : 103196


 Comme la généricité de définition d’un type est limitée, l’instanciation multiple et le respect de la hiérarchie du modèle source nous amènent à considérer trois cas de problèmes 
SCORE : 103188


 Pour des projets plus conséquents, une telle fiche peut aussi servir mais en limitant son rôle à chaque sous-ensemble à développer 
SCORE : 103165


 Pour des projets plus conséquents, une telle fiche peut aussi servir mais en limitant son rôle à chaque sous-ensemble à développer 
SCORE : 103165


 Ce type de parcours est possible pour une analyse du modèle MCSE si la génération des éléments d’un niveau ne nécessite pas d’informations provenant de l’analyse de niveaux inférieurs 
SCORE : 103032


 -C- Analyse d’une condition d’évolution Une condition d’évolution s’élabore à partir des entrées de l’activité ou de la fonction et des éléments de relation internes à la description comportementale 
SCORE : 103014


 Indiquons par exemple la possibilité de limiter le degré de parallélisme des opérations internes et dans ce cas, il faut alors définir la politique d’ordonnancement des opérations 
SCORE : 102996


 Avec MCSE, l’alternative logiciel/matériel se détermine par le temps d’exécution approximatif de chaque fonction et sa fréquence maximale d’activation (hypothèse de tâches périodiques) 
SCORE : 102986


 Pour l’analyse des performances, une fonction est considérée comme une ressource d’exécution servant de support pour les activités et opérations qu’elle inclut 
SCORE : 102972


 L’algorithme de parcours du modèle comportemental ainsi obtenu comporte une récursivité indirecte et se compose de l’ensemble des règles suivantes: SeqActivity 1:n ActivitySequence Activity SeqActivityList ActivityDef 1:1 AlternativeActivity "&" Activity ParActivity 1:n ConcurrentActivity Activity ParActivityList " 
SCORE : 102972


 La GrammarDs est utilisée par un analyseur syntaxique aussi appelé parser pour analyser et construire la structure de données de chaque solution appelée ici XDs 
SCORE : 102962


 Tout d'abord pour la modélisation de l'environnement, il faut décider du modèle le plus approprié pour cet environnement, à la fois sa nature et son niveau de détail 
SCORE : 102902


 Tout d'abord pour la modélisation de l'environnement, il faut décider du modèle le plus approprié pour cet environnement, à la fois sa nature et son niveau de détail 
SCORE : 102902


 Nous avons également fait varier le nombre de cartes (paramètre générique k) et le nombre de producteurs et consommateurs par carte (paramètre générique n) 
SCORE : 102736


 Evidemment, si une activité est désactivée et que l’on continue l’exécution de son code même en temps nul, il ne faut pas exécuter des actions sur les éléments de relations 
SCORE : 102643


 En prenant du recul par rapport à cette figure, nous avons pu trouver un principe général applicable pour tous les générateurs de code ou même de texte 
SCORE : 102614


 Mais toutes les actions du StateChart sont considérées exécutées en temps nul (hypothèse synchrone), ce qui implique A1 A2 A3 A5 A4 V1 V2 E2 E1 M1 P1 P3 P2 P4 M1 S1 M2 M1 N1 Signification des symboles VARIABLE PARTAGEE EVENEMENT ACTION PORT MEMOIRE SIGNAL PROCESSEUR NOEUD DE COMMUNICATION Structure fonctionnelle Structure d’exécution A2 A4 A1 et A5 A3 Composante fonctionnelle Composante exécutive CONFIGURATION Composante comportementale OP0 OP0 OP0 Chapitre 3 58 M 
SCORE : 102603


 Il ne s'agit pas ici d'une entrée ou d'une sortie de donnée pour le couplage comme pour le modèle structurel mais de l'indication de début d’évolution et de fin d'évolution 
SCORE : 102530


8 Bilan sur la transcription du modèle comportemental La transcription d’un modèle de comportement séquentiel (utilisation d’un process VHDL) et les constructions telles que l’alternative et la répétition n’ont pas posé de difficulté 
SCORE : 102525


 Dans le modèle de comportement que nous avons retenu, nous avons éliminer le caractère statique d’une activité d’un diagramme d’activité ou d’un flot de données 
SCORE : 102509


E 125 et les producteurs de messages Enregistrement et Lecture indique que tous les éléments du vecteur de fonction Enregistrement (respectivement Lecture) peuvent accéder à chaque élément du vecteur de port DemD 
SCORE : 102464


16-c) blocs sur disques puis assure la transmission des blocs un par un vers le téléviseur correspondant tout en poursuivant la lecture des blocs suivants 
SCORE : 102462


 -B- Solution spécifique Avec l’utilisation d’un simulateur VHDL, les possibilités d’observation sont de 2 types: - l’observation sous forme de chronogrammes: il s’agit de suivre l’état d’un signal du type State 
SCORE : 102444


 Par exemple, il n’est pas possible de déclarer un type non contraint d’un type non-contraint ou de déclarer un type non contraint dans un record 
SCORE : 102382


 L’exemple considéré ici est un système simplifié de communication permettant le transfert de messages entre des producteurs Prod[1:m] et des consommateurs Cons[1:n] 
SCORE : 102355


 Pour simuler une séquence, elle reçoit un nombre de fragments égal à l’attribut ‘Size défini dans le message de commande en provenance de CmdCanalEnr[] et qui provient de la demande de l’usager 
SCORE : 102275


 Jugé beaucoup trop restrictif pour l’évaluation des performances dynamiques d’un système, le modèle de comportement des fonctions a été modifié pour devenir un modèle de composition d’activités dynamiques 
SCORE : 102247


 La difficulté repose sur les phases numérotées 3 et 4 pour lesquelles il faut traduire les règles de transcription décrites en langage naturel en un ensemble de règles de script 
SCORE : 102197


 La fonction Routing reçoit les messages de tous les ports Treq[1:n] et simule le routage d’une partie de ces messages vers le port Lcons (messages locaux) 
SCORE : 102176


 Aussi, il apparaît intéressant et opportun d’enrichir le modèle de performance avec des concepts dédiés à l’analyse de la sûreté de fonctionnement et de la tolérance aux fautes d’un système 
SCORE : 102101


 Il est nécessaire de faire la distinction entre : •une fonction temporaire : elle s’active à l’arrivée d’un événement, à la manière d'une fonction séquencielle (machine d'états) 
SCORE : 101989


 D'une manière générale, l'observation des propriétés d'un système peut résulter de 3 techniques différentes: - l'évaluation analytique (ou mathématique), - la simulation, - l'observation et la mesure 
SCORE : 101948


 Les deux techniques sont simultanément envisagées par l’équipe: emploi du langage VHDL et un simulateur, emploi du langage C++ et exécution du programme dans un environnement multi-tâches 
SCORE : 101929


E 31 désempile les unités concernées et empile le symbole (ou unité) correspondant à la règle réduite (on parle de réduction car le nombre d’éléments stockés dans la pile a diminué) 
SCORE : 101891


 A est maintenant calculé par la loi empirique suivante: 0 1 2 3 4 5 6 7 8 0 5 10 15 20 25 30 "NbFragRead6" Temps (s) Nombre de Fragments 14,89 Mbits/s 0,4 Mbits/s A = E(3 × NbUtilisateurs ⁄ Nbdisques × DebitSequence × TaccDiskMoy ⁄ TailleFragment + 1, 5 ) Validation de la méthode par des études de cas M 
SCORE : 101872


 Le parcours du modèle MCSE se décompose donc en deux étapes: un parcours du modèle structurel et pour chaque fonction non raffinée un parcours de son modèle de comportement 
SCORE : 101867


 Ainsi, cette notation est différente de celle utilisée pour un diagramme d'états (b): l’état A1 est quitté dès la présence de E, l’état A1 ne peut pas être quitté sans E 
SCORE : 101841


 Ainsi par performance d’un système, nous entendons ici des performances globales telles que la capacité de traitement, le taux d’utilisation de ressources, le rendement, etc 
SCORE : 101832


 Un élément de relation interne peut en effet être relié à une interface d’instance d’une activité ou directement sur une condition d’évolution ou une action 
SCORE : 101800


 Cette méthodologie de co-design concerne principalement la conception des systèmes de contrôle/commande, des systèmes de communications et partiellement des systèmes de traitement 
SCORE : 101790


E des symboles sont des classes d’objets fixes (statiques) pour une grammaire donnée intégrées au programme MCSE-Parser lors de sa compilation pour disposer d’une version exécutable 
SCORE : 101787


 Pour ces cas, la complexité de la solution d’implantation en VHDL se paie malheureusement au niveau de la génération de code et de la lisibilité et de l’efficacité du code VHDL produit 
SCORE : 101785


 Contrairement aux approches analytiques, la simulation n’est pas limitée par la complexité du système et elle permet d’obtenir un ensemble d’estimations de performances plus important 
SCORE : 101785


 Le point important concerne l’accès aux éléments (variables, champs) comme opérandes qui doit être le plus direct possible 
SCORE : 101772


 A noter qu’un argument peut se définir comme un noeud opération qui est alors le résultat de cette opération (donc une variable implicite) 
SCORE : 101703


E Au niveau des primitives d’accès, chaque producteur doit alors donner son identité et l’indice du port destinataire du message 
SCORE : 101680


 -A- Définition d’une règle composite Une règle de transformation ou de construction se définit comme une suite de règles plus élémentaires ou d’opérations telles que celles décrites auparavant 
SCORE : 101670


 Il faut bien comprendre que le programme MCSE-Parser contient, en plus des tables de reconnaissance du texte, les procédures ou méthodes appropriées de production des noeuds de la structure de données McseDs 
SCORE : 101570


 Ce schéma permet ensuite la réalisation directe par assemblage ou la réalisation de carte(s) imprimée(s) comme support(s) des composants ou même la réalisation d’un "System on a chip" 
SCORE : 101556


 La priorité d’exécution de ReadMovie dans le cas d’un processeur restreignant le degré de concurrence est définie en rapport avec la vitesse de transmisssion défini par l’attribut ‘Speed reçu 
SCORE : 101514


 Pour faciliter la génération du modèle VHDL et sa lisibilité, nous avons décidé de regrouper tous les types d’éléments de relation dans un seul record 
SCORE : 101488


E Travailler uniquement par variables globales offre un avantage du point de vue efficacité du code, mais se paie évidemment par une plus mauvaise lisibilité du code 
SCORE : 101353


 Vis-à-vis de l’usager, une séquence respecte un débit pouvant varier entre 0 et 15 Mbits/s et est décomposée temporellement en unités plus élémentaires appelées fragments 
SCORE : 101261


) et la définition des spécifications opératoires (précision des calculs par exemple) et technologiques (contraintes de répartition, de temps, d’interfaces physiques, de sûreté de fonctionnement, etc 
SCORE : 101155


 Le deuxième cas en dessous signifie que toutes les fonctions F1[i] exploitent en écriture un seul port Pt en respectant son degré de partage 
SCORE : 101154


 - laco-simulation qui concerne l’étape de conception architecturale pour la co-simulation fonctionnelle et l’étape de réalisation pour la co-vérification détaillée 
SCORE : 100843


 Pour le niveau procédure, une fonction est décomposée en un ensemble de séquences d’instructions appelées procédures et qui peuvent être allouées sur des processeurs différents 
SCORE : 100808


 Pour des problèmes de convention de nom et de restrictions au niveau de la connexion du port map, nous utilisons des ALIAS pour distribuer les éléments du vecteur sur les différentes fonctions 
SCORE : 100804


5) A Debit (Mbits/s) NbDisques = (NbUtilisateurs × DebitMoy × TaccDiskMoy ) ⁄ (TailleFragment) = 9 0 5 10 15 20 25 30 35 0 5 10 15 20 25 30 "NbFragReadMoy" "NbFragRead" Temps (s) Nombre de Fragments Total (dans le système) Moyen (par buffer d’anticipation) Chapitre 7 222 M 
SCORE : 100786


 Cependant contrairement au port, pour les fonctions en attente sur un événement, c’est le principe de la diffusion (et non la gestion des accès selon une priorité) qui a été retenu 
SCORE : 100773


 Pour résumer la démarche préconisée, la structuration d’un système pour MCSE est décrite selon un ensemble de niveaux comme l’indique la figure ci-après 
SCORE : 100716


 Pour résumer la démarche préconisée, la structuration d’un système pour MCSE est décrite selon un ensemble de niveaux comme l’indique la figure ci-après 
SCORE : 100716


 Mais comme VHDL est un langage très déclaratif, le générateur produira entre 60-80% du code Configuration Fichiers pour la simulation MCSE-GEN MCSE-SIM Resultats MCSE-PERF Modèle MCSE VHDL VHDL Trace Ordre de l’utilisateur de la trace Controle du simulateur Chapitre 2 30 M 
SCORE : 100670


 Par exemple, l’outil Seamless CVE de Mentor Graphics permet de synchroniser par une modélisation particulière du bus du processeur un simulateur du jeu d’instructions du microprocesseur (outil XRAY de Microtec) et un simulateur VHDL ou Verilog 
SCORE : 100657


 Il y a deux types de conflits qui peuvent apparaître quand JAVACUP essaie de créer un analyseur syntaxique: les "shift/reduce" conflits et les "reduce/reduce" conflits 
SCORE : 100620


 Le développement s'effectue selon 4 étapes: - L'élaboration des spécifications, de manière à exprimer à partir du besoin une vue purement externe du système (WHAT) 
SCORE : 100515


 Le développement s'effectue selon 4 étapes: - L'élaboration des spécifications, de manière à exprimer à partir du besoin une vue purement externe du système (WHAT) 
SCORE : 100515


 Le service assuré par le port, c’est-à-dire l’ordre de rangement des messages, sera aussi définissable selon une politique Fifo ou selon la priorité des producteurs 
SCORE : 100490


 •Pour une entreprise, le développement d’un produit s’évalue en termes de : >coûts d’achat versus coûts de développement Les achats de produits standard limite les coûts mais augmentent la dépendance 
SCORE : 100466


 Durant la phase de chargement et vérification syntaxique, on met à jour des "hashtables" concernant les paramètres de configuration, les constantes, les variables et les règles du script 
SCORE : 100453


 Comme les actions ne se font que sur transition au lieu d’utiliser une variable d’état pour transcrire les automates, nous avons simplement utilisé l’instruction If 
SCORE : 100377


 Pour la compréhension de la méthode utilisée, nous commençons par une analyse des textes source et résultat voulu pour en déduire ce que doit être un template 
SCORE : 100357


 Les fonctions décrites ci-après ne possèdent pas la variable State en entrée car nous avons supposé qu’il n’y a pas de limitation de ressource d’exécution 
SCORE : 100279


 SUIVI D’UN PROJET Développer un projet nécessite de mener en parallèle 3 activités: - le développement à proprement dit en procédant étape par étape, - la vérification du développement, - la documentation du projet 
SCORE : 100228


 SUIVI D’UN PROJET Développer un projet nécessite de mener en parallèle 3 activités: - le développement à proprement dit en procédant étape par étape, - la vérification du développement, - la documentation du projet 
SCORE : 100228


3 CONCLUSION Ces deux exemples ont permis de montrer que le modèle de performance est un outil approprié pour aider au dimensionnement et au partitionnement des systèmes matériels et logiciels 
SCORE : 100112


E Nous sommes aussi obligés de rajouter l’état ActivityState=ExitNow (et non pas utiliser l’état ActivityState=Inactive) pour pouvoir sortir de l’état ActivityState=Waiting lors d’une fin d’activité forcée 
SCORE : 100105


 Enfin après synthèse de la solution, la rétro-annotation des résultats de synthèse dans le modèle de performance utilisé permet d’évaluer le système sans utiliser Chapitre 3 52 M 
SCORE : 100066


 Pour répondre à cette question, nous commençons par analyser l’ensemble des opérations élémentaires nécessaires puis nous proposons une technique d’exécution 
SCORE : 100027


 •Caractéristiques et modélisation de l'environnement du produit à réaliser : description de toutes les entités utilisées, et de toutes les connexions entre elles et le système à développer 
SCORE : 100003


 Au lieu de parcourir plusieurs fois des listes de la structure de données interne, il semble plus judicieux d’offrir au niveau du Script la possibilité d’utiliser des hashtables 
SCORE : 99978


E 87 chapitre 7 détaille aussi 2 autres exemples qui ont permis de valider et d’enrichir les concepts du modèle de performance et la technique d’évaluation associée 
SCORE : 99977


 Pour la compréhension de la méthode globale, nous commençons par indiquer le modèle de simulation retenu pour la transcription d’un constituant actif à degré de parallélisme limité 
SCORE : 99964


 La machine virtuelle représentant le processeur logiciel est composée d’un étage de recherche et décodage d’instruction, d’une mémoire de stockage et d’un ensemble de branches d’exécution 
SCORE : 99538


 Règles de Génération appelées lors de l’analyse Opérations effectuées par le générateur VHDL GenerateFromFirstCondActivity informations fournies: Expression, ComparisonOp, SecondExpression Appel de la procédure de génération de nombres aléatoires et génération de la branche "IF" de la construction VHDL "IF 
SCORE : 99440


1 Rappel de la méthodologie MCSE MCSE est une solution possible comme schéma d'organisation pour tout développement de systèmes électroniques et informatiques à caractère temps-réel 
SCORE : 99432


 La technique de co-simulation repose sur la simulation d’un modèle de performance qui représente à la fois la partie matérielle et la partie logicielle du système 
SCORE : 99418


 Le nombre de disques est ici évalué d’une manière statique par le débit global des disques qui doit être supérieur au débit de transmission 
SCORE : 99399


 Une fois analysé, ce fichier est stocké sous la forme d’un arbre à partir duquel on dupliquera des branches pour générer l’arbre du programme de sortie 
SCORE : 99333


 Une fois analysé, ce fichier est stocké sous la forme d’un arbre à partir duquel on dupliquera des branches pour générer l’arbre du programme de sortie 
SCORE : 99333


 Pour le développement d’une plate-forme d’outils, le langage Java offre un certain nombre d’avantages non négligeables par rapport à une implantation en C++ ou l’utilisation d’un métaoutil 
SCORE : 99232


 Les analyses lexicale et syntaxique ne constituent que la phase d’analyse d’un compilateur, phase qui est ensuite suivie par une phase de synthèse pour la production du code cible 
SCORE : 99170


 Par exemple, un processeur logiciel peut être décrit comme un ordonnanceur de tâches et le logiciel comme un ensemble de tâches 
SCORE : 98999


 L’analyse faite dans le chapitre 2 a montré qu’il existe un certain nombre d’outils commerciaux ou universitaires pour l’analyse des performances d’un système 
SCORE : 98991


 Des interfaces correctes entre le matériel et le logiciel doivent aussi être générées pour une implantation appropriée et efficace des relations fonctionnelles 
SCORE : 98952


 le port Lind est rapidement saturé et après avoir obtenu le jeton, la fonction EmissionMess doit attendre jusqu’à ce que ReceptionMess soit prête à recevoir un message 
SCORE : 98769


 Après avoir défini les règles de transcription, nous avons développé un principe générique de génération de code et un générateur de code VHDL 
SCORE : 98649


 En effet, en spécification, la durée d’un état ne représente pas un temps d’exécution mais un temps d’attente d’une condition de fin de l’état 
SCORE : 98641


 Puis pour une implantation logicielle de la fonction, on applique les algorithmes utilisés dans les problèmes d’ordonnancement des systèmes temps réels pour calculer la charge du processeur 
SCORE : 98564


 Pour comprendre les notations utilisées, il est utile de préciser que Treq[] signifie que l’indice du port est le même que celui du producteur et que Treq[:] signifie que l’on considère le vecteur complet 
SCORE : 98563


 Le terme parser inclut ici tout d’abord un analyseur lexical pour identifier les tokens successifs et les présenter à l’analyseur syntaxique 
SCORE : 98469


2 Les techniques multi-langages Les techniques basées sur des modèles ou langages différents de représentation des parties matérielles et logicielles, reposent sur la coopération de simulateurs 
SCORE : 98457


 Le système d’exploitation JavaOs qui est multi-tâches et orienté réseaux de communication devrait connaître un franc succès avec l’apparition des "Network Computers" à bon marché et la banalisation d’Internet 
SCORE : 98456


 Le temps de lecture ou d’écriture est défini par le temps de positionnement sur la piste, le temps d’attente du bloc sous la tête, le temps de lecture du bloc 
SCORE : 98408


 Il s'agit de disposer d'un moyen permettant de décrire d'une manière succincte et efficace, la structure et le comportement du système avec une souplesse de modification 
SCORE : 98382


 - un block permet d’accéder à des variables partagées (Shared Variable de VHDL’93) telle que la variable rnd qui est utilisée par un générateur de nombre pseudo-aléatoire 
SCORE : 98305


 Les fonctions de service du système pour son environnement sont pour l’exemple considéré: la lecture d’une séquence vidéo, l’enregistrement de séquence et la gestion du serveur 
SCORE : 98294


 Nous avons choisi les conditions suivantes: le nombre d’utilisateurs et de canaux haut débit du serveur est 40 et le nombre de disques est de 35 
SCORE : 98227


 Le modèle de performance de MCSE est approprié pour le co-design car il représente simultanément la partie matérielle et la partie logicielle d’un système, est décrit dans le chapitre 3 
SCORE : 98220


 La qualité de la partie analyse est importante car elle conditionne la partie génération et influe directement sur l’efficacité et la qualité d’écriture d’un générateur 
SCORE : 98219


-94], un processeur est modélisé pour la description VHDL d’un jeu d’instructions virtuel et d’une architecture générique qui permettent de cibler sur différents processeurs spécifiques 
SCORE : 98170


 L’instruction After n’est également pas utilisable puisqu’à chaque nouvelle affection toutes les modifications ayant une date d’occurrence supérieure à celle de l’affectation en cours sont perdues 
SCORE : 98145


 Le type et la valeur par défaut des paramètres génériques utilisés dans la description d’un système sont définis dans une liste située à la racine de la structure de données du modèle MCSE 
SCORE : 98092


E 209 7 Validation de la méthode par des études de cas La validation de la démarche d’évaluation des performances et des règles de transcription du modèle de performance en VHDL repose sur deux exemples 
SCORE : 98031


 Ces attributs peuvent être utilisés pour modifier (forme de surcharge) les attributs des éléments de relation car ils sont alors considérés prioritaires 
SCORE : 98017


 La description fonctionnelle détaillée de la partie spécifique ou sous-système sert de point de départ de l’activité de co-design 
SCORE : 98009


 Notre solution permet d’obtenir des outils multi plate-formes, basés sur une architecture générique commune, configurables et plus faciles à développer et à enrichir 
SCORE : 97916


 L’outil permet d’animer la modélisation (flot de transactions) et de générer (API et langage de requêtes) des rapports statistiques (valeur min, max, moyenne, histogramme de fréquence, 
SCORE : 97803


 Les autres parmi lesquelles on peut citer en autres SES/WorkBench, RDD100 et BOnes ont un formalisme, un simulateur et des possibilités d’analyse des résultats qui leur sont propres 
SCORE : 97795


 L’utilisateur du script peut également utiliser d’autres variables systèmes: ProjectPath pour le chemin du projet, ToolsPath pour le chemin des outils et Date pour la date courante 
SCORE : 97736


 -D- Modèle pour Enregistrement Une analyse statique de l’application montre que la fréquence d’arrivée de fragments peut être supérieure à la fréquence maximale d’écriture sur un disque 
SCORE : 97690


 Durant l’étape de conception fonctionnelle, elle permet aussi de dimensionner les éléments internes d’un modèle (taille d’un port de communication par exemple) 
SCORE : 97671


 Pour ce dernier cas (lien double flèche dans le modèle comportemental), il faut différencier le cas de la donnée partagée du cas de la ressource commune 
SCORE : 97621


 OutputActiveAck Wait OutAccess end Wait Delay Write TaskBlocked PortIn PortOut Send Wait InAccess (ActiveReq or NbFreeSpace>0 and ActiveAck ActiveAck InactiveReq InactiveAck InactiveReq InactiveAck PORT à N places pour une concurrence Port Prod[1:m] Cons[1:n] DELAY (writeTime) /ActiveReq end wait NbMess>0 and OutValue InactiveReq InactiveAck End DELAY InactiveReq ActiveAck Wait InactiveAck ‘Capacity ‘Write ‘Read ‘Write Wait ActiveAck Send ( InValue, Port) utilisé dans Prod[i] End DELAY Receive (Port, OutValue) utilisé dans Cons[i] PORT ‘Capacity ‘Write ‘Read buff: fifo 
SCORE : 97593


 C’est le rôle de la phase de co-synthèse qui concerne la synthèse des parties matérielles et logicielles et la synthèse des interfaces matériel/logiciel 
SCORE : 97462


 L’analyse d’un élément de relation interne d’une description comportementale est à rapprocher de celle d’un élément de relation d’une structure fonctionnelle ou exécutive 
SCORE : 97439


 Nous présentons donc ensuite un panorama des techniques de co-simulation existantes et celle retenue par l’équipe qui est macroscopique et non interprétée 
SCORE : 97413


 Un exemple de déroulement temporel obtenu par simulation d’un système d’asservissement en vitesse et position d’un moteur à courant continu [HELLER-93] est donné par la figure 4 
SCORE : 97254


 Ainsi, elle n’a pas besoin de tenir compte de l’état (active, inactive, bloquée ou en attente) de la fonction (tâche) productrice ou consommatrice de l’information échangée 
SCORE : 97248


 Ces systèmes dit dédiés sont généralement conçus pour répondre à un besoin spécifique et entrent dans la catégorie des systèmes électroniques embarqués et temps-réel (Real-Time Embedded Systems) 
SCORE : 97238


 Un modèle efficace doit posséder un ensemble de concepts de modélisation restreint mais suffisant pour décrire facilement n’importe quel système 
SCORE : 97173


 Le résultat de ce chapitre est important car il sert ensuite de base pour l’intégration des règles de traduction dans l’outil de génération VHDL présenté dans le chapitre 6 
SCORE : 97015


 Pour cet objectif, l’effort de développement est fortement dépendant de la syntaxe et la sémantique des langages source et cible et de la complexité des règles de transformation 
SCORE : 96991


 Des attributs sont associés aux constituants et aux éléments de description comportementale pour permettre l’étude du comportement temporel du système 
SCORE : 96983


 Deux grandeurs temporelles ‘Write et ‘Read sont aussi à considérer pour son utilisation ceci dans le cas de place disponible pour le dépôt, ou d’une information disponible pour le retrait 
SCORE : 96960


 Pour le lecteur non familiarisé avec le dialecte de cette notation pour la conception orientée objet, les concepts du modèle statique de la méthode unifiée sont présentés dans [RUMBAUGH-91] [RUMBAUGH-95] 
SCORE : 96862


 En effet, à partir des paramètres obtenus par une estimation des performances statiques du système et représentés sous forme d’attributs (‘Area, ‘Pin, ‘CodeSize, ‘MemoryUsed, etc 
SCORE : 96855


 - les performances internes au système telles que: • taux d’utilisation des ressources internes: processeur, ligne de communication, bus, etc 
SCORE : 96831


 Il s’agit d’une version très simplifiée du serveur vidéo temps-réel extrait du problème global posé par le CCETT de Rennes et présenté dans le chapitre 7 
SCORE : 96690


 Elle attribue entre autre un canal haut débit à un utilisateur en fonction de l’état (libre ou occupé) de l’ensemble des canaux modélisé par la variable EtatCanaux 
SCORE : 96650


6 LA COMPOSANTE COMPORTEMENTALE DU MODELE DE PERFORMANCE Le modèle de comportement définit les règles de construction que doit respecter toute description comportementale d’un composant actif utilisé dans le modèle structurel 
SCORE : 96562


 -F- Attributs libres Pour permettre toute forme d’évaluation sur la structure, l’utilisateur peut ajouter les attributs qu’il souhaite pour les éléments de la structure 
SCORE : 96531


 Une méthode efficace consiste à définir un schéma d’implantation logicielle (voir MCSE) sans utiliser d’exécutif temps-réel 
SCORE : 96460


 Nous avons montré qu’une approche système est nécessaire pour déterminer les parties du système relevant de l’activité de co-design 
SCORE : 96458


 Le niveau de description des modèles utilisés ainsi que le niveau de granularité du partitionnement sont alors très influents sur les moyens et les résultats obtenus 
SCORE : 96424


 Elles vont donc balayer un ensemble d’alternatives inutiles et dans certains cas sont moins efficaces (temps de recherche) qu’un partitionnement interactif 
SCORE : 96398


 Pour faciliter la modélisation, il faut pouvoir disposer de la notion de modèle d’activité, tout comme la notion de modèle de fonction existe pour le modèle structurel 
SCORE : 96385


 On obtient alors un programme de génération indépendant du méta-générateur pour son exécution et plus rapide que le fonctionnement en mode interprété 
SCORE : 96249


 Dans le chapitre 2, nous présentons la méthodologie de co-design, le principe de partitionnement et la technique de co-simulation préconisés par l’équipe MCSE 
SCORE : 96238


 L’instruction simple ou multiple peut être définie préemptive et dans ce cas il faut aussi définir les temps de préemption et de réallocation 
SCORE : 96226


 Les résultats obtenus sont très dépendants des coefficients de la fonction de coût: "the cost function plays an important role in our partitioning approach" [ERNST-93] 
SCORE : 96068


E 217 où now représente la valeur courante de l’instant de simulation et TrwFrag représente le temps d’accès moyen aux disques 
SCORE : 96049


 •Description des entrées-sorties: nature des informations et de tous les signaux, avec leur codage, nature des protocoles si nécessaire, etc 
SCORE : 96044


 Le StateChart décrit très précisément un déroulement temporel de chaque activité sous la forme d’un ensemble d’états, de conditions et d’actions 
SCORE : 96005


 Le StateChart décrit très précisément un déroulement temporel de chaque activité sous la forme d’un ensemble d’états, de conditions et d’actions 
SCORE : 96005


 -C- Contrôle de l’exécution En mode interprété, le concepteur peut mettre des points d’arrêt dans son code script avec l’instruction "BreakPoint 
SCORE : 95955


 L’activité de co-design concerne également les systèmes de complexité moyenne à faible pour lesquels une approche système n’est pas nécessaire 
SCORE : 95954


 ce qui en général ne sera pas possible ou très difficile avec l’utilisation d’un estimateur statique (théorie des réseaux de files d’attente et des réseaux de Petri stochastiques) 
SCORE : 95942


 Il s’agit de pouvoir ajouter une structure ou une valeur en début de liste, en fin de liste ou après un élément donné de la liste 
SCORE : 95936


 L’unicité du modèle facilite la transition d’une phase de conception à l’autre: le modèle d’une phase de conception donnée s’obtient par raffinement et enrichissement du modèle de l’étape précédente 
SCORE : 95875


 Elle a néanmoins été facilitée par le fait que l’entité gérant un élément de relation est passive par rapport à la ressource d’exécution des fonctions ou activités 
SCORE : 95851


6 Attributs et paramètres du modèle de comportement Pour pouvoir extraire des résultats, il faut ajouter au modèle décrit précédemment tous les paramètres ou attributs nécessaires 
SCORE : 95846


E Les différents cas possibles de l’instanciation multiple des fonctions et des éléments de relation sont représentés dans le tableau suivant (voir chapitre 3) 
SCORE : 95727


 Pour que notre générateur soit indépendant des langages source et cible, il faut que cette structure soit construite selon un modèle générique 
SCORE : 95721


 Le principe était le suivant: Le générateur charge sous la forme de structure interne le texte source et le fichier template 
SCORE : 95695


 0:n VariableScript TypeName GrammarRuleName Name Value Element Integer Real String NodeDs 1:1 Pour une variable désignant une structure, la variable doit aussi avoir une référence sur la règle de grammaire concernée 
SCORE : 95681


 Une évaluation des performances peut donc se faire à un niveau quelconque d’abstraction et éventuellement très tôt dans le cycle de développement 
SCORE : 95674


 Nous allons présenter dans les paragraphes suivants les principaux types de problèmes rencontrés lors de la génération d’un analyseur syntaxique pour le langage VHDL’93 
SCORE : 95641


 Enfin, le comportement correct du bus modélisé avec le port TB est obtenu avec un mécanisme de rendez-vous (‘Capacity=0) entre l’émetteur EmissionMess et le récepteur ReceptionMess 
SCORE : 95605


 Cette description est à faire de préférence en langage de haut-niveau tel que VHDL de manière à pouvoir utiliser un synthétiseur architectural ou de haut niveau 
SCORE : 95594


 Pour la génération, nous utilisons deux templates: un pour la génération de l’entité VHDL représentant le système étudié et l’autre pour le package associé à cette entité 
SCORE : 95593


 De l'analyse se déduit la nature du modèle qu'il faut rechercher dans l'ordre de complexité: modèle statique données/évènements, modèle dynamique global, modèle des activités 
SCORE : 95586


 De l'analyse se déduit la nature du modèle qu'il faut rechercher dans l'ordre de complexité: modèle statique données/évènements, modèle dynamique global, modèle des activités 
SCORE : 95586


 En effet, comme les champs terminaux sont constants, il ne sert donc à rien de les dupliquer dans ce record car leur existence et valeur sont définies dans la GrammarDs 
SCORE : 95578


 La figure donne la liste des règles de génération appelées lors de l’analyse du modèle MCSE source et des informations fournies à ces règles 
SCORE : 95527


 Dans ce cas, face à la nature hétérogène de l’architecture cible et à la diversité des contraintes imposées, une démarche itérative et guidée par le concepteur s’impose 
SCORE : 95517


 Le degré de concurrence (attribut ‘Concurrency) représente alors le nombre de couples simultanés et non pas le nombre d’accès simultanés autorisés (Port à N places) 
SCORE : 95464


 Ce dernier cas permet de modéliser le comportement des fonctions sur une entrée servant non pas d’activation mais de condition d’évolution 
SCORE : 95453


E On se place dans le cas de 2 disques possédant un temps d’accès de 20 ms, de 10 usagers lancés progressivement d’une manière aléatoire 
SCORE : 95437


 Contrairement à la plupart des modèles de performances existants, notre modèle distingue clairement la vue fonctionnelle d’un système de sa vue architecturale 
SCORE : 95414


), - d’une zone d’affichage de messages, - d’une zone de boutons de commande, - d’une ligne de statut, - d’une zone d’affichage du contenu des variables sous forme d’arbre 
SCORE : 95405


 Pour faire face à la complexité, la meilleure solution est probablement d’écrire son script de manière naturelle et de l’optimiser dans un second temps 
SCORE : 95404


 Sur chaque carte, les producteurs doivent envoyer de courts messages (256 octets maximum) à des consommateurs situés sur la même carte ou sur une autre carte 
SCORE : 95343


 i carte i Tache i Module i Matériel Logiciel Assem- Test Test détaillée unitaire conception Réalisation Assem- Test Domaine de Cahier des charges Problème Produit ensemble i cation blage cation nelle blage cation cation Etude préliminaire ETUDES DE CAS 14 M 
SCORE : 95316


 i carte i Tache i Module i Matériel Logiciel Assem- Test Test détaillée unitaire conception Réalisation Assem- Test Domaine de Cahier des charges Problème Produit ensemble i cation blage cation nelle blage cation cation Etude préliminaire ETUDES DE CAS 14 M 
SCORE : 95316


 Un tel composant est défini par son nom de type, ses entrées et sorties formelles, sa description interne 
SCORE : 95284


 L’analyse de ces performances permet de vérifier le respect ou non des contraintes de performances à satisfaire et d’identifier les ressources critiques 
SCORE : 95261


 Ce partitionnement est de niveau système et se comprend bien lorsque l’on considère un système possédant le Méthodologie de co-design et estimation des performances M 
SCORE : 95200


 Les outils ESDA se composent d’outils de capture de modèles, de simulation, d’analyse statique ou dynamique, de recherche de compromis, de synthèse et de co-vérification 
SCORE : 95154


 Les exigences non-fonctionnelles décrivent un ensemble de contraintes imposées qui concernent à la fois le produit et le procédé de développement et de réalisation du produit 
SCORE : 95151


 La variable caractéristique retenue nommée Information représente les informations pertinentes extraites de d’analyse du modèle source MCSE et qui sont indispensables pour la génération du code de sortie 
SCORE : 95057


 Le rôle d’un tel serveur est de transmettre en temps-réel à chaque utilisateur sur son téléviseur le film vidéo qu’il sélectionne 
SCORE : 95036


2 Démarche pour la définition de la réalisation L’étape de Définition de la Réalisation de MCSE est décomposée en 3 phases: - Transformation de la solution fonctionnelle pour satisfaire les spécifications technologiques de répartition géographique et d’interfaces 
SCORE : 95012


7 EXEMPLE DE MODELISATION L’exemple que nous décrivons dans ce paragraphe permet de voir l’application et l’intérêt du modèle de performance de MCSE sur un système simple mais intéressant 
SCORE : 94995


 Comme il est plus facile de détruire une partie d’arbre que de construire des feuilles une par une, il est conseillé de définir les constructions utilisées sous leur forme complète 
SCORE : 94958


 La fonction de coût utilisée est pondérée par la surface du matériel, la taille du programme de code (mémoire) et le taux d’occupation du processeur 
SCORE : 94879


1 La co-simulation Une co-simulation est une simulation simultanée de la partie logicielle et de la partie matérielle d’un système et de leurs interactions 
SCORE : 94858


 Niveau 1 Niveau 2 Niveau 3 Niveau 4 Abstrait Concret PRODUIT Temps DEFINITION de la REALISATION REALISATION Spécifications Description fonctionnelle Description exécutive Modèles Spécification Modèle fonctionnel Modèle d’exécution Spécifications Spécifications fonctionnelles et opératoires CHARGES CAHIER DES technologiques CONCEPTION FONCTIONNELLE Spécifications technologiques de réalisation SPECIFICATION Partie incluant le co-design Chapitre 2 16 M 
SCORE : 94714


 Cette activité est basée sur l’emploi d’un modèle de description mixte matériel-logiciel exécutable de la solution, ou tout au moins des parties critiques 
SCORE : 94708


 5- Il s’agit ensuite de créer autant de relations que dans le modèle MCSE avec mise à jour des noms X pour les signaux et alias de chaque relation 
SCORE : 94687


1 Opérations sur les structures La présentation de la méthode faite dans le paragraphe précédent permet d’extraire assez facilement les opérations de base nécessaires 
SCORE : 94685


4 Transcription pour l’activation conditionnelle Il s’agit de permettre l’exécution d’une séquence d’opérations ou activités parmi un ensemble dépendante d’une condition d’activation 
SCORE : 94659


 Concernant les paramètres génériques, lorsque le modèle contient des vecteurs d’instances, la taille d’un ou plusieurs vecteurs internes peut être dynamique 
SCORE : 94606


 Pour la compréhension, l’entité modélise l’environnement de l’exemple simplifié du serveur vidéo dont la structure fonctionnelle est représentée par la figure 3 
SCORE : 94605


 Elle comporte une fonction de conversion parallèle/série pour la transmission de chaque octet et la fonction inverse pour la réception bit à bit d’un octet 
SCORE : 94603


 Nous rappelons tout d’abord les principales caractéristiques de la méthodologie de co-design développée sur la base de la méthodologie MCSE et de son modèle de performance 
SCORE : 94521


 ‘Power représente la puissance relative du processeur, ‘Concurrency représente le nombre de fonctions exécutables simultanément ce qui simule en fait le nombre de processeurs physiques 
SCORE : 94482


 Il est aussi intéressant d’avoir la notion de modèle d’activité et de fonction, ce qui veut dire la réutilisation possible d’un modèle provenant d’un autre projet 
SCORE : 94444


 D’autres attributs peuvent être ajoutés par l’utilisateur pour enrichir sa description selon l’objectif qu’il vise 
SCORE : 94429


 L’interconnexion entre ces blocs se fait par un passage de jeton selon un protocole de communication du type rendez-vous 
SCORE : 94383


 Les trois premières colonnes du tableau définissent ainsi la méta-grammaire et la métastructure pour spécifier toute grammaire et la construction de structure équivalente 
SCORE : 94358


 Les instructions FindRelationElement et FindInternalRelationElement devront donc être appliquées sur le champ ElementName d’une condition ou d’une action pour retrouver l’élément de relation associé à cette condition ou action 
SCORE : 94334


 Les techniques mono-modèle se distinguent par le degré d’abstraction du modèle des processeurs logiciels (modèle d’attributs, modèle flot de ressource, modèle ISA du jeu d’instructions [BALBONI-95]) 
SCORE : 94295


1 SERVEUR VIDEO TEMPS REEL Cet exemple fourni par le CCETT de Rennes a été choisi pour montrer l’adéquation de la méthodologie MCSE pour la spécification, la conception et l’évaluation des performances d’un système complexe 
SCORE : 94259


 En effet, en donnant des significations différentes aux symboles, on peut à la fois décrire une structure fonctionnelle et une structure d'exécution 
SCORE : 94238


1 TECHNIQUE POUR L’EVALUATION DE PERFORMANCE Après avoir défini le modèle de performance, la phase suivante porte sur le développement d’une méthode permettant l’évaluation des performances souhaitées par le concepteur 
SCORE : 94171


 Pour le mode par référence, le fichier est inclut uniquement au moment de la sauvegarde de la structure de données concernée sous forme textuelle 
SCORE : 94025


) directement sur un modèle de jeu d’instructions est meilleur que le résultat obtenu par compilation d’une description algorithmique de haut niveau tel que le langage C 
SCORE : 94024


 Un template est un fichier écrit dans le langage cible souhaité et contenant toutes les constructions nécessaires pour la translation texte à texte 
SCORE : 94014


1): - l'étape de Spécification qui a pour objectif d'élaborer une description externe la plus complète possible du système à concevoir, et ceci à partir du cahier des charges 
SCORE : 93992


 En effet, que le script soit en mode interprété ou transcrit en code Java, les mêmes méthodes sont utilisées pour l’exécution des opérations élémentaires 
SCORE : 93982


 En effet, si l’attribut concerne par exemple le temps d’écriture (‘Write), ce temps vient en remplacement du temps d’écriture de l’élément connecté 
SCORE : 93966


 L’attribut ‘Policy permet de choisir plusieurs modes de synchronisation: booléen et donc avec mémorisation, comptage d’événement, fugitif et donc sans mémorisation 
SCORE : 93864


 Le choix du langage JAVA pour l’implantation offre un certain nombre d’avantages et notamment la garantie d’avoir un outil multi plate-forme 
SCORE : 93834


 Cette description sauvée sous forme textuelle est ensuite transcrite en un programme VHDL conformément à des règles de traduction que nous détaillons dans ce chapitre 
SCORE : 93823


E 15 Ensuite, un bon concepteur doit savoir se placer au dessus des aspects techniques et ceci en utilisant le plus possible des concepts 
SCORE : 93721


E 15 Ensuite, un bon concepteur doit savoir se placer au dessus des aspects techniques et ceci en utilisant le plus possible des concepts 
SCORE : 93721


 Cette modélisation résumée ci-après s’obtient: - en ajoutant des paramètres ou attributs de comportement aux constituants de la solution fonctionnelle de la figure 7 
SCORE : 93689


 On remarque aussi sur l’exemple la condition d’évolution sur la réception de Cmd ce qui se traduit par l’appel de la procédure Receive, et les actions de transmission des messages OrderRec et OrderRead[:] traduites par la procédure Send 
SCORE : 93662


 La description interne de l’entité associée au composant Port contient une fifo (buff) qui sert à stocker et restituer (primitives Put et Get) les messages transmis 
SCORE : 93656


 L’attribut ‘Overhead permet d’introduire le temps de commutation entre 2 tâches (fonction ou activité) lors du partage de la ressource d’exécution 
SCORE : 93641


 En effet, il est plus judicieux d’adapter à la problématique du co-design une méthodologie de conception système éprouvée que de redéfinir entièrement une nouvelle méthodologie 
SCORE : 93637


 Cette structure interne peut alors être interprétée (cas d’un interpréteur) ou transcrite en un langage cible (cas d’un compilateur) 
SCORE : 93631


 L’utilisateur peut également rajouter au code VHDL généré des instructions de captures spécifiques et utiliser les possibilités d’observations offertes par le simulateur VHDL utilisé 
SCORE : 93561


 Une opération ou une activité élémentaire est définie vis-à-vis de son contexte englobant par une entrée en dessus et une sortie en dessous 
SCORE : 93559


 Ces attributs sont associés aux informations en transit pour les attributs Id et Size, ou sont associés aux entrées et sorties de la fonction ou de l’activité décrite 
SCORE : 93518


 La valeur d’un paramètre peut être modifiée entre 2 simulations ou peut même varier durant une simulation (incrémentation par exemple) 
SCORE : 93418


 Ceci se fait en détaillant le comportement souhaité des objets de l'environnement sous le contrôle du système, ainsi que toutes les contraintes imposées 
SCORE : 93395


 Ceci se fait en détaillant le comportement souhaité des objets de l'environnement sous le contrôle du système, ainsi que toutes les contraintes imposées 
SCORE : 93395


 Les techniques de partitionnement automatique souffrent généralement du fait qu’elle ne prennent pas en compte l’expérience et le bon sens des concepteurs 
SCORE : 93359


 Les différents algorithmes de parcours du modèle MCSE vont donc se différencier par l’emplacement des appels des règles de génération et l’utilisation d’une pile implicite (LocalVisibility) ou explicite (Push et Pop) 
SCORE : 93332


 Pour la transcription de la composante comportementale du modèle de performance, le comportement de chaque fonction est modélisé comme un ensemble de process synchronisés et coopérants 
SCORE : 93309


 -C- Résultats obtenus par simulation Le nombre de disques est calculé de façon à avoir un flux de sortie supérieur ou égal au flux d’entrée: avec NbUtilisateurs=10, DebitMoy=7 
SCORE : 93208


 Cette méthodologie, comme toutes les autres, montre bien les avantages d'une démarche de conception descendante (top-down design) 
SCORE : 93201


 Le champ d’adresse du message est utilisé par la fonction Routing pour déterminer si le destinataire du message est local (situé sur la même carte) ou distant 
SCORE : 93189


 Dans le chapitre 4 sur les règles de transcription, nous avons également vu que les règles de transcription sont plus complexes pour la composante comportementale du modèle de performance de MCSE 
SCORE : 93142


 BEGIN -- pour un fork il y a synchronisation des activations de toutes les branches -- pour un Join toutes les branches doivent indiquer leur fin d'execution result := Input(input'LOW) 
SCORE : 93133


 La copie doit être telle que la destruction de la structure source doit permettre son remplacement par sa copie 
SCORE : 93082


 Time use for loading McseModel: 18 PathLevel = ApplicationServeurVideo GenerateComponentFromNameAndRange with ComponentName = ApplicationServeurVideo ComponentRangeExpression = ComponentMultiple = 0 GenerateOneGenericParameter with n:INTEGER=10 GenerateOneGenericParameter with k:INTEGER=10 GenerateOneGenericParameter with nd:INTEGER=10 GenerateOneGenericParameter with TaccDisk:INTEGER=20 GenerateFromRelationElement with RelationType = Port Name = CmdUsager ElementMultiple = 1 ElementRangeExpression = k NumberOfInputAccessInLevel = 1 NumberOfOutputAccessInLevel = 1 NumberOfInputAccessInAllLevel = 2 NumberOfOutputAccessInAllLevel = 2 GenerateFromRelationElement with RelationType = Port Name = RepUsager ElementMultiple = 1 ElementRangeExpression = k NumberOfInputAccessInLevel = 1 NumberOfOutputAccessInLevel = 1 NumberOfInputAccessInAllLevel = 2 NumberOfOutputAccessInAllLevel = 3 GenerateFromRelationElement with RelationType = Port Name = SequenceIn ElementMultiple = 1 ElementRangeExpression = n NumberOfInputAccessInLevel = 1 NumberOfOutputAccessInLevel = 1 NumberOfInputAccessInAllLevel = 3 NumberOfOutputAccessInAllLevel = 2 AttributesList: `Capacity=0 GenerateFromRelationElement with RelationType = Port Name = SequenceOut ElementMultiple = 1 ElementRangeExpression = n NumberOfInputAccessInLevel = 1 NumberOfOutputAccessInLevel = 1 NumberOfInputAccessInAllLevel = 2 NumberOfOutputAccessInAllLevel = 3 AttributesList: `Capacity=0 PathLevel = ApplicationServeurVideo\Usagers GenerateFromInputOutput with ParameterType = Mess ParameterName = RepUsager TypeName = DefRepUsager VectorExpression = k Vector = 1 BlackBall = 0 IsInput = 1 NumberOfInputAccessInLevel = 1 NumberOfOutputAccessInLevel = 0  
SCORE : 93080


 Pour l’écriture, la syntaxe est proche de celle du C++ avec quelques concepts plus formalisés tel que l’absence de pointeurs, la persistance d’objets (sérialisation), etc 
SCORE : 93015


7 CONCLUSION Actuellement, les efforts de la communauté du co-design concernent essentiellement le développement d’une méthodologie de conception complète et de ses outils support 
SCORE : 92987


 De plus, pour privilégier la fonction lecture par rapport à la fonction enregistrement, dans le modèle de comportement de la fonction SupervisionUsager la valeur de la probabilité Proba associée à l’alternance est très faible (0,0005) 
SCORE : 92955


 BehaviorDef Activity1Model BehaviorDefinition BehaviorInstance 0:n 1:n 0:n Proc InternalEvDeclaration Attributes ActivityDescription InternalRelationsList ActivityUnitList Ready AttributeValue 0:n Attributes ListAttributeValue Integer AttributeName TimeUnit Op0 Time 100 us 0:n DefP <Mess> Interface Ack <In> InputOutput DefP <Mess> Req <In> InputOutput Op1’Time= 20 us Op2’Time=1 us BehaviorInstance 1:n Activity1 1:n ActivitySequence SeqActivityList "&" ParActivity 1:n ConcurrentActivity ParActivityList " 
SCORE : 92941


 -B- Protocole de communication multi-points De nombreux modèles ne permettent que la communication point à point, ce qui réduit considérablement les possibilités de topologie d’un système 
SCORE : 92930


 Des programmes (en Shell par exemple) permettent ensuite d’obtenir les résultats selon la forme souhaitée et de les visualiser en exploitant par exemple le logiciel GnuPlot 
SCORE : 92929


 -B- Portée des variables Par rapport à un langage classique et pour des raisons de simplicité, les règles d’un script n’ont pas d’arguments d’appel ni de variables locales 
SCORE : 92892


E standards) et de processeurs logiciels (MPU, ASIP, DSP) et l’allocation des éléments de la solution fonctionnelle sur cette architecture: c’est la problématique communément appelée partitionnement matériel/logiciel 
SCORE : 92795


 Le pseudo-code (byte-code) utilisé par la machine virtuelle a aussi la particularité d’être facilement retransformable en code Java ("reverse-coding") 
SCORE : 92718


 Des liens nécessaires pour le couplage entre le matériel et le logiciel doivent alors être spécifiés pour l’implantation des relations fonctionnelles 
SCORE : 92708


 De tels attributs permettront de faire, en autres, des évaluations statiques de la solution, tels que: la consommation, la surface, le coût, etc 
SCORE : 92687


E - des serveurs caractérisés par un temps de service (fixe, uniforme ou exponentiel), - des mécanismes de synchronisation: la divergence (fork) caractérisée par une loi de distribution et le regroupement (join) 
SCORE : 92670


 Les fonctions sont au départ toutes implantées en logiciel puis migrées vers le matériel jusqu’au respect des contraintes de performances 
SCORE : 92628


E Cette approche nécessite de résoudre deux problèmes: - La lecture d’un texte et sa conversion en une structure de données (Load) et l’opération inverse (Save) 
SCORE : 92605


 Pour modéliser l’exécution du logiciel sur un processeur, le modèle UVa a été enrichi de noeuds de process représentant une transformation sur les données et de noeuds de branchement conditionnels 
SCORE : 92582


 Les unités à utiliser dépendent de l'application modélisée (bits pour un système de communication, mots pour une variable partagée, poids pour une pièce, etc) 
SCORE : 92479


 Or à notre avis, cette séparation des deux vues est indispensable pour permettre l’exploration correcte du domaine des solutions possibles lors du partitionnement 
SCORE : 92443


 La démarche de modélisation des performances d’un système doit permettre d’élaborer une représentation des propriétés du système à différents stades du développement 
SCORE : 92388


 Par analogie et pour la compréhension du lecteur, un programme peut s’écrire uniquement à l’aide des trois structures de contrôle que sont la séquence, l’itération et la sélection 
SCORE : 92355


 Le nom des règles et le chemin du fichier dans lequel elles sont définies sont également déclarés dans le fichier de configuration du méta-générateur 
SCORE : 92345


E 1 1 Introduction Ce chapitre introductif présente le contexte général de cette thèse, la problématique traitée et donne un aperçu global de la démarche suivie et du travail effectué 
SCORE : 92312


 Puis, un outil de synthèse haut niveau nommé CAMAD transforme les réseaux de Petri en une netlist pour l’implantation en matériel et en un programme C pour l’implantation en logiciel 
SCORE : 92273


 Si plusieurs alternatives possibles existent, la solution retenue sera spécifiée dans le modèle source ou via l’interface utilisateur de l’outil 
SCORE : 92252


 En partant du problème posé, chaque étape a pour objectif d’enrichir la description par ajout d’informations à partir des contraintes à satisfaire 
SCORE : 92252


 En partant du problème posé, chaque étape a pour objectif d’enrichir la description par ajout d’informations à partir des contraintes à satisfaire 
SCORE : 92252


 Pour décrire ce que doit faire un système, celui-ci est considéré comme observant et agissant sur les objets de son environnement 
SCORE : 92245


 Pour décrire ce que doit faire un système, celui-ci est considéré comme observant et agissant sur les objets de son environnement 
SCORE : 92245


 } La séparation de la première des N branches d’une concurrence permet de continuer la description de cette branche dans la séquence en cours et d’obtenir une traduction en N-1 tâches 
SCORE : 92141


 L’architecture matérielle est généralement une architecture générique constituée d’un microprocesseur, d’un ensemble de circuits matériels programmables ou d’ASICs et d’une mémoire commune 
SCORE : 92121


 Le taux d’occupation du processeur est élevé pour k=3 et relativement faible pour k=6 et 9 car le bus limite le nombre de messages transmis 
SCORE : 92111


 Le temps de transmission est spécifié par l’attribut ‘Write et dépend de la longueur du message et d’un paramètre A qui représente le temps de transmission de chaque octet 
SCORE : 92060


 La présentation du Script définissant les manipulations à effectuer sur les structures de données du modèle source et des templates est décomposée en deux parties: une partie Analyse du modèle MCSE et une partie Génération 
SCORE : 92052


 A tout moment, seule la carte qui possède le jeton peut envoyer un message et/ou passer le jeton à sa voisine 
SCORE : 92052


 Un "reduce/reduce" conflit apparaît quand un même token d’entrée peut compléter deux règles différentes 
SCORE : 92048


 Pour simuler correctement l’arrivée de fragments à la vitesse définie par le débit de l’enregistrement, on utilise l’attribut ‘Read pour la lecture d’un fragment dans le port SéquenceIn[] 
SCORE : 92033


 Les réseaux de Petri ont donc été étendus (Extended Timed Petri Net) avec un attribut de durée pour faciliter l’étude du comportement temporel d’un système 
SCORE : 92017


 Les opérateurs de composition usuels pour la spécification du contrôle sont: séquence, simultanéité ou parallélisme, alternative, répétition et attente conditionnelle 
SCORE : 91992


 Pour décider de la bonne démarche à suivre, une question importante à se poser est de savoir si le problème est ou non “immergé” dans un problème plus vaste 
SCORE : 91915


 Une analyse des types de systèmes conduit à la classification suivante [CALVEZ-90]: - les systèmes typiquement électroniques qui impliquent essentiellement le développement de matériel 
SCORE : 91906


 Il ne faut pas perdre de vue l'objectif de la méthode: parvenir, en une suite d'étapes précises, à développer un produit qui satisfait pleinement au cahier des charges, c-à-d 
SCORE : 91816


 La durée de l'opération est un attribut qui peut se spécifier par toute expression mathématique utilisant des constantes, variables, paramètres réglables, probabilités 
SCORE : 91811


 Ceci oblige malheureusement à redéfinir les primitives d’accès et l’entité gérant l’élément de relation pour chaque type d’élément de relation 
SCORE : 91776


 Pour des raisons d’optimisation de la structure, seuls les champs nonterminaux sont placés dans le record (pour l’exemple, A est considéré ici comme symbole terminal) 
SCORE : 91767


 En particulier, il faut constater l’aptitude du modèle à représenter des systèmes ayant une structure générique (vecteurs de ports, de fonctions, d’activités) 
SCORE : 91652


 Les mots en italiques représentent les noms de règles de génération de la structure de données de sortie appelées lors de l’analyse du modèle source 
SCORE : 91628


 2 temps sont aussi à considérer pour son utilisation ceci dans le cas de place disponible pour le dépôt, ou information disponible pour le retrait 
SCORE : 91626


 Le temps de mise sur le marché (timeto- market), qui est un facteur clef pour le succès d’un produit, doit également être le plus court possible 
SCORE : 91621


 La mise en oeuvre d’un outil CASHE (Computer Aided Software Hardware Engineering) pour une méthodologie à l’aide de la technologie méta-Case est normalement réduite à la déclaration du formalisme de ses modèles 
SCORE : 91617


 On montre aussi que les 2 structures peuvent être combinées en une seule pour décrire une solution complète avec son implantation 
SCORE : 91560


 Nous allons donc aussi nous intéresser aux techniques de génération de code et à la modélisation des performances dynamiques des systèmes 
SCORE : 91533


 On ne sait pas si la tâche est bloquée en attente d’un message, prête à être exécutée mais en attente du processeur ou bien inactive 
SCORE : 91520


 On notera bien entendu l’importance de la phase de partitionnement matériel/ logiciel et d’allocation pour aboutir aux spécifications des 2 parties 
SCORE : 91501


 Le noeud de ressource (réservoir de jeton) permet de modéliser une ressource passive telle qu’une mémoire, un bus, etc 
SCORE : 91467


E 149 La démarche de génération peut être la suivante: 1- Copie de la structure complète du template comme structure du programme de sortie 
SCORE : 91458


 Pour que l’outil soit indépendant du système de fichiers, le chemin est défini à l’aide d’une variable prédéfinie FileSeparator qui représente le caractère de séparation d’un "path" 
SCORE : 91423


 Le modèle est spécifié graphiquement par une hiérarchie de graphes composés d’un ensemble de noeuds auquels on peut éventuellement associer une forme graphique et des méthodes écrites en C 
SCORE : 91350


 Formulé sous sa forme la plus simple (mono-processeur et tâches périodiques), le problème se résoud souvent par l’algorithme de base RMS "Rate Monotonic Scheduling" 
SCORE : 91287


 -B- UNE DEMARCHE GLOBALEMENT DESCENDANTE POUR LA CONCEPTION Chaque étape de la méthodologie permet de passer d'un niveau de description au niveau plus détaillé suivant en enrichissant la solution d'une composante supplémentaire 
SCORE : 91273


 -B- UNE DEMARCHE GLOBALEMENT DESCENDANTE POUR LA CONCEPTION Chaque étape de la méthodologie permet de passer d'un niveau de description au niveau plus détaillé suivant en enrichissant la solution d'une composante supplémentaire 
SCORE : 91273


 Pour la modélisation des performances des systèmes, différentes classes de modèles de performances des systèmes et leurs outils les plus représentatifs sont décrits et analysés 
SCORE : 91232


 De sorte que si un disque est libre, pour la fonction l’accès au disque ne dure que la valeur de ‘Read, mais le disque n’est libéré qu’après ‘Read+‘Use 
SCORE : 91008


4 PARCOURS ET ANALYSE DU MODELE MCSE Le modèle de performance de MCSE se compose de deux vues complémentaires: la vue structurelle (dimension organisationnelle) et la vue comportementale (dimension temporelle) 
SCORE : 91001


 3 procédures sont à la disposition des fonctions pour gérer la ressource d’exécution, ce qui se traduit par la modification de sa variable State (qui correspond à States[i] à l’extérieur): - InactiveTask(state: DefState) 
SCORE : 90947


 Il faut noter une difficulté rencontrée avec VHDL ou avec le simulateur ModelTech qui nous a contraint d’utiliser une instruction d’assignation concurrente 
SCORE : 90883


 Généralement on n’utilisera pas toutes les constructions du langage cible et on peut évidemment se contenter de définir la syntaxe de celles qui nous seront utiles 
SCORE : 90870


 Chaque composant servant de modèle est déclaré avec son nom de modèle (Regul), ses entrées et sorties formelles (P, C, S), sa description interne 
SCORE : 90865


 Les noms utilisés pour les entrées et sorties de l’instance correspondent aux connexions réelles dans la structure englobante (Param, Cons[1:n], Sv[1:n] ou bien S1, S2, C1, C2) 
SCORE : 90792


 La priorité de l’accès devient locale au niveau mais comme il ne tient pas compte de l’attribut ‘Concurrency ceci n’a aucune importance 
SCORE : 90762


 -A- Description du modèle MCSE Ce modèle contient la description d’un système décrit sous la forme d’une structure qui elle même contient 2 ports et une fonction 
SCORE : 90730


4 Bilan La présentation faite dans ce paragraphe montre clairement que la démarche de co-design n’est pas une activité isolée de la conception de l’ensemble du système 
SCORE : 90718


 - la sauvegarde et restitution d’une structure de données sur disque sans contrainte de format, ce qui se résoud bien avec le concept d’objets persistants 
SCORE : 90695


 C'est ici qu'interviennent les contraintes technologiques, les contraintes d’autonomie, les contraintes géographiques, les contraintes d'interface, les contraintes de temps, etc 
SCORE : 90666


 •Ce sont les méthodes utilisées dans le développement d’applications temps-réel qui se rapprochent le plus de celles qu’on utilise pour le développement matériel (hardware) 
SCORE : 90631


 SYSTEME SOUS-ENSEMBLE MATERIEL LOGICIEL CARTE , COMPOSANT TACHE , MODULE MCSE Spécification conception fonctionnelle définition réalisation Sous- Assemblage Test Validation Spécification Spécifi- Spécifi- Spécifi- Spécificonception fonctionnelle conception conception conception fonctionconception préliminaire définition réalisation Intégration Test Définition Réalisation Définition Réalisation comp 
SCORE : 90625


 SYSTEME SOUS-ENSEMBLE MATERIEL LOGICIEL CARTE , COMPOSANT TACHE , MODULE MCSE Spécification conception fonctionnelle définition réalisation Sous- Assemblage Test Validation Spécification Spécifi- Spécifi- Spécifi- Spécificonception fonctionnelle conception conception conception fonctionconception préliminaire définition réalisation Intégration Test Définition Réalisation Définition Réalisation comp 
SCORE : 90625


 Une bonne conception fonctionnelle nécessite de chercher d’abord les variables internes caractéristiques indispensables pour déterminer les fonctions qui l’exploitent 
SCORE : 90617


 - Le générateur n’a pas à gérer les activités concurrentes et la limitation du degré de concurrence d’une ressource ainsi que leurs problèmes sous-jacents 
SCORE : 90587


9 CONCLUSIONS Ce chapitre a présenté l'implantation du générateur de code permettant de transcrire la description textuelle MCSE d'un système en une description VHDL comportementale 
SCORE : 90571


 Le protocole d’envoi de message peut être du type port à N places ("loosely coupled") ou du type rendez-vous ("highly coupled") 
SCORE : 90538


 Le modèle MCSE, déjà bien adapté à la conception des systèmes temps réel [CALVEZ- 90] et des Asics [CALVEZ-93a], a donc été enrichi par un modèle de performance 
SCORE : 90535


5 TRANSCRIPTION DU MODELE STRUCTUREL Le modèle structurel permet de représenter la solution d’une application selon un ensemble de fonctions et de relations entre celles-ci 
SCORE : 90483


 Ces systèmes dits dédiés sont généralement conçus pour répondre à un besoin spécifique et entrent dans la catégorie des systèmes électroniques embarqués et temps-réels (Real Time Embedded Systems) 
SCORE : 90483


 Le temps d’exécution choisi pour l’opération élémentaire SToken est de 20 s ce qui correspond au temps nécessaire au processeur pour recevoir et traiter une interruption 
SCORE : 90450


 Nous considérons qu’un modèle est de qualité s’il répond aux différents critères ci-dessous qui sont donnés sans classification d’importance 
SCORE : 90399


 Elle conduit à rechercher une solution pour le système sous la forme d'un ensemble de fonctions et de relations entre celles-ci 
SCORE : 90376


 Se déduisent alors les fonctions qui exploitent et assurent la mise à jour de ces variables ainsi que le comportement de chaque fonction 
SCORE : 90303


 Se déduisent alors les fonctions qui exploitent et assurent la mise à jour de ces variables ainsi que le comportement de chaque fonction 
SCORE : 90303


 Pour la donnée partagée, il peut s'agir d'une lecture (consultation) ou d'une évolution souhaitée après une modification faite par une autre activité 
SCORE : 90286


 Pour la tolérance aux fautes, un concepteur peut saisir un modèle de performance qui représente un système avec détection et correction d’erreur 
SCORE : 90245


 L’analyse temporelle nécessite une description sous la forme de diagramme de flot de données et/ou flot de contrôle Chapitre 2 14 M 
SCORE : 90228


 En effet, une fonction décrite sous forme comportementale peut aussi par raffinement se décrire par une organisation interne 
SCORE : 90204


E 3 1 PRESENTATION GENERALE DE LA METHODOLOGIE Cette première partie rappelle les éléments caractéristiques et la démarche de la méthodologie MCSE (Méthodologie pour la Conception des Systèmes Electroniques) décrits dans l’ouvrage "Spécification et conception des systèmes, une Méthodologie MCSE" de l’auteur [CALVEZ-90] 
SCORE : 90169


E 3 1 PRESENTATION GENERALE DE LA METHODOLOGIE Cette première partie rappelle les éléments caractéristiques et la démarche de la méthodologie MCSE (Méthodologie pour la Conception des Systèmes Electroniques) décrits dans l’ouvrage "Spécification et conception des systèmes, une Méthodologie MCSE" de l’auteur [CALVEZ-90] 
SCORE : 90169


 Pour éviter un défaut de séquence au début par suite de la latence des disques, cette fonction se charge de lire A blocs en anticipation et les stocke dans Buffer 
SCORE : 90162


 Pour la phase de spécification, un multi-formalisme s’impose face à la diversité des informations concernées qui sont de nature fonctionnelles et non fonctionnelles 
SCORE : 90161


 Le programme proposé des travaux était le suivant: 1- Montrer l’adéquation de la méthodologie MCSE pour la spécification, la conception et l’évaluation des performances d’un système complexe 
SCORE : 90106


 La richesse des classes prédéfinies facilite en autre la génération d’interfaces utilisateurs conviviales (menus, boutons, boite de dialogue, ScrollBar, animations, gestion des événements, etc), Le Méta-Générateur MetaGen M 
SCORE : 90098


 Pour éviter ce type de problème, il faut s’arranger pour que tous les éléments d’un choix multiple soient disjoints: primary::=name_without_literal_string  
SCORE : 90093


19-a, on peut également obtenir à partir de la trace générée: - le nombre de disques utilisés (NbDiskUsed), - le taux d’occupation d’un disque 
SCORE : 90050


 Ce modèle de description permet de représenter l’application en terme d’entités, leurs attributs et les relations (ou associations) entre ces entités 
SCORE : 90039


 -D- Analyse des résultats L’outil permet d’animer les modèles graphiques, ce qui permet d’avoir une vue globale des ressources matérielles critiques 
SCORE : 89976


 Les opérateurs de composition sont le ET séquentiel (&) qui impose une relation d’ordre strict d’apparition, le ET logique (^) sans ordre d’apparition, le OU logique ( 
SCORE : 89964


 Il est possible de spécifier de l’extérieur de l’outil les transformations à faire sur la structure de donnée interne pour obtenir le résultat escompté en sortie 
SCORE : 89917


 Une des librairies dédiée à l’analyse de l’architecture des systèmes regroupe des noeuds pour modéliser: - la gestion de ressources: service, ressource, retards, allocation et désallocation, etc 
SCORE : 89865


E forme d’une concurrence et le OU logique sous la forme d’une attente conditionnelle comme le montre la figure ci-dessous 
SCORE : 89862


 Ces règles de transcription ont été validées à l’aide de deux exemples: le serveur vidéo et un système de communication réparti 
SCORE : 89843


 Ces parties concernent ici l’interfaçage de la mémoire centrale implantant les buffers d’anticipation de taille dynamique avec les disques et les cartes contrôleur ATM 
SCORE : 89832


 Ceci oblige le développeur de Script à maîtriser parfaitement la traçabilité des variables qu’il utilise et à empiler et désempiler explicitement les variables utilisées par des règles récursives 
SCORE : 89808


 Un générateur est alors le résultat de l’écriture d’un script qui est interprété ou transcrit en code JAVA par un programme nommé MetaGen et décrit dans le chapitre 5 
SCORE : 89780


 - la définition d’une méthode d’évaluation des performances dynamiques d’un système basée sur une transcription en VHDL du modèle de performance et l’utilisation d’un simulateur VHDL du commerce 
SCORE : 89776


1 Les langages dédiés à la manipulation de texte Ces langages interprétés (Perl et awk par exemple) sont utilisés pour extraire des informations d’un texte source et les reformatter 
SCORE : 89760


 Mais le modèle comporte aussi des blocs d’analyse de fautes (13), de collecte d’informations (4), et des blocs hybrides (7) qui permettent de connecter au modèle des descriptions comportementales (modèle interprété) 
SCORE : 89711


2 Le partitionnement automatique Le problème du partitionnement est souvent présenté comme un problème NP complexe dépendant d’un grand nombre de paramètres 
SCORE : 89693


 Aussi, l’objectif précis de ce chapitre est de détailler les règles de traduction développées pour aboutir à un modèle VHDL simulable capable de produire les résultats de performances souhaités 
SCORE : 89622


 (0) -E- Attributs pour les liens de connexion Des attributs peuvent aussi être ajoutés sur les liens liant les composants aux éléments de relations 
SCORE : 89513


 Maintenant que les règles de transcription ont été décrites, nous devons nous charger de les implanter dans un générateur automatique de code 
SCORE : 89456


 Elle peut alors s’exprimer comme une opération possédant un attribut de temps représentant une vue macroscopique de l’activité 
SCORE : 89447


 Les opérateurs de composition d’actions sont la séquence qui fixe l’ordre de génération, la simultanéité, l’alternative qui discerne une des sorties en fonction d’une condition ou d’une Chapitre 6 198 M 
SCORE : 89438


 Nous présentons donc les résultats de performance obtenus par transcription du modèle de performance en un modèle VHDL comportemental, puis par simulation du programme VHDL obtenu 
SCORE : 89406


 -C- Actions Les actions concernent la génération d'information ou d'événements vers les sorties de la fonction ou vers d’autres activités internes 
SCORE : 89403


 Ce travail correspond aux deux premières étapes de la méthodologie MCSE: l’étape de spécification et l’étape de conception fonctionnelle 
SCORE : 89367


 En effet, comme la concurrence peut-être multiple, il ne faut pas que l’attente sur UseTime bloque le process (l’instruction Wait For est donc à proscrire) 
SCORE : 89356


 Une attente conditionnelle est utilisée pour attendre l’occurrence du jeton (Token) provenant de la carte voisine ou bien la requête du jeton par la fonction EmissionMess (ReqEmis) 
SCORE : 89329


Informations complémentaires, en particulier la description du test final Il est conseillé de structurer le document de spécification de la manière présentée ci-dessus 
SCORE : 89264


 Pour obtenir cette valeur, on peut aussi considérer le protocole de communication de transbus au niveau bit: 11 bits x 50 ns = 0 
SCORE : 89242


 Le comportement pour une donnée permet de modéliser l’exploitation d’une donnée complexe, y compris sa lecture et écriture sur un support de masse 
SCORE : 89184


 La destruction de toutes les structures d’une même grammaire peut conduire à la destruction de la grammaire de manière à réduire la place mémoire 
SCORE : 89177


 Cet état représente un temps d’utilisation de la variable partagée qui est passif par rapport à la ressource d’exécution des fonctions accédant à cette variable 
SCORE : 89138


 Le mot générique veut dire qu’un indice est défini par un nom symbolique et la valeur est fixée par un objet englobant 
SCORE : 89095


 Si on part du niveau le plus abstrait pour descendre jusqu’au niveau de la réalisation, on trouve: - le niveau Cahier des charges, qui correspond à l’expression du besoin 
SCORE : 89069


 Si on part du niveau le plus abstrait pour descendre jusqu’au niveau de la réalisation, on trouve: - le niveau Cahier des charges, qui correspond à l’expression du besoin 
SCORE : 89069


 Comme le modèle MCSE servira d'entrée à d'autres générateurs que le générateur VHDL, nous avons donc détaillé dans ce chapitre la partie analyse du modèle MCSE 
SCORE : 89062


 La progression est donc globalement descendante puisqu'elle part du problème posé jusqu'à aboutir à une réalisation opérationnelle 
SCORE : 89020


 La progression est donc globalement descendante puisqu'elle part du problème posé jusqu'à aboutir à une réalisation opérationnelle 
SCORE : 89020


 Nous avons la confirmation que la valeur de A moyen est de 4 (donc 4 places par séquence), ce qui permet de calculer la taille de la mémoire interne nécessaire 
SCORE : 89009


 Le comportement sera obtenu par interprétation de la structure de données ScriptDs qui est le résultat de son chargement par l’analyseur syntaxique approprié 
SCORE : 88998


 Analyse environnement Comportement des entités Description fonctionnelle Délimitation des entrées/sorties Comportement entités + système Spécifications opératoires Spécifications technologiques Modélisation de l’environnement Elaboration des spécifications CAHIER DES CHA R GES Spécifications fonctionnelles Fonctions SPECIFICATIONS 1 - PRESENTATION GENERALE DE LA METHODOLOGIE M 
SCORE : 88989


 Analyse environnement Comportement des entités Description fonctionnelle Délimitation des entrées/sorties Comportement entités + système Spécifications opératoires Spécifications technologiques Modélisation de l’environnement Elaboration des spécifications CAHIER DES CHA R GES Spécifications fonctionnelles Fonctions SPECIFICATIONS 1 - PRESENTATION GENERALE DE LA METHODOLOGIE M 
SCORE : 88989


 Les travaux présentés dans ce manuscrit concernent surtout les systèmes de contrôle/ commande, les systèmes de communications et partiellement les systèmes de traitement 
SCORE : 88968


4 Conditions d’évolution et actions Un modèle doit être capable de représenter des dépendances temporelles autres que la fin d'une opération ou d’une activité 
SCORE : 88950


 Ce chapitre contient également un état de l’art sur les techniques de partitionnement matériel/logiciel, les techniques de cosimulation et la modélisation des performances 
SCORE : 88839


 Cette méthodologie repose sur l’association du modèle de "StateChart" pour couvrir les phases de spécification et conception fonctionnelle et du modèle UVa pour la conception architecturale et l’évaluation des performances 
SCORE : 88780


 Le temps de latence des messages croit avec le nombre n de producteurs et consommateurs car ils se partagent tous le même processeur 
SCORE : 88770


E Une large expérimentation de la méthodologie a montré l'importance du modèle, puis l'importance des règles et conseils qui engendrent chez les concepteurs des solutions de qualité 
SCORE : 88767


E Une large expérimentation de la méthodologie a montré l'importance du modèle, puis l'importance des règles et conseils qui engendrent chez les concepteurs des solutions de qualité 
SCORE : 88767


$Pt[:]&A1 ET sans ordre Pt[1:n] Ordre strict L’un Sélection & ^ OR S E1 E2 & E1 a) b) c) d) Idem à b) mais en utilisant la technique de l’attente conditionnelle multiple Sélection par l’indice dans le vecteur E2 OP: PROCESS  
SCORE : 88759


 <EndComponent> Intéressons-nous à sa représentation possible sous la forme d’une structure de données en exploitant la même notation que précédemment 
SCORE : 88738


 Ces attributs se traduisent alors par des champs de données supplémentaires exploitables par toute fonction, activité ou opération pouvant y accéder 
SCORE : 88704


 L’usager peut contrôler la visualisation ou l’enregistrement par fragment (par exemple pause entre 2 fragments mais pas durant un fragment) 
SCORE : 88698


 Il s’agit donc de tirer des règles générales de transformations texte <-> structure à partir de l’exemple de présentation du paragraphe précédent 
SCORE : 88634


4 GENERATION DE CODE Compte tenu de la solution décrite dans le paragraphe précédent, le problème de la co-simulation devient un problème de génération de code 
SCORE : 88591


 Il faut déterminer la taille du vecteur (pour les ports et les événements, il faut déclarer un vecteur d’entrée et un vecteur de sortie) 
SCORE : 88579


E Comme un script peut contenir un ou plusieurs appels récursifs directs ou indirects, nous sommes obligés de définir une méthode pour chaque règle 
SCORE : 88570


 Il exploite en entrée tout texte MCSE pour l’analyser avec l’aide de la structure MCSEGrammarDS et de la table des symboles associée de la grammaire du modèle MCSE 
SCORE : 88566


 Cette approche est tout à fait justifiée pour les applications temps-réel dédiées où le développement est assuré une fois pour toutes 
SCORE : 88504


 Cette approche est tout à fait justifiée pour les applications temps-réel dédiées où le développement est assuré une fois pour toutes 
SCORE : 88504


 Elle repose sur la transcription du modèle de performance en un programme multi-tâches C++ et sur l’utilisation du noyau multi-tâches de Windows95/NT pour son exécution 
SCORE : 88467


 Cette différence de temps est due: - aux différences de complexité des modèles sources, - aux différences de complexité des modèles de sortie générés 
SCORE : 88452


 Pour cela, comme l’instruction "goto" n’existe pas en VHDL, une solution consiste à englober le code dans une boucle et on utilise la construction VHDL Exit pour sortir de cette boucle 
SCORE : 88448


 Avant et après synthèse, une vérification fonctionnelle détaillée (co-verification) est effectuée généralement par une technique de co-simulation 
SCORE : 88447


9 EXEMPLE DE VALIDATION L’exemple de validation considéré ici est le serveur vidéo simplifié dont le modèle de performance a été présenté dans le chapitre 3 
SCORE : 88439


 Toutefois, il est aussi possible d'ajouter dans le modèle comportemental un temps ‘Write ou ‘Read aux liens d'accès pour surcharger celui de l’élément de relation 
SCORE : 88419


6 Bilan sur l’évaluation des performances du système de communication Dans le cas A (zone 2 et 3 en matériel), le débit maximum du bus égal à 11 
SCORE : 88344


 Pour générer la MCSEGrammarDs et la table des symboles correspondante, mais aussi le programme source MCSE-Parser, il faut disposer d’un autre programme 
SCORE : 88321


 Le modèle au niveau système doit permettre d’exprimer ce parallélisme et les dépendances temporelles avec des mécanismes de synchronisation et de communication 
SCORE : 88316


 Parmi ces classes, la classe McseDs se distingue par le fait qu’elle possède des attributs (linkUp, linkDown) et des méthodes spécifiques à l’exploitation du modèle MCSE 
SCORE : 88313


 Un élément de relation est transcrit par une entité dont les paramètres génériques correspondent aux attributs de l’élément de relation 
SCORE : 88281


 Il est souhaitable que le format des informations échangées entre la partie analyse et génération soit complètement indépendant des grammaires utilisées 
SCORE : 88251


 Dans la partie déclaration, il y a: ScriptName Constants Script 0:n ConsValue ConstDef Const Name VarType VarDef Var Name Variables Operations 0:n OpDef OpName *Operations CompoundOp OpType Arg1 1:1 ElementaryOp Arg2 Arg3 0:1 Configuration 0:n Name CommaName , Name 0:1 ImportOp Name Configuration Importation 0:1 0:1 0:n Constants Variables :: { } Le Méta-Générateur MetaGen M 
SCORE : 88220


 -A- Expressions arithmétiques Considérons le cas des expressions arithmétiques qui sont décrites directement ou indirectement par une règle récursive telle que par exemple: expr ::= expr + expr  
SCORE : 88186


 Tout comme pour la tolérance aux fautes, le modèle doit faciliter la création, la détection et la correction d’un dysfonctionnement d’un constituant de l’architecture matérielle 
SCORE : 88128


 Or, le formalisme BNF spécifie une grammaire uniquement à l’aide de quatre éléments de base que sont: - la séquence d’éléments (Y := A B C), - l’optionel (Y := [ A ]), - l’alternative (Y:= A  
SCORE : 88119


 Il peut aussi s’agir de l’emploi d’un autre script qui par son exécution engendre le script de production du code 
SCORE : 88095


 Dans notre cas, à chaque réduction de règle, il y a mise à jour de l’arbre du programme qui contiendra au final le code analysé 
SCORE : 88083


 Lors d’une nouvelle exécution, les classes mémorisées qui n’auront pas été volontairement effacées par l’utilisateur ne seront pas rechargées d’où un gain de temps non négligeable 
SCORE : 88082


 Le temps d’accès aux disques (attribut ‘Use de la variable partagée) a d’abord été fixé à 30 ms 
SCORE : 88011


4 que la structure de données d’un modèle MCSE est un graphe particulier dans lequel il existe une et une seule suite d’arêtes permettant de relier tout couple de sommets 
SCORE : 87981


 Or les techniques de partitionnement automatique considèrent le système dans son ensemble et n’utilise pas le fait que le concepteur peut fournir un Chapitre 2 24 M 
SCORE : 87960


 Nous avons alors essayé d’extrapoler au mieux les points par une loi qui ne provoquait pas de rupture de séquence en simulation comme le montre la figure 7 
SCORE : 87956


 Ces deux concepts et le nouveau principe de développement de la plate-forme d’outils pour MCSE sont détaillés dans le chapitre 5 sur le méta-générateur 
SCORE : 87904


 Pour faciliter la lisibilité et la compréhension du programme, il est préférable de définir une règle de script pour l’analyse de chaque type de noeud 
SCORE : 87902


 Graphiquement, on ne peut pas parler de flot de données puisque l’attente et la génération de messages se font par des instructions de code saisies manuellement 
SCORE : 87898


 Un autre aspect intéressant est la possibilité de construire un script (c’est-à-dire sa structure de données) par un autre programme 
SCORE : 87870


 Le modèle d’architecture permet de modéliser des processeurs matériels (ASIC et FPGA) mais ne permet pas d’allouer des éléments du modèle logiciel sur ces processeurs 
SCORE : 87829


 Pour tester efficacement l’intérêt de notre solution, ce générateur est développé par des personnes nouvelles au projet (utilisation de candide pour ne pas biaiser les résultats de cette expérience) 
SCORE : 87820


 Nous pensons également qu’il est indispensable d’inclure le concepteur dans la boucle de recherche d’un partitionnement optimum pour le responsabiliser et profiter de son expérience 
SCORE : 87786


E L’implantation VHDL pour une variable partagée pose le problème de la transcription des temps UseTime (état WaitUseTime) et de la décrémentation de la variable NbUse après ce temps 
SCORE : 87776


 0 5 10 15 20 25 0 10 20 30 40 50 60 70 "DisksConcurrency" "TransmissionRate" "WatchingUsers" Temps (s) Cmd BlockIn BlockOut[1: OrderRec ReadMovie Supervision TV set[1 Processor P P‘Concurrency=M 
SCORE : 87767


 Une activité non-décomposée est assimilée à une opération, tout en pouvant être très différente pour sa signification en modélisation 
SCORE : 87704


 - RelationLinks met à jour une association bidirectionnelle entre l’élément de relation et les interfaces de composants qui lui sont directement ou indirectement rattachées 
SCORE : 87689


 Une fois saisi, le Script est interprété ou transcrit en code JAVA par un programme dont l’implantation en Java est décrite à l’aide du modèle statique de la méthode OMT-UML 
SCORE : 87620


 La destruction d’un seul noeud d’une structure plus globale n’a pas de sens car alors les noeuds fils (ceux référencés) ne sont plus référencés et donc inutilisables 
SCORE : 87585


 Le processeur logiciel qui est l’élément clef de la co-simulation est souvent représenté sous la forme d’une machine virtuelle 
SCORE : 87579


 A ce stade, les différences de culture et de jargon entre le monde du génie logiciel et du génie matériel ont nécessité des efforts d’uniformisation de la terminologie [RTWG-95] 
SCORE : 87534


 Pour cela, les attributs sont définis à l’intérieur du composant et ceci en utilisant le nom de l’entrée, de la sortie ou de l’entrée/sortie 
SCORE : 87509


 Avec le modèle de performance de MCSE qui nous présentons en détail dans le chapitre 3, le concepteur n’a pas besoin de définir un modèle différent pour chaque alternative du partitionnement 
SCORE : 87482


 L’utilisation conjointe de ces différents outils permet de couvrir la plupart des phases de conception de la spécification à la réalisation 
SCORE : 87460


 Il s’agit de modifier la valeur n, le nom du block, de créer ses entrées et sorties conformément à la déclaration de l’interface de Emission dans le modèle MCSE 
SCORE : 87428


 Elle ne facilitait pas la maintenance et la mise à jour des générateurs en fonction des modifications de la grammaire de la spécification d’entrée ou de celles des règles de transcription 
SCORE : 87400


 Lorsque le nombre de constituants internes actifs est plus élevé que le degré de parallélisme, il est alors nécessaire de spécifier la politique de déroulement 
SCORE : 87362


 Au delà des techniques de modélisation citées ci-dessus, le concepteur dispose d’outils informatiques pour effectuer concrètement le travail de modélisation 
SCORE : 87331


 Pour qu’il n’y ait pas de rupture de séquences en fonction du nombre d’utilisateurs, la valeur minimale de l’attribut ‘Power (‘Concurrency=1) est donnée par la courbe suivante 
SCORE : 87192


 Représentation textuelle partielle du système sauvegarde sous forme textuelle chargement de la structure de données par l’analyseur syntaxique Le Générateur VHDL M 
SCORE : 87180


 Pour les interfaces physiques, le couplage de chaque usager se fait par un réseau de faible débit et un réseau de haut débit 
SCORE : 87172


 Dans la solution b, tous les types (attributs) associés aux ports de communication du système sont regroupés dans un seul record (DefInformation) 
SCORE : 87121


 Un modèle de bus simule les cycles requis pour une transaction sur le bus (accès en lecture ou écriture) mais ne modélise pas les actions d’une instruction 
SCORE : 87097


 Cette position est dépendante du type de noeud, la structure du type de noeud étant définie dans la structure de données de la grammaire GrammarDS 
SCORE : 87039


 -D- Modèle générique et paramétrable Pour dimensionner une architecture durant la conception, le concepteur doit pouvoir définir et modifier des paramètres dans le modèle 
SCORE : 87005


 Durant cette étape, le concepteur détermine la liste des fonctions du système et le comportement du système (StateChart, FSM ou algorithme séquentiel) pour ces fonctions 
SCORE : 87004


E 213 aléatoire et possédant une taille en nombre de fragments elle aussi aléatoire qui servira à définir la durée de la séquence 
SCORE : 86971


 Il est basé sur l’utilisation d’un signal à trois états dont la valeur courante est gérée avec une fonction de résolution 
SCORE : 86961


 La description des règles de transcription se poursuit avec la définition des règles concernant la transcription de la composante structurelle du modèle de performance 
SCORE : 86943


 A noter que dans le cas d’une récursivité, la structure de données est arrêtée dès la rencontre d’un symbole non-terminal déjà défini au préalable 
SCORE : 86937


 Cette approche a entraîné un certain cloisonnement et une absence de dialogue entre les concepteurs des deux catégories professionnelles de culture différente: les concepteurs d’architectures matérielles et les informaticiens 
SCORE : 86907


 L’effort est encore plus important quand la génération de code inclut également une phase de synthèse logicielle ou matérielle 
SCORE : 86881


 Les choix du concepteur doivent satisfaire à un nombre important de critères (performances, flexibilité, testabilité, reutilisabilité, sécurité, etc) 
SCORE : 86867


E de la technologie d’un système expert dans lequel les règles de transcriptions constituent une base des connaissances et l’analyse du modèle MCSE fournit les faits qui sont introduits dans un moteur d’inférence avec chaînage arrière 
SCORE : 86848


 Par exemple, le langage de définition de langage Backus Naur Form (BNF) est un méta-modèle puisqu’il permet de spécifier des grammaires qui constituent déjà un modèle de texte 
SCORE : 86845


 Nous commençons donc ce chapitre en présentant la spécification d’entrée de la grammaire VHDL qui sert à produire un analyseur syntaxique pour le langage VHDL 
SCORE : 86812


6 STRUCTURE INTERNE GENERIQUE DE CHAQUE OUTIL La technique de chargement du modèle MCSE étant maîtrisée, il s’agit de compléter l’organisation autour de la structure de données McseDs nécessaire pour chaque outil 
SCORE : 86807


 Il faut alors retrouver l’attribut ‘Time pour une évaluation des performances ou inclure le code de l’algorithme pour une simulation interprétée ou une synthèse 
SCORE : 86801


 Il peut s’agir d’une désignation statique (‘Path=me‘Index) ou d’une désignation dynamique (‘Path=‘Id) ce qui signifie l’aiguillage vers le destinataire désigné dans la transaction ou message 
SCORE : 86777


3 Composition d’opérations et d’activités L’expression d’un comportement résulte de l'association d'opérations et d'activités en respectant des règles de bonne structuration 
SCORE : 86772


 Aussi, une activité peut se définir par un modèle possédant des paramètres qui définissent les liens utilisables en entrée et en sortie pour le flot de données 
SCORE : 86747


 La continuité du modèle facilite aussi la conception sans erreur (pas de déformation ou perte d’information liées à une transcription de modèle) et améliore la traçabilité 
SCORE : 86727


 La partie Analyse est la partie dans laquelle on trouve le plus de similitudes entre des générateurs de code utilisant le même modèle source (modèle MCSE par exemple) 
SCORE : 86714


 } L’instruction prédéfinie FindActivityDescription recherche la description interne d’une activité dans l’ensemble BehaviorDefinition de la description comportementale de l’élément actif concerné 
SCORE : 86679


 Un analyseur syntaxique est une fonction chargée de vérifier qu’un texte donné en entrée respecte une grammaire donnée 
SCORE : 86666


 La spécification du logiciel s’obtient en définissant le schéma d’implantation du logiciel pour chaque processeur programmable de l’architecture matérielle 
SCORE : 86586


 Il peut s’agir d’un programme interactif permettant au concepteur de spécifier ce qu’il désigne comme solution en sortie 
SCORE : 86460


 Ces modèles décrivent un comportement fonctionnel représenté le plus souvent sous la forme d’un flot de données et d’un flot de contrôle 
SCORE : 86438


E 9 Dans le projet RASSP, la méthodologie de co-design mise en oeuvre repose sur l’utilisation successive de plusieurs outils et modèles 
SCORE : 86426


 Si l’on ne tient pas compte de l’attribut ‘Concurrency de l’élément de relation (concurrence infinie), cette implantation est possible et permet de respecter la hiérarchie du modèle MCSE 
SCORE : 86398


 La distinction est intéressante à faire uniquement lorsqu’il s’agit de faire apparaître les interfaces entre le fonctionnel et l’exécutif 
SCORE : 86383


 Pour le niveau tâche (coarse-grain partitioning), l’unité d’allocation est la fonction qui est considérée indivisible et dont le comportement n’est pas obligatoirement séquentiel 
SCORE : 86370


 Cette solution n’est pas limitée par la complexité du système et permet d’extraire un ensemble de résultats de performances plus riche que les approches analytiques 
SCORE : 86337


 Cette conversion repose sur la dualité qui existe entre opérateurs de composition d’une structure de données et structures de contrôle d’un programme 
SCORE : 86315


 La fonction F2 est décrite comme l’exécution de l’opération Op0 à partir de l’instant initial puis l’exécution simultanée des activités A1 et A2 
SCORE : 86314


 L’ordonnanceur ne peut rendre actif une fonction qu’il contrôle que lorsqu’il est lui-même dans l’état actif 
SCORE : 86283


 -C- Modèle pour SupervisionUsager Chaque message CmdUsager[] est interprété puis transmis vers la lecture ou l’enregistrement d’un canal tiré d’une manière aléatoire (Proba sur la branche) 
SCORE : 86281


 Cette architecture est intéressante pour son aspect générique mais elle correspond de moins en moins à la réalité industrielle 
SCORE : 86200


 Envoi génère selon un intervalle aléatoire défini par le temps Tcu, un message destiné à un usager tiré d’une manière NbDisques = (NbUtilisateurs × DebitMoy × TaccDiskMoy ) ⁄ (TailleFragment) Emission[1:n] Usagers Réception[1:n] Tcu‘Time = Uniform(Tmin, Tmax) 
SCORE : 86182


 De plus, il est intéressant d’ajouter 2 types de politiques en cas de concurrence d’accès: selon la priorité ou selon l’ordre des demandes et donc Fifo 
SCORE : 86155


 L’étape de définition de la réalisation est une étape de réflexion importante qui conduit à réduire l’effort de développement pour en particulier la réalisation 
SCORE : 86066


 L’étape de définition de la réalisation est une étape de réflexion importante qui conduit à réduire l’effort de développement pour en particulier la réalisation 
SCORE : 86066


 De cette manière, il sera possible de représenter des comportements internes plus complexes en exploitant la possibilité d’instanciation dynamique d’activités 
SCORE : 86059


 Ceci impose donc de remplacer le nom dans le script par un index dans la structure de données des variables (voir le paragraphe suivant) 
SCORE : 86024


 De cette façon, il est plus facile de représenter le comportement interne des systèmes complexes en utilisant la possibilité d’instanciation dynamique d’activités 
SCORE : 86019


 Chaque type d’entité possède ses propres attributs (ou propriétés), qui permettent de différencier les entités entre elles 
SCORE : 85962


 On trouve également dans le template des portions de code délimitées par les mots clés NO_PARSE_TEXT et END_NO_PARSE_TEXT et qui sont chargées uniquement sous forme de chaînes de caractères 
SCORE : 85952


 Ainsi, la réalisation débute par la réalisation des plus petits sous-ensembles, puis remonte progressivement par assemblage et intégration de fonctions plus globales 
SCORE : 85935


 Ainsi, la réalisation débute par la réalisation des plus petits sous-ensembles, puis remonte progressivement par assemblage et intégration de fonctions plus globales 
SCORE : 85935


 L'obtention d'un analyseur syntaxique nécessite de saisir la grammaire du langage voulu dans le formalisme du générateur d'analyseur syntaxique 
SCORE : 85847


 Pour l’exploitation correcte de cette opération pour le cas représenté par la figure, il faut que la référence sur SubDs dans Ds doit aussi être supprimée 
SCORE : 85832


 Après allocation, le concepteur doit aussi redessiner un modèle pour faire apparaître explicitement les fonctions d’interfaces matériel/ logiciel 
SCORE : 85737


 Un prototype ou directement le produit est le résultat en sortie de l’activité de co-design et s’intègre alors dans le système global 
SCORE : 85704


 Il s’agit de l’organisation de la structure de données du script pour qu’un programme conçu comme un automate soit efficace 
SCORE : 85569


 Java permet de décrire facilement des architectures client/serveur et autorise l’utilisation de différents protocoles de communication (TCP/IP, UDP, IPX, HTTP, etc) 
SCORE : 85511


 Un consommateur en attente est bloqué tant qu’un producteur n’a pas déposé de message et le producteur n’est libéré que lorsque le consommateur a retiré le message 
SCORE : 85494


 La surcharge de procédure permet de disposer que d’un seul nom de procédure Send ou Receive mais avec un nombre d’arguments différent 
SCORE : 85451


1) est caractérisée par son degré de partage ‘Concurrency et sa capacité en nombre de bits ou de mots ‘Capacity (grandeur statique ou dynamique) 
SCORE : 85446


 Sa valeur est un nombre entier qui peut être: - une suite croissante, - un tirage aléatoire dans un intervalle, - l'indice de l'élément englobant (me‘Index) 
SCORE : 85430


 -E- Destruction d’une structure: DelDs La destruction d’une structure définie par une référence permet de récupérer de la place en mémoire ou permet de simplifier une structure plus globale 
SCORE : 85376


 Les deux modèles précédents s’appuient sur un formalisme mathématique qui peut devenir rapidement complexe lorsque la taille de l’application augmente 
SCORE : 85332


 Par cette approche, la méthodologie fait apparaître une similitude de raisonnement entre la démarche pour obtenir les spécifications et celle pour concevoir 
SCORE : 85288


 Par cette approche, la méthodologie fait apparaître une similitude de raisonnement entre la démarche pour obtenir les spécifications et celle pour concevoir 
SCORE : 85288


6 Transcription des conditions d’activation Des conditions composées ont été prévues dans le modèle de performance pour le contrôle du comportement d’une fonction ou d’une activité 
SCORE : 85232


 Ainsi dans le cas du langage C avec l’emploi d’un exécutif tempsréel, il est utile de pouvoir "fitter" sur plusieurs exécutifs temps réel 
SCORE : 85224


 •La spécification et la conception sont des processus descendants (top-down Design), alors que la réalisation et le test est une démarche ascendante (bottom-up) 
SCORE : 85199


 Le terme non-interprété signifie que seul le comportement ou les dépendances temporelles entre les sorties et les entrées sont observées 
SCORE : 85188


), le temps de latence d’un message, la détection du non respect d’une contrainte temporelle, un temps de retard au démarrage, etc 
SCORE : 85185


 Ainsi, chaque élément du vecteur de port DemD est rattaché à 2*N fonctions d’où la déclaration d’un vecteur de dimension P d’un vecteur de dimension 2*N 
SCORE : 85164


 Pour obtenir une valeur plus précise du paramètre A, il faut modéliser les disques d’une manière plus réaliste ce qui est l’objectif du paragraphe suivant 
SCORE : 85150


 La difficulté repose alors sur la sélection des informations pertinentes pour la génération et le choix de l’emplacement des appels des règles de génération 
SCORE : 85148


 Mais, les délais d’attente ne sont pas préemptibles et il n’y a pas d’ordonnanceur associé à la machine virtuelle, ce qui réduit son intérêt pour les modélisations multi-tâches 
SCORE : 85067


 La difficulté repose ici sur la sélection des informations pertinentes pour la génération et le choix de l’emplacement des appels des règles de génération 
SCORE : 85042


7 5 10 15 20 25 "k=3" "k=6" "k=9" ms n n n bit/s μ Validation de la méthode par des études de cas M 
SCORE : 85031


 L’intérêt du script est que toute la définition de la génération se fait par des règles de production fournies au générateur pour son paramétrage 
SCORE : 85028


 Il peut s’agir aussi d’une architecture distribuée composée d’un réseau de processeurs matériels (ASIC, FPGA) et de processeurs logiciels (microprocesseur, DSP, ASIP) 
SCORE : 84998


 A partir de la délimitation des entrées-sorties, l'objectif est de décomposer le projet en sous-blocs qui seront peu à peu affinés 
SCORE : 84983


 Le raffinement est poursuivi jusqu'à l'obtention de fonctions élémentaires qui peuvent s'exprimer par une description purement séquentielle (un algorithme) 
SCORE : 84980


 - Y ::= { A } veut dire qu’il s’agit d’une suite de longueur quelconque de A, la suite pouvant être vide 
SCORE : 84907


 La fonction de résolution et sa table de transition (utilisation de l’état InactiveReq de poids plus fort que ActiveReq) sont utilisées à profit pour marquer les éléments d’un couple 
SCORE : 84879


 Dans le deuxième cas, toutes les générations vont engendrer une évolution (ceci se traduit par une liste pour son implantation) 
SCORE : 84874


2 SYSTEME DE COMMUNICATION Le second exemple présenté ici a servi d’exemple d’illustration de la démarche de co-design associée à la méthodologie MCSE 
SCORE : 84841


 Les primitives gérant les éléments de relation devront donc être aussi modifiées pour tenir compte de l’état ActivityState=ExitNow 
SCORE : 84785


 Le script doit être construit sur la base des opérations générales de parcours, copie et mise à jour de structures 
SCORE : 84746


 Comme type de données possibles, on distingue : •les relations de synchronisation (ex : un événement) •les relations par partage de variable ( ex 
SCORE : 84711


21 donne le résultat de simulation en montrant: le nombre de disques sollicités, le nombre d’usagers et le débit global de transmission 
SCORE : 84584


 Pour la simultanéité, toutes les opérations sont actives simultanément, l'activité résultante s'achève seulement lorsque toutes les opérations sont achevées 
SCORE : 84542


 Dans ce paragraphe nous montrons que les règles de grammaire peuvent se représenter sur la base d’une méta-structure appelée ici MetaDs 
SCORE : 84495


 Dans les paragraphes suivants et sans entrer dans les détails, nous passons en revue les différentes étapes de la méthodologie en précisant les principes 
SCORE : 84324


 Dans les paragraphes suivants et sans entrer dans les détails, nous passons en revue les différentes étapes de la méthodologie en précisant les principes 
SCORE : 84324


E 55 Pour satisfaire les critères ci-dessus, le modèle de performance doit au minimum avoir les propriétés suivantes: • Modèle hiérarchique 
SCORE : 84322


 Pour compenser leurs limites, l’équipe devait dépenser de plus en plus d’efforts alors que les résultats ne pouvaient être que médiocres, non propriétaires et sans perspective d’évolution 
SCORE : 84214


 -A- Le Modèle fonctionnel Le modèle fonctionnel représente une application selon un ensemble de fonctions qui interagissent à l’aide de trois types de relations 
SCORE : 84210


 Cette facilité sera aussi utilisée pour définir des attributs génériques qui seront fonction d’un ou plusieurs paramètres généraux 
SCORE : 84202


 L’estimation des performances statiques telles que la surface de silicium occupée, la puissance consommée repose sur des techniques de synthèse 
SCORE : 84200


 Pour cela, nous recommandons autant que possible l’emploi des techniques et outils existants et des méthodes d’évaluation analytique 
SCORE : 84137


 Cette solution donne également la possibilité de surcharger chaque méthode ou règle et donc de piloter le script de l’extérieur 
SCORE : 84107


 Peu de techniques de partitionnement ciblent vers une architecture hétérogène composée d’un ensemble de processeurs logiciels (microprocesseur, DSP, ASIP) et matériels (FPGA, ASIC) 
SCORE : 84063


 Si l’analyseur syntaxique est enrichi par des règles de production ou actions, il est alors à même de produire directement quelque chose en sortie 
SCORE : 84009


 L’intervalle de temps entre l’émission successive de deux messages est défini par le temps d’exécution de l’opération élémentaire Tprod 
SCORE : 84001


 -C- La classe LoadSaveManager Cette classe sert à mémoriser les structures de données chargées (fichiers templates) lors de l’exécution d’un script 
SCORE : 83985


 Pour faire évoluer la structure de données, il suffit en effet de modifier la grammaire et de regénérer l’analyseur syntaxique associé 
SCORE : 83936


 En effet, pour faire évoluer la structure de données, il suffit de modifier la grammaire et de regénérer l’analyseur syntaxique associé 
SCORE : 83936


1 La réduction du temps de génération du code VHDL La génération de code VHDL comportemental avec l’outil développé est relativement lente 
SCORE : 83916


 L’approche d’ingénierie système est indispensable pour la conception des systèmes hétérogènes complexes et/ou caractérisés par une sous-traitance importante (avionique, automobile par exemple) 
SCORE : 83872


 Cette définition est importante car elle influe directement sur la rapidité du développement du générateur et sur l’efficacité et la qualité de son implantation 
SCORE : 83861


 Op1 ne s'achève qu'après son temps d'exécution et non pas dès la présence de E (comportement non-préemptif) 
SCORE : 83854


E 89 utilisé (sortie sous forme de chronogrammes) permet aussi de visualiser en détail des résultats de simulation 
SCORE : 83776


 Cette deuxième partie est compressible, et l'objectif des transformations pour obtenir le schéma d'implantation logicielle est de réduire au maximum cette partie 
SCORE : 83764


 Cette deuxième partie est compressible, et l'objectif des transformations pour obtenir le schéma d'implantation logicielle est de réduire au maximum cette partie 
SCORE : 83764


 En ce qui concerne la charge imposée au système, les producteurs envoient en permanence (Tprod’Time=0) des messages de taille aléatoire sur des cartes distantes (Proba=0) d’adresse aléatoire 
SCORE : 83723


 Romdhani [ROMDHANI-96] a utilisé SES/Workbench pour faire une évaluation des performances dynamiques d’un système lors d’un partitionnement matériel/logiciel 
SCORE : 83692


 Par rapport à cette seconde catégorie d’outils spécifiques, l’emploi de VHDL offre un certain nombre d’avantages tels que: - laportabilité 
SCORE : 83687


 Bien entendu, lorsqu’un problème posé est seulement du ressort du co-design, seule la démarche décrite par la figure 2 
SCORE : 83679


 A ce stade, on peut parler de co-simulation parce que le logiciel est simulé en même temps que l’architecture matérielle 
SCORE : 83635


 La réalisation de la partie logicielle et matérielle dépend beaucoup du contexte, des techniques à mettre en oeuvre et des technologies utilisées 
SCORE : 83591


 Nous résumons donc également les caractéristiques essentielles de la technique de génération de code utilisée pour transcrire le modèle de performance en VHDL comportemental 
SCORE : 83526


 Les algorithmes cités précédemment dépendent fortement (coefficient de pondération de la fonction de coût) des caractéristiques de l’architecture cible choisie 
SCORE : 83508


 Il s’agit d’un modèle graphique où l’axe vertical représente l’évolution temporelle et l’axe horizontal le flot de données 
SCORE : 83452


 En effet, une grammaire se décrit elle même selon une grammaire qui est alors appelée méta-grammaire 
SCORE : 83351


 L’emploi de VHDL pour l’évaluation des performances est intéressant pour avoir un meilleur impact sur la communauté des concepteurs d’architectures matérielles habitués à utiliser VHDL 
SCORE : 83322


FM LA MODELISATION •La modélisation est l’opération souvent délicate qui consiste à représenter une réalité physique complexe par des mécanismes plutôt simples 
SCORE : 83321


2, représente le résultat de l’étape de spécification sur l’exemple du serveur vidéo temps-réel présenté dans le chapitre 7 
SCORE : 83266


 Pour cela, il faut éliminer tous les problèmes de répartition géographique et d'interfaces pour se consacrer au seul aspect fonctionnel 
SCORE : 83251


 Pour cela, il faut éliminer tous les problèmes de répartition géographique et d'interfaces pour se consacrer au seul aspect fonctionnel 
SCORE : 83251


 Les activités A1 et A2 sont couplées entre elles par la donnée permanente V3 (notation du modèle de spécification) et sont aussi liées à l’environnement de la fonction par M et Ev 
SCORE : 83232


 C- ETAPE DE DEFINITION DE LA REALISATION Une des tendances naturelles consiste à entreprendre la réalisation rapidement: développement ou choix du matériel très tôt et écriture du logiciel 
SCORE : 83227


 C- ETAPE DE DEFINITION DE LA REALISATION Une des tendances naturelles consiste à entreprendre la réalisation rapidement: développement ou choix du matériel très tôt et écriture du logiciel 
SCORE : 83227


 Dès qu’il en est capable, il satisfait la requête du producteur et positionne le signal Status à ActiveAck (la fonction copiant le signal Status provenant du port égal à ActiveAck) 
SCORE : 83193


 Finalement, lorsque l’appareil est complètement assemblé, la validation consiste à exécuter point par point le protocole d’essai prévu dans le document de spécifications 
SCORE : 83173


 Pour la mise au point, il a la possibilité de placer des points d’arrêt dans le code (instruction BreakPoint) ou de suspendre l’interprétation à tout moment (Break) 
SCORE : 83117


 Il s'agit d'une divergence OU mais dont la branche activée n’est pas prédéterminée comme pour la divergence OU mais est fonction de conditions sur des entrées 
SCORE : 83053


 C’est le rôle de la phase de cosynthèse qui concerne la synthèse des parties matérielles et logicielles et la synthèse des interfaces matériel/logiciel 
SCORE : 83050


 En effet, les temps d’accès sont gérés au niveau des primitives d’accès et non pas par l’entité modélisant l’élément de relation 
SCORE : 83041


 Il est basée sur l’emploi du modèle fonctionnel et du modèle exécutif de la méthodologie MCSE et d’un modèle de composition d’activités dynamiques qui décrit le comportement des fonctions 
SCORE : 83005


 Elle permet au simulateur de SES/Workbench de communiquer avec n’importe quel autre processus unix externe (simulateur par exemple) 
SCORE : 82981


 Le taux d’occupation du processeur est relativement faible pour K=3 car comme nous le verrons plus loin le bus est mal utilisé 
SCORE : 82975


 Contrairement à awk, Perl (Pratical Extraction and Report Language) permet d’utiliser des hashtables très utiles pour trier et rechercher des informations selon des mots clés 
SCORE : 82958


 A chaque niveau de description correspond un modèle bien formalisé qui sert d’interface et de documentation entre les étapes successives 
SCORE : 82918


 Dans la plupart des cas, la mise à jour du modèle portera essentiellement sur des attributs des modèles fonctionnel et architectural et l’allocation des fonctions 
SCORE : 82887


 Mais notre approche méthodologique se distingue très nettement par l’utilisation d’un modèle unique à partir de la phase de conception fonctionnelle 
SCORE : 82860


 La solution fonctionnelle développée servira alors comme base pour identifier les parties qui relèvent du co-design 
SCORE : 82836


 La communication entre les différents éléments (blocs et composants) d’une architecture matérielle se fait par transition d’un jeton 
SCORE : 82829


 Comme il s’agit d’effectuer un parcours ordonné d’une structure de données d’un modèle MCSE, il est utile de rappeler auparavant le méta-modèle d’une structure de données MCSE 
SCORE : 82786


 3- Mise à jour du champ EntityDeclaration en utilisant le nom Serveur puis en créant les paramètres génériques et entrées/sorties par exploitation de la structure Interface de MCSE 
SCORE : 82784


9 DEFINITION DU SCRIPT La question fondamentale pour définir la grammaire du script concerne les opérations nécessaires pour assurer toute transformation de structure 
SCORE : 82766


 Ce résultat a été obtenu grâce à l’utilisation d’un classe java disponible sur le web réalisant la fonction de Meta-Parser [HUDSON-96] 
SCORE : 82712


 Enfin, la représentation de la grammaire sous la forme du modèle graphique de méta-structure est très utile pour son optimisation 
SCORE : 82701


 Mais le processeur logiciel peut aussi être représenté par une description architecturale détaillée (pipeline, cache, registre, ALU 
SCORE : 82680


 Mais, une partie matérielle est pour ce type de systèmes indispensable pour respecter les débits élevés des protocoles de communications (réseau ATM par exemple) 
SCORE : 82647


 -A- Efficacité de modélisation Ce premier critère essentiel concerne la facilité et la puissance de représentation du modèle de description pour exprimer les concepts à modéliser 
SCORE : 82631


 factor Avec la chaîne d’entrée suivante expr + expr + expr, il y aura un shitft/reduce conflit sur la deuxième occurrence du signe + 
SCORE : 82599


 Si une relation n’est pas multiple, il faut supprimer la structure Generate, ce qui se fait simplement par élimination du noeud MultipleBlock (idem à la déclaration des composants) 
SCORE : 82596


 Mais il permet aussi lorsqu’il est utilisé comme source pour une activité d’engendrer un achèvement forcé ou inconditionnel de cette activité 
SCORE : 82416


 En effet, une simulation VHDL peut très bien permettre d’étudier un partitionnement logiciel/ matériel donné 
SCORE : 82413


3 Utilisation de modèles La description d’un composant doit aussi pouvoir se faire à partir de composants déjà décrits 
SCORE : 82387


 Quand une fonction ou une activité est séquentielle, il s’agit d’une tâche pour la ressource d’exécution et ainsi elle se traduit en un process VHDL 
SCORE : 82308


 CmdUsager[1:k] SéquenceIn[1:n] RepUsager[1:k] SéquenceOut[1:n] CmdCanalEnr[1:n] RepCanal[1:k] CmdCanalLec[1:n] SupervisionUsager Enregistrement Lecture Emission Réception Usagers CanauxLibres Disque[1:ND] DemD[1:ND] RepD[1:n] Supervision Execution Validation de la méthode par des études de cas M 
SCORE : 82308


 Le couplage entre un composant actif et un élément de relation est effectué avec un protocole de communication en 4 phases 
SCORE : 82303


FM MODÉLISATION DU COMPORTEMENT (QUAND) •Déterminer les instants d’apparitions des événements ou des informations en entrée qui vont faire évoluer le comportement du système et le faire changer d’état 
SCORE : 82280


 Cependant, le meilleur compromis entre portabilité et temps de simulation est probablement de choisir comme langage cible JAVA au lieu de VHDL et C++ 
SCORE : 82243


 L’enrichissement d’une méthodologie système pour l’activité de co-design concerne principalement l’étape de conception architecturale 
SCORE : 82173


 Pour manipuler du texte, on peut utiliser des langages dédiés à la manipulation de texte ou utiliser un générateur d’analyseur syntaxique 
SCORE : 82160


 -G- Paramètres et vecteurs génériques Une description peut comporter des paramètres génériques de manière à dimensionner l’application pour plusieurs grandeurs 
SCORE : 82152


 Ce script sert de point d'entrée au méta-générateur MetaGen qui permet d'interpréter le script ou de le transcrire en code Java 
SCORE : 82118


 D’une manière générale, la structure d’exécution résulte d’un travail d’abstraction fait sur la structure fonctionnelle détaillée 
SCORE : 82067


 La simulation des réseaux de Petri permet de vérifier le respect des contraintes temporelles et de faire une évaluation des performances du système 
SCORE : 82030


 Elle contient comme principaux attributs le vecteur des variables du script et un "Thread" qui sert pour l’interprétation ou l’exécution du script 
SCORE : 82002


 Ces résultats de performances s’obtiennent généralement par une approche analytique (réseau de files d’attente, réseau de Petri stochastique) ou par simulation 
SCORE : 81999


 T_Req étant ici un port, l'attribut ‘Size du message ou de tout autre message est utilisable dans une expression temporelle 
SCORE : 81995


 Texte en entrée Outil Texte résultat Grammaire définissant la syntaxe du texte en entrée Structure de données interne Grammaire du langage cible Transformations Sauvegarde/ Restitution sur disque Load Save Chapitre 5 136 M 
SCORE : 81937


 On analyse dans ce paragraphe les transformations à apporter à la structure ci-dessus avant exécution pour permettre une exécution efficace 
SCORE : 81920


 Pour cette phase d’optimisation, il est indispensable de trouver un formalisme adéquat pour représenter les règles de transcription décrite en langage naturel 
SCORE : 81885


 - Les systèmes de contrôle/commande dominés par des problèmes de suivi et de commande pour des applications incluant des procédés physiques en tous genres à piloter 
SCORE : 81883


 Ce système peut être implanté selon une architecture générique basée sur un microprocesseur, un FPGA et une mémoire commune 
SCORE : 81870


 Le tableau suivant permet de comparer le générateur VHDL comportemental avec les autres générateurs développés avec l’outil MetaGen 
SCORE : 81869


 } Pour une condition (ou une action), il faut également retrouver l’interface du composant ou l’élément de relation interne correspondant 
SCORE : 81853


 Pour cela, le modèle doit être paramétrable (données ou attributs associés aux constituants et aux relations) 
SCORE : 81843


4 Traduction d’un script en Java Au lieu d’interpréter le Script en parcourant sa structure de données image, il est également possible de traduire le Script en un programme Java 
SCORE : 81841


 Le programme de génération doit donc assurer le parcours de la structure du script pour effectuer les opérations de manipulation de OutputDs 
SCORE : 81831


 -A- Modélisation Statique Pour avoir un système stable, il faut obligatoirement que le flux de sortie soit supérieur ou égal au flux d’entrée 
SCORE : 81817


 Il s’agit d’un générateur de programme C utilisant l’exécutif temps-réel VxWorks et un générateur de programme VHDL synthétisable (niveau RTL) 
SCORE : 81814


 Il existe de nombreux outils spécifiques aux réseaux de files d’attente et/ou aux réseaux de Petri stochastiques: TimeNet [KELLING-95], QNAP2, Bones, SimScript 
SCORE : 81799


 Les règles de transcription qu’il s’agit d’implanter dans le générateur de code ont été détaillées dans le chapitre 4 
SCORE : 81737


 La sortie textuelle se fait avec la fonction Save qui exploite alors cette structure de données et la grammaire pour le formatage 
SCORE : 81721


 Le problème de la définition des vecteurs de test ou stimuli et de leur validité est généralement peu abordé alors qu’il est essentiel 
SCORE : 81697


 Il est bon de noter pour éviter toute confusion qu’un sens différent est parfois donné au terme allocation 
SCORE : 81662


 Pour la donnée qui a une signification au niveau fonctionnel, le degré de partage concerne les accès simultanés en lecture et modification 
SCORE : 81628


 - la relation de transfert d’informations (par un port de communication) permet d’échanger de l’information sous forme de messages 
SCORE : 81603


 Il y a par exemple “Fixed Delay” qui fournit toujours le même retard, “Dependent Delay” qui introduit un délai dépendant de la couleur du jeton et “Random” qui introduit des délais aléatoires 
SCORE : 81602


 L’outil permet de présenter les résultats sous la forme d’un déroulement temporel & Function A Function B M & ProcProd ProcCons CC1 a) Diagramme de comportement Partition et Allocation b) Architecture matérielle Evolution Temporelle Flot de données Chapitre 2 44 M 
SCORE : 81553


 Ceci correspond au fait qu’une bonne résolution d’un problème passe d’abord par son “immersion” dans un problème plus global 
SCORE : 81491


 Deux politiques d’ordonnancement des messages sont prévues: selon la date de dépôt et donc Fifo, selon la priorité fixée par le demandeur 
SCORE : 81487


 La première difficulté est donc de faire abstraction des contraintes technologiques et donc de toute idée de réalisation 
SCORE : 81486


 La première difficulté est donc de faire abstraction des contraintes technologiques et donc de toute idée de réalisation 
SCORE : 81486


 Le modèle de la vue structurelle est utilisé pour représenter l’architecture du système selon les 2 niveaux fonctionnel et exécutif (ou architectural) 
SCORE : 81451


 Cette présentation succincte, loin d’être suffisante, n’est donnée ici qu’à titre de rappel et de guide pour la méthodologie MCSE 
SCORE : 81423


 Cette présentation succincte, loin d’être suffisante, n’est donnée ici qu’à titre de rappel et de guide pour la méthodologie MCSE 
SCORE : 81423


 Le template est un fichier contenant sous leur forme la plus complète les constructions du langage cible qui sont utiles pour la Chapitre 6 208 M 
SCORE : 81353


 Il s’agit là d’un moyen pour simuler l’influence d’un support exécutif représenté par F avec un degré d’exécution limité 
SCORE : 81299


 Dans l’exemple, le paramètre générique n est utilisé pour dimensionner des éléments internes (dimension des éléments de relation Cmd et BlockOut et des fonctions User et TVSet) 
SCORE : 81297


 Cette évaluation des performances est alors utilisée par une heuristique et une fonction de coût pour réaliser le partitionnement matériel/logiciel 
SCORE : 81254


1 Analyse du modèle structurel Le modèle structurel permet de décrire les constituants internes d’un système et les interconnexions entre ces constituants 
SCORE : 81252


 Elle ne représente pas le lien inter-processeur Bus qui doit supporter les 2 liens fonctionnels P_send et P_ack car il s’agit d’un modèle simplifié 
SCORE : 81243


 Pour décider des constructions nécessaires, nous partons des bases de la programmation structurée qui recommande l’emploi des 3 constructions suivantes: - Exécution séquentielle, - Répétition, - Exécution conditionnelle 
SCORE : 81242


 Une branche est un flot d’exécution composé de noeuds de ressource qui peuvent être actifs F F N N F F TRUE FALSE TRUE FALSE EL E ME NT S DE R OUT A GE MEMOIRE FETCH EXECUTE1 EXECUTEN Modèle logiciel Modèle matériel Delai Machine Virtuelle Chapitre 2 42 M 
SCORE : 81209


 La description d’une architecture avec ce modèle se fait à l’aide d’un outil ADEPT [KUMAR-94] basé sur l’utilisation d’outils graphiques de CAO (Mentor Graphics Design Architect) 
SCORE : 81178


E 65 -B- Synchronisation (événement, signal) Une synchronisation peut être du type booléen, du type compteur ou du type fugace 
SCORE : 81158


 En guise de conclusion, le chapitre 8 rappelle les points essentiels du travail présenté et donne un ensemble de perspectives possibles 
SCORE : 81131


 La traduction des conditions ou actions composées repose sur l’utilisation des principes de traductions définis pour le parallélisme et l’attente conditionnelle 
SCORE : 81117


 8- il suffit ensuite de transcrire la structure sous forme textuelle pour avoir le programme résultat souhaité 
SCORE : 81028


 Il s’agit d’un serveur vidéo temps-réel et d’un système de communication basé sur un ensemble de cartes identiques 
SCORE : 81019


 Ce modèle est similaire, en terme de structure, au modèle fonctionnel mais avec une spécification différente des éléments (voir figure 3 
SCORE : 81018


 Pour les techniques basées sur différents modèles de représentation des parties matérielles et Méthodologie de co-design et estimation des performances M 
SCORE : 80925


 Cependant ce constat est à relativiser si les modèles source et destination sont structurellement très proches comme c’est le cas pour notre générateur VHDL 
SCORE : 80903


 Dans ce cas, une transition n’est franchie que si toutes les places précédentes sont marquées et si le temps associé à chacune est écoulé 
SCORE : 80875


 Développée spécialement pour les applications temps-réel en contrôle/commande, elle a été appliquée sur de multiples problèmes industriels 
SCORE : 80860


 Développée spécialement pour les applications temps-réel en contrôle/commande, elle a été appliquée sur de multiples problèmes industriels 
SCORE : 80860


 On s’intéressera donc plus particulièrement aux performances du processeur en charge de la partie commande (ou partie dite opérative) 
SCORE : 80858


 Ainsi un record de la structure de données du script est traduit par une séquence d’instructions, l’alternative par la sélection et l’ensemble par l’itération 
SCORE : 80807


 - Lavue structurelle permet de décrire les éléments actifs (fonction et même processeur) d’un système et leurs interconnexions 
SCORE : 80804


 Basé sur différents formalismes, il a été développé en tenant compte de recommandations et standards de principe d’ingénierie système tel que la norme IEEE1220 
SCORE : 80717


 Dans le formalisme utilisé par la méthodologie MCSE, la vue structurelle regroupe la vue fonctionnelle et la vue architecturale ou exécutive 
SCORE : 80703


 Il permet uniquement de trouver la meilleure répartition des tâches logicielles entre les différents processeurs logiciels 
SCORE : 80695


 Le méta-générateur MetaGen est aussi capable de transcrire automatiquement le script correspondant à un générateur en un programme JAVA équivalent 
SCORE : 80553


 Au niveau exécutif, il est possible d’observer l’influence de la politique d’ordonnancement (attribut ‘Policy) et de la puissance du processeur (attribut ‘Power) 
SCORE : 80525


E 231 -B- Transmission en logiciel (zone 1 et 2 en logiciel) Pour une implantation logicielle de EmissionMess et ReceptionMess la valeur du paramètre de vitesse de transmission sur le bus est fixée à A=7 s 
SCORE : 80489


 - les spécifications technologiques, qui incluent : les contraintes de temps et de répartition, les caractéristiques des interfaces physiques, les contraintes de réalisation 
SCORE : 80446


 - les spécifications technologiques, qui incluent : les contraintes de temps et de répartition, les caractéristiques des interfaces physiques, les contraintes de réalisation 
SCORE : 80446


 Tous les process (Op1 et Op2) associés aux branches parallèles qui étaient en attente de la synchronisation (WaitFork) se mettent alors en attente du processeur (WaitingTask) 
SCORE : 80430


 De cette analyse découle ensuite la recherche de la répartition matériel/logiciel qui a pour objectif de réduire au maximum le développement 
SCORE : 80391


 De cette analyse découle ensuite la recherche de la répartition matériel/logiciel qui a pour objectif de réduire au maximum le développement 
SCORE : 80391


 Il est couplé à un analyseur lexical dont le rôle est de découper le texte source en unités significatives que l’on nommera par la suite token 
SCORE : 80324


 L’analyse de ces performances permet de vérifier le respect des contraintes de performances et d’identifier les ressources critiques 
SCORE : 80272


 La structure interne construite à partir d’un fichier texte par un analyseur syntaxique, est le coeur du générateur à concevoir 
SCORE : 80271


 Cette implantation résulte de l'utilisation de règles qui permettent d'effectuer des transformations tenant compte du support matériel 
SCORE : 80265


 Cette implantation résulte de l'utilisation de règles qui permettent d'effectuer des transformations tenant compte du support matériel 
SCORE : 80265


 Il faut donc bien différencier une opération d'un état utilisé dans un modèle du type diagramme à états finis 
SCORE : 80231


 Ainsi, nous pensons que seule cette technique est utilisable durant la spécification et la conception des systèmes matériels/logiciels 
SCORE : 80217


 -D- La classe GeneratorAll La classe GeneratorAll est une classe abstraite dont héritent la classe MetaGen et les classes obtenues par transcription d’un script en code Java 
SCORE : 80188


 Il faut alors utiliser un algorithme mixte Top-Down/Bottom-Up permettant d’obtenir pour l’exemple précédent l’ordre de traitement M V F1 F11 F12 F1 F2 M 
SCORE : 80155


 Dans la nouvelle plate-forme en cours de développement "MCSE ToolBox", le couplage entre outils est basé sur un échange par fichiers 
SCORE : 80149


5 Modélisation plus réaliste des disques De manière à avoir une évaluation plus fine du serveur, il est nécessaire de considérer un modèle plus réel des disques 
SCORE : 80137


 Sur l’exemple de gauche, le processus père OP indique le début de l’activité parallèle par la primitive Fork et libère la ressource d’exécution (BlockingTask) 
SCORE : 80109


 Un état représente généralement une situation d’attente, ce qui veut dire absence d’utilisation de ressource d’exécution 
SCORE : 80075


 On peut cependant réduire le temps de génération en utilisant un compilateur Java natif mais on perd alors la portabilité 
SCORE : 80062


 L’outil a d’abord été développé pour décrire et évaluer les spécifications d’un système dans le domaine de l’ingénierie système 
SCORE : 80048


 Les règles de transcription qui seront à priori décrites en langage naturel doivent être converties en règle de script 
SCORE : 80041


 A cet égard, il est indispensable que le code VHDL généré automatiquement à partir du modèle de performance soit le plus lisible et compréhensible possible 
SCORE : 79997


 Cette analyse des performances est réalisée par une technique de co-simulation qui consiste à traduire le modèle de performance du système en un modèle VHDL simulable 
SCORE : 79972


 Il permet la saisie du cahier des charges, l’élaboration des spécifications, l’analyse fonctionnelle et la décomposition physique des systèmes 
SCORE : 79962


 Chacune des structures possède une référence sur sa grammaire (GrammarDs) en incluant la table des symboles pour permettre son interprétation 
SCORE : 79958


 Le terme séquence signifie ici une unité visuelle ou audio de durée allant de quelques secondes à plusieurs heures 
SCORE : 79954


2 Les conflits JAVACUP peut échouer dans la translation de la spécification d’une grammaire si celle-ci est ambiguë ou contient des conflits 
SCORE : 79947


 A titre d’exemple, le code script de certaines de ces règles d’analyse est donné dans les paragraphes suivants 
SCORE : 79938


 Deux techniques de simulation sont possibles: l’utilisation d’un simulateur spécifique pour le modèle ou la transcription du modèle en un langage pour lequel un simulateur existe 
SCORE : 79933


 Après acquittement du port de communication, la fonction passe alors le temps d’écriture nécessaire réalisé par la procédure DELAY 
SCORE : 79920


 Les films sont enregistrés sous la forme d’un ensemble de blocs successifs, chaque bloc étant de taille fixe 
SCORE : 79865


 Comparativement à l’utilisation du StateChart, il s’agit d’une description plus macroscopique qui mixe l’expression temporelle en vertical avec le flot d’information en horizontal 
SCORE : 79857


 Le terme non-interprété signifie que seul le temps des opérations et les dépendances temporelles sont pris en compte 
SCORE : 79800


 Analysons tout d'abord le modèle préconisé dans la méthodologie MCSE pour la spécification et pour la conception fonctionnelle de manière à déduire ses limitations et manques 
SCORE : 79797


 En effet, la fonction EmissionMess est capable d’obtenir le bus pour envoyer un message à une carte qui n’a plus de place libre dans le port Lind 
SCORE : 79788


 Un éditeur orienté par la syntaxe peut aussi servir à l’édition de tout texte défini par une grammaire 
SCORE : 79775


 La fonction Emission envoie un message reçu du port L_req vers la fonction Reception via le port P_send 
SCORE : 79758


 Chaque bloc F utile pour modéliser l’aspect fonctionnel possède une entrée/sortie supplémentaire pour l’asservir à un noeud de ressource 
SCORE : 79742


 Pour le niveau instruction (fine-grain partitioning), l’unité d’allocation est la plus petite possible puisqu’il s’agit d’une instruction 
SCORE : 79720


 La co-simulation a pour but d’étudier la modification des performances si les zones 2 et 3 sont implantées en matériel ou en logiciel 
SCORE : 79684


 Nous avons en effet développé un générateur de générateur de code ou métagénérateur nommé MetaGen et qui fait l’objet du chapitre 5 
SCORE : 79655


 D’ailleurs, l’élimination des conflits (mise à plat de la grammaire) se paie malheureusement aussi sur l’aspect et la convivialité de l’éditeur syntaxique 
SCORE : 79630


4 Simulation du serveur en lecture Les disques représentés dans le modèle par la variable partagée Séquences sont modélisés sous la forme d’une ressource commune 
SCORE : 79547


 Un changement souhaité de la structure interne McseDs se traduit par une modification de la grammaire du modèle MCSE ou par une modification de la MCSEGrammarDs ou par une modification des règles de production 
SCORE : 79547


 Les constructions qui sont souvent source de problèmes en C/C++ telles que par exemple les pointeurs génériques (*void) et la conversion implicite de type ne sont pas autorisés en Java 
SCORE : 79534


 Pour une ressource qui a plus une signification au niveau exécutif, le degré de partage concerne l’intervalle entre allocation et libération 
SCORE : 79505


14 0 5 10 15 20 25 30 "StartDelay" Temps (s) Temps (s) Taux d’occupation du processeur Exécution Retard au démarrage (s) Charge imposée au système (Mbits/s) Chapitre 7 224 M 
SCORE : 79465


E 53 Nous définissons le terme performance comme une quantification d’un système vis à vis de critères d’observation externes ou internes 
SCORE : 79405


 La description de la partie Analyse détaille le parcours et l’analyse de la composante structurelle puis de la composante comportementale du modèle de performance de MCSE 
SCORE : 79387


 Réalisation Les 2 parties - support matériel, implantation du logiciel - favorisent le travail de réalisation d'un prototype, l'intégration et le test 
SCORE : 79382


 Réalisation Les 2 parties - support matériel, implantation du logiciel - favorisent le travail de réalisation d'un prototype, l'intégration et le test 
SCORE : 79382


 Il s’agit alors de constantes qu’il faut pouvoir déclarer pour faciliter leur modification globale 
SCORE : 79368


 La deuxième colonne montre la représentation graphique équivalente sous la forme de la notation des structures de données 
SCORE : 79360


 Le terme méthode représente une procédure ou démarche bien définie et structurée permettant de résoudre un problème 
SCORE : 79340


 Rappelons que l’objectif à atteindre consiste à obtenir un outil capable de transcrire le modèle de performance de la méthodologie MCSE en une description VHDL comportementale 
SCORE : 79333


) puis l’allocation des fonctions de manière à identifier les interfaces et donc les supports physiques de transmission pour les messages 
SCORE : 79313


 Pour le comportement, 3 temps sont à considérer pour son utilisation: temps d’allocation (‘Write), temps d’utilisation (‘Use) et temps de libération (‘Read) 
SCORE : 79305


 Chaque niveau de la construction est validé par une vérification de la conformité aux spécifications du niveau correspondant de la démarche descendante 
SCORE : 79294


 Chaque niveau de la construction est validé par une vérification de la conformité aux spécifications du niveau correspondant de la démarche descendante 
SCORE : 79294


 -D- Evaluation des performances Pour faire une évaluation des performances, l’utilisateur peut affecter des temps de traitements aux fonctions 
SCORE : 79235


 Ensuite, expliciter le rôle du système et donc exprimer ses spécifications consiste à énoncer et à caractériser les fonctions demandées 
SCORE : 79224


 Ensuite, expliciter le rôle du système et donc exprimer ses spécifications consiste à énoncer et à caractériser les fonctions demandées 
SCORE : 79224


) et le temps de commutation (overhead), ce type de noeud permet de modéliser un processeur logiciel ou une ressource active 
SCORE : 79215


 Le problème se complique lorsque les tâches peuvent être sporadiques ou lorsque le système est distribué [WOLF-94] [MALIK-95] 
SCORE : 79212


 A ces règles se trouvent associées des règles de production induisant la construction de la structure de données du texte analysé 
SCORE : 79198


 L’allocation des éléments fonctionnels sur les éléments exécutifs et le partitionnement matériel/logiciel ne pose pas trop de problèmes 
SCORE : 79168


 Généralement, concevoir et réaliser de tels systèmes nécessite une compétence technique dans au moins 3 domaines: l’électronique analogique, l’électronique numérique et l’informatique 
SCORE : 79163


 } Les algorithmes précédents utilisent des instructions du script qui sont spécifiques au modèle MCSE (mots en italiques): - IncludeComponent importe un composant défini dans une librairie 
SCORE : 79161


 Le premier cas spécifie que F1 peut utiliser l'un quelconque des ports du vecteur Pt[1:N] en le désignant par son indice 
SCORE : 79009


 Ces interfaces sont produites par synthèse à partir des caractéristiques du couplage matériel entre le microprocesseur et son environnement 
SCORE : 79002


 Le lien LinkDown référence un vecteur contenant les références de toutes les interfaces du niveau associées à l’élément concerné 
SCORE : 78997


 Intéressons-nous maintenant à la structure de données qui doit être construite par la fonction Loader lors de la reconnaissance d’un texte 
SCORE : 78997


 Actuellement, l’équipe MCSE travaille activement sur la génération de code C exécutable, de code VHDL synthétisable et sur la synthèse des interfaces logiciel/matériel 
SCORE : 78975


2 Instructions d’enchaînement Après avoir défini les opérations de base, il faut pouvoir construire une instruction ou une transformation plus complexe 
SCORE : 78971


 Nous avons aussi constaté que les solutions de qualité peuvent s'exprimer sous la forme de modèles génériques 
SCORE : 78950


 Nous avons aussi constaté que les solutions de qualité peuvent s'exprimer sous la forme de modèles génériques 
SCORE : 78950


 En second, il n’y a pas continuité du modèle d’une phase de conception à l’autre: un nouveau modèle doit être réécrit à chaque étape de conception 
SCORE : 78941


 Mais il peut également être du type Binaire (mode=1) et dans ce cas on utilise le mécanisme de sérialisation/ désérialisation du langage JAVA pour le charger 
SCORE : 78829


 La taille moyenne du buffer d’anticipation nécessaire à la fonction Lecture pour éviter toute rupture de séquences est donc 4 
SCORE : 78792


 Comme le suggère la boucle infinie, cette initialisation n’est effectuée qu’une seule fois lors de la création (ou instanciation) de l’activité Proc 
SCORE : 78785


 Pour des raisons de lisibilité et de structuration, les actions ne sont pas effectuées durant une opération mais après des opérations ou activités 
SCORE : 78762


E 205 Pour le générateur VHDL synthétisable, au niveau structurel, les combinaisons problématiques de l’instanciation multiple (K->M->N) disparaissent par raffinement (fonction d’arbitrage de bus par exemple) 
SCORE : 78738


 Il s'agit ici des attributs de temps (‘Time), de taille de données ou d'information (‘Size), de sélection de chemin (‘Path), de condition (‘Cond), d'identification (‘Id) 
SCORE : 78722


 Lors du parcours descendant du modèle source, on empile à chaque niveau hiérarchique la valeur courante de l’indice IndexVector dans la variable IndexVectorLevel 
SCORE : 78688


 La taille de la séquence, le débit et l’usager source sont transmis vers le canal correspondant désigné par l’attribut ‘Canal 
SCORE : 78646


 Chaque opération est soit une opération composite et donc définie par un ensemble d’opérations, soit une opération élémentaire 
SCORE : 78619


 Cette technique doit donc aussi pouvoir s’employer pour toutes autres grammaires telles que C et VHDL par exemple 
SCORE : 78513


E toutes les cartes et lorsque le système a atteint un état stationnaire (la durée de l’état transitoire observée par simulation est d’environ 0,1 s) 
SCORE : 78501


 En plus de la programmation multi-thread, d’autres constructions ont aussi été inspirées d’ADA: les concepts de package et d’exception 
SCORE : 78490


 Souvent l’architecture cible est composée d’un seul processeur logiciel couplé à un ou plusieurs FPGA ou ASICs et éventuellement une mémoire commune 
SCORE : 78414


 Une description temporelle est la composition d’opérations ou d’activités (flux vertical) conformément à 5 règles d’association: - la séquence, (&) - l’alternative, ( 
SCORE : 78390


 T11 T1j Ad LG DATA Ad LG DATA Tp1 Tpl Ad LG DATA Ti1 Tik Ad LG DATA Carte 1 Carte i Carte p TRANSBUS Txxx: tâche AddrC Longueur Data 8 bits 8 bits Longueur Octets 20 Mbits/s 4 lignes Anneau à jeton format d’un message TokenIn TokenOut ACK DATA TRANSBUS Carte 1 Carte 2 Validation de la méthode par des études de cas M 
SCORE : 78291


 Puis pour conclure, nous justifierons le développement d’un nouveau modèle de performance lié à la méthodologie MCSE et approprié à la problématique du co-design 
SCORE : 78281


 La difficulté du problème est liée à la diversité des contraintes à satisfaire et des possibilités de sélection d’architecture puis d’allocation 
SCORE : 78254


 dans ce cas problablement, il aboutira à la conclusion qu’elle est correcte sans avoir évaluer d’autres alternatives 
SCORE : 78248


 dans ce cas problablement, il aboutira à la conclusion qu’elle est correcte sans avoir évaluer d’autres alternatives 
SCORE : 78248


 La notion de process permet de simuler des tâches concurrentes dont le comportement de chacune est purement séquentiel 
SCORE : 78241


 Ensuite, elle envoie les fragments les uns après les autres en demandant un nouveau fragment après chaque envoi 
SCORE : 78229


E 227 Nous nous intéressons donc au système en considérant uniquement une transmission au niveau octet et non bit 
SCORE : 78200


) mais limités uniquement à leur domaine d’application (approche algorithmique, CFG/DFG, synthèse haut niveau) 
SCORE : 78087


E 67 Pour ce faire, un composant est considéré comme un type (ou une classe, similaire à la notion de symbole pour un éditeur de schémas) 
SCORE : 78054


 La continuité du modèle par transformation d’un comportement en un modèle structurel facilite la transition d’une phase de conception à la suivante et assure la traçabilité 
SCORE : 78042


 Pour l’exemple de droite, tous les process OP[i] sont instanciés par une boucle (instruction Generate) avec mise en attente sur le signal OpStatus 
SCORE : 78041


 Le séquentiel veut dire que, à tout instant, une seule fonction, opération, activité inclue est active 
SCORE : 77980


 Un modèle à plat s’obtient par algorithme de parcours du modèle MCSE du type ascendant (Bottom-Up) qui est plus rapide que celui utilisé pour générer un modèle hiérarchique 
SCORE : 77861


 L’éditeur exploite alors la méta-structure et la table des symboles pour proposer à l’utilisateur les solutions possibles 
SCORE : 77851


 Cette implantation est à rapprocher de celle du jeton du modèle UVa qui a également inspirée le mécanisme de communication utilisé dans le modèle de performance du projet RASSP (Cosmos) 
SCORE : 77753


 La phase 3 vise à déterminer les spécifications les plus complètes possible de chacune des parties et les interfaces entre elles 
SCORE : 77752


 Lors de la simulation, la trace générée ne contient que des occurrences de trace dont les codes sont ceux définis dans la table de codage 
SCORE : 77725


 Dans le cas général, le comportement de chaque fonction est modélisé comme un ensemble de process synchronisés et coopérants 
SCORE : 77722


 Pour réaliser cette transformation de textes, le premier travail du développeur d’un générateur consiste en la définition des règles de transcription 
SCORE : 77692


 Le raffinement est poursuivi jusqu'à l'obtention de fonctions élémentaires qui peuvent s'exprimer par une description purement séquentielle 
SCORE : 77630


 Le raffinement est poursuivi jusqu'à l'obtention de fonctions élémentaires qui peuvent s'exprimer par une description purement séquentielle 
SCORE : 77630


), le temps de latence d’un message, la détection du non respect d’une contrainte temporelle, un temps de retard au démarrage, 
SCORE : 77623


 Le choix du block se justifie par l’emploi de la variable partagée rnd au niveau du tirage aléatoire de l’alternative 
SCORE : 77609


 De plus, elle s'avère aussi utilisable pour des instanciations multiples d'éléments de relation, en particulier avec la sélection 
SCORE : 77604


 La description se fait à un niveau d’abstraction beaucoup moins élevé que celui des spécifications et des descriptions comportementales 
SCORE : 77526


 En réalité, grâce à une bonne méta-modélisation du modèle comportemental, ce travail est fait implicitement par l’analyseur syntaxique 
SCORE : 77525


 Il y a tout d’abord les modules de contrôle (19 différents): ils agissent uniquement sur l’état du jeton 
SCORE : 77524


 La modélisation est à faire selon un niveau de détails nécessaire mais juste suffisant pour résoudre le problème 
SCORE : 77474


 La modélisation est à faire selon un niveau de détails nécessaire mais juste suffisant pour résoudre le problème 
SCORE : 77474


 -B- Attribut ‘Size L’attribut ‘Size sert à définir la taille d'une donnée échangée ou d'un objet de transaction (un message émis par exemple) 
SCORE : 77468


 •La conception est un processus, une suite d’étapes: >les spécifications, >la conception proprement dite, >la réalisation, >le test et la validation 
SCORE : 77423


 La quatrième colonne représente la notation de la structure de données pour une solution tandis que la cinquième colonne montre une solution pour l’implémentation 
SCORE : 77388


 Cette approche diffère fondamentalement du cycle de conception conventionnel des systèmes qui repose sur un développement séparé des deux parties 
SCORE : 77291


E 131 Le modèle étant vérifié au niveau fonctionnel, on considère maintenant que les fonctions ReadMovie sont implantées sur un processeur P de degré de parallélisme M 
SCORE : 77171


 -A- Déclarations Pour éviter les erreurs et faciliter la transcription du script pour une exécution efficace, il est judicieux d’associer un type à chacun 
SCORE : 77053


 La mise à jour de cette association bidirectionnelle se fait par l’instruction RelationLinks qui s’applique sur un élément de relation ou l’interface <Port> ou <Var> ou <Node> Var ou Port ou Node 1:1 Description TypedRelationDef <Ev> ":" Name *Range OptAttributes " 
SCORE : 77028


 A noter que pour le concepteur, tout constituant pourra posséder plusieurs descriptions aussi bien structurelles que comportementales 
SCORE : 76986


3 Transcription d’un événement Une relation de transfert d'information sous-entend une dépendance temporelle avec échange de donnée 
SCORE : 76931


 Le modèle de performance a ensuite été décrit en présentant successivement les 2 vues que sont la vue structurelle et la vue comportementale 
SCORE : 76835


 Un parser peut à nouveau effectuer cette production à condition qu’il sache produire du code source 
SCORE : 76824


 Une synchronisation est aussi caractérisable par les temps de génération de l’événement, d'activation des correspondants et par son degré de partage pour l’accès 
SCORE : 76782


 La taille du code source MCSE est de 129 lignes et la taille du programme VHDL est de 651 lignes pour l’entité et 1108 lignes pour le package 
SCORE : 76764


 Pour une communication à distance, la fonction EmissionMess envoie chaque message reçu de Lreq à la carte concernée via le port TB 
SCORE : 76755


 Le diagramme temporel permet de visualiser l’état des fonctions et la trace des événements et de mesurer les temps de réponse 
SCORE : 76738


 Des lois déterministes et aléatoires servent alors à produire des valeurs pour ces attributs pour placer le modèle dans une variété de situations réalistes 
SCORE : 76735


2 Classification des performances Une première approche consiste à classer les performances en 2 catégories: - les performances statiques qui sont des exigences indépendantes du temps 
SCORE : 76728


 La capacité de 0 pour ce port (port du type rendez-vous) va engendrer un asservissement de la fonction Emission à la fonction Enregistrement 
SCORE : 76710


 Ainsi, l’exactitude de la simulation est préservée: "The hardware simulator thus serves as a supervisor, ensuring that data is accessed in correct order" [GAJSKI-95] 
SCORE : 76632


 -B- Description des algorithmes de parcours Nous allons maintenant donner dans le formalisme du langage script les algorithmes de parcours possibles du modèle MCSE 
SCORE : 76622


 La durée dans un état d’un diagramme est souvent un temps d’attente et est dépendant de conditions qui indiquent l'achèvement de l'état 
SCORE : 76578


 Dans ce sens, faire au lieu d’acheter est une bonne protection contre la concurrence, car on évite de divulger des connaissances à des sous-traitants ou des fournisseurs 
SCORE : 76555


 Ceci peut par exemple être le cas pour le choix d’une solution pour l’implantation d’une variable partagée ou d’une fonction 
SCORE : 76480


E L’utilisation d’un simulateur VHDL pour la partie matérielle et éventuellement pour la partie logicielle augmente sensiblement les temps de simulation 
SCORE : 76381


 Pour résumer ou pour avoir une autre vision de cette technique, le méta-parser produit des classes d’objets appelées MetaDs et Grammar-Parser 
SCORE : 76380


 Ceci s’explique par le fait que l’alternative représentée par l’ensemble 0:1 se trouve maintenant spécifié pour un texte donné 
SCORE : 76376


E 59 description fonctionnelle résultat de la conception fonctionnelle et qui elle, utilise une description une description structurelle 
SCORE : 76352


E L’interface utilisateur comporte trois zones principales: - une zone de sélection du composant de départ pour la génération 
SCORE : 76337


 Il doit définir l’architecture matérielle cible et l’allocation des éléments de la solution fonctionnelle sur cette architecture 
SCORE : 76332


1 Analyse de ScriptDs La structure de données ScriptDs est associée à sa structure de grammaire ScriptGrammarDs comme c’est le cas pour toute structure 
SCORE : 76172


1 SPECIFICATION DE LA GRAMMAIRE VHDL Le générateur d’analyseur syntaxique sur lequel est basé la plate-forme des outils MCSE en cours de développement se nomme JAVACUP 
SCORE : 76170


 Si la grammaire est réellement ambiguë, il y a deux possibilités d’analyse pour une chaîne d’entrée et JAVACUP ne peut traiter ce cas 
SCORE : 76156


 Les réflecteurs (disques, mémoire, pipeline, file d’attente) de jetons retournent un jeton après un certain délai 
SCORE : 76148


 L’appelant doit alors donner son identité sous la forme de son indice dans le vecteur 
SCORE : 76111


 Compte tenu de notre modèle, pour l’instant, il doit explicitement définir le principe de détection et correction d’erreur retenu 
SCORE : 76101


 Un protocole de communication est aussi utilisé pour le couplage d’un élément de relation avec chaque fonction 
SCORE : 76099


 Ce modèle de performance est utilisé pour l’évaluation des performances dynamiques avant et après le partitionnement matériel/logiciel 
SCORE : 76027


 Les attributs considérés ici ne concernent que le modèle comportemental car les attributs pour le modèle structurel ont été vus précédemment 
SCORE : 76019


 with - Tseek = U(2,24) ms (U a random law), - Tlatency = U (0,11) ms, - Tread = 12,8 ms (read time) Recording OrderRead[1:n] DemD[] * Write Read DemD[]‘Op=write Read‘Time = TaccDisk 
SCORE : 75976


E Ainsi, en respectant la démarche par étapes successives, la documentation est générée au fur et à mesure du développement et non en final 
SCORE : 75936


E Ainsi, en respectant la démarche par étapes successives, la documentation est générée au fur et à mesure du développement et non en final 
SCORE : 75936


 Pour cela, des attributs représentant par exemple le taux de dysfonctionnement et le degré de dédoublement d’un élément peuvent être rajoutés 
SCORE : 75832


 Cette représentation graphique fait clairement apparaître un rebouclage entre les noeuds de composition d’activités (ActivitySequence, ConcurrentActivity, MultipleActivity, AlternativeActivity, et AlternateConditionalActivity) et le noeud Activity 
SCORE : 75810


 Une grammaire se décrit elle-même selon une grammaire qui est alors appelée méta-grammaire 
SCORE : 75790


 Le diagramme d’activités fait clairement apparaître la multiplicité des activités de contrôle du système et l’importance de la grandeur Séquences 
SCORE : 75789


E performance, cost and design time goals is a hardware/software co-design problem 
SCORE : 75733


4 CONTRIBUTIONS Le modèle de performance utilisé pour la co-simulation est le résultat d’une réflexion de l’équipe sur la modélisation des performances qui a débuté en 1992 [CALVEZ-93b] 
SCORE : 75690


 Pour que ceux-ci aient une architecture commune, nous avons défini un modèle générique de modèle de structure de données 
SCORE : 75546


 Ainsi, la production d’un programme ou d’un texte selon un langage cible nécessite de disposer de sa grammaire 
SCORE : 75525


 Une analyse du code Java produit avec un outil de "profiling" tel que Visual Quantify de Pure Atria permettrait de trouver les méthodes gourmandes en temps C 
SCORE : 75524


 La fonction Supervision vérifie la demande et si elle correcte et que l’usager est autorisé, une demande de lecture OrderRead[i] ou d’enregistrement OrderRec est transmis 
SCORE : 75513


2 Analyse du modèle comportemental Par modèle comportemental, nous entendons ici le modèle conseillé pour la spécification, à savoir l’association du diagramme des activités et du StateChart 
SCORE : 75491


 L'ensemble de ces opérations de manipulations de structures de données est décrit sous la forme d'un script 
SCORE : 75476


 Cette définition sert par la suite à l’interprétation de l’implantation du générateur de code VHDL qui fait l’objet du chapitre 6 
SCORE : 75391


 Une vérification et une analyse des propriétés de la solution achèvent cette phase et l’étape pour s’assurer du respect de l’ensemble des contraintes 
SCORE : 75381


 Cette translation peut facilement être réalisée avec l’outil MetaGen pour lequel on dispose déjà des grammaires C et VHDL 
SCORE : 75371


 Dmux reçoit des messages des ports Lcons et Lind et les envoie vers le consommateur désigné par l’attribut ‘Id tiré aléatoirement entre 1 et n 
SCORE : 75351


 L’analyse des modèles de performances présentés montre qu’ils ne sont pas bien adaptés au co-design 
SCORE : 75346


 L’outil MetaGen présenté dans le chapitre 5 est capable de fonctionner dans les deux modes: interpréteur du langage Script et compilateur du langage Script en code Java 
SCORE : 75337


 La condition peut être élémentaire ou composée de conditions élémentaires avec les opérateurs logiques ou (OR), et (AND) et ou exclusif (XOR) 
SCORE : 75289


 Le type fugace veut dire qu’un message n’est pas mémorisé si aucune fonction n’est en attente 
SCORE : 75276


 Acheter ne doit donc pas seulement « priver » les ingénieurs internes du joli boulot et les charger de tâches rébarbatives (quoique peut-être profitables) 
SCORE : 75260


 La signification du modèle fonctionnel peut aussi être élargie en considérant des significations différentes aux éléments du modèle 
SCORE : 75246


 Durant la phase de compilation, l’outil fait une vérification syntaxique et charge la structure de données du script 
SCORE : 75246


 La solution fonctionnelle de cette partie délicate sert alors de spécification pour l’activité de co-design 
SCORE : 75181


 Les primitives ActiveFunction et Préemption tiennent compte de l’attribut ‘Overhead (temps de commutation) et de l’état du processeur (possibilité d’une suspension de processeur) 
SCORE : 75120


3 Transcription d’une activité raffinée Pour conserver la lisibilité, la transcription d’une activité raffinée se fera de la même manière que pour le parallélisme 
SCORE : 75112


 Ce type de rôle permet d’entrevoir des possibilités intéressantes par exemple pour la réalisation de générateurs de solutions et de code 
SCORE : 75055


 L’ordre de déclaration des règles n’a pas d’importance: les règles sont exécutées suivant l’ordre d’appel de ces règles 
SCORE : 75054


 Le modèle de performance capable de modéliser la partie logicielle et la partie matérielle du système est détaillé dans le chapitre 3 
SCORE : 75049


 Le générateur de code VHDL ne se limite pas à la génération automatique d’un code non-interprété pour l’évaluation des performances 
SCORE : 75034


 La structure de données de l’exemple représentée par la figure suivante montre la disparition des ensembles 0:1, 1:1 
SCORE : 75025


 L’appelant doit alors donner son identité et l’indice du destinataire du message dans le vecteur de port 
SCORE : 75006


 L’analyse de l’interface d’un composant doit tenir compte des différents cas de l’instanciation multiple 
SCORE : 74986


 Le premier niveau concerne le schéma d’interconnexion des composants retenus pour la solution: microprocesseur(s), mémoires, EPLD, FPGA, etc 
SCORE : 74967


 - Latechnique de co-synthèse où l’on retrouve la synthèse du logiciel, du matériel et des interfaces matériel/logiciel 
SCORE : 74937


 Ensuite, le comportement du constituant est défini par son degré de parallélisme pour l’ensemble de ses constituants internes 
SCORE : 74922


 La communication entre tâches se fait par transfert de messages qui englobent un jeton et via une file d’attente 
SCORE : 74911


 De cette manière, il est possible de définir une correspondance entre les noms donnés dans la description englobante et les noms donnés dans le modèle 
SCORE : 74909


 La difficulté de la co-simulation est liée à la différence de modèles et/ou de niveaux d’abstraction des représentations du logiciel et du matériel 
SCORE : 74860


 Le travail de réalisation est représentable par un triangle juxtaposé à celui de la conception comme l’indique la figure suivante 
SCORE : 74859


 Le travail de réalisation est représentable par un triangle juxtaposé à celui de la conception comme l’indique la figure suivante 
SCORE : 74859


 Il faut garder à l’esprit que toute fonction, activité ou opération reste implantée conformément au modèle précédent 
SCORE : 74855


 En mode interprété, le script est chargé et la génération se fait par parcours de la structure de données du script 
SCORE : 74845


 Pour chaque règle, nous précisons les informations qui lui sont fournies et les opérations effectuées pour la fonction de génération 
SCORE : 74819


6 PANORAMA DES MODELES ET OUTILS DE PERFORMANCES Dans ce paragraphe, nous présentons succinctement les outils les plus représentatifs ou les plus utilisés des modèles de flot de transactions et d’architectures 
SCORE : 74713


 Les variables déclarées dans cette liste sont implicitement empilées lors de l’appel de la règle et désempiler à la fin de son exécution 
SCORE : 74679


 Un champ peut être un mot clé, une valeur ou identificateur, la désignation d’un autre noeud de la structure 
SCORE : 74640


 Les relations possibles entre les différentes unités significatives d’un langage constituent les règles grammaticales de ce langage 
SCORE : 74635


 Le contenu de ce fichier template va comprendre toutes les constructions qui vont se retrouvées dans le programme cible 
SCORE : 74635


 Ce manque de dialogue conduit ensuite à des difficultés importantes découvertes tardivement durant l’intégration du logiciel sur le matériel 
SCORE : 74599


 La décomposition en étapes est basée sur la possibilité de décrire un système selon plusieurs niveaux d’abstraction 
SCORE : 74445


 La décomposition en étapes est basée sur la possibilité de décrire un système selon plusieurs niveaux d’abstraction 
SCORE : 74445


 •Cette étape se termine par la réalisation du document de réalisation dans lequel on trouvera toutes les descriptions des circuits et des programmes 
SCORE : 74300


 Cette étape se termine par la réalisation du document de réalisation dans lequel on trouvera toutes les descriptions des circuits et des programmes 
SCORE : 74300


 Comme VHDL ne dispose pas de mécanisme de suspension de process, nous avons dû décrire explicitement un composant ordonnanceur 
SCORE : 74282


 La traduction utilise à nouveau le protocole en 4 phases pour l’attente sur un port, une variable partagée ou un événement 
SCORE : 74261


 Si l’on souhaite respecter la hiérarchie du modèle source, il faut utiliser un algorithme de parcours descendant (top-down) 
SCORE : 74248


 Le modèle doit aussi faciliter la transition entre les différentes phases de conception et la traçabilité des informations 
SCORE : 74216


 - Instanciation multiple (instruction Generate) qui permet la création multiple (uniquement statique) de composants, de blocs ou de process 
SCORE : 74158


 Les données utilisées par une opération ne sont pas représentées car le modèle est du type flot de contrôle et non pas flot de données 
SCORE : 74157


 Lorsque la durée d’un état est définie par un temps, ceci peut correspondre à une confusion entre état et opération 
SCORE : 74152


 Le deuxième cas en dessous indique que chaque fonction F2[i] peut accéder à tous les éléments de Pt 
SCORE : 74118


 Partenariat: lorsque les compétences d’un fournisseur de composants ou de systèmes sont tellement évidentes, il faut envisager avec lui un partenariat de type OEM 
SCORE : 74109


 -D- Copie d’un noeud d’une structure: CopyNode Il s’agit ici de dupliquer uniquement le noeud (et donc pas ses noeuds fils) 
SCORE : 74108


 Pour les parties du système relevant du co-design, les contraintes imposées sont surtout des contraintes de performances 
SCORE : 74070


 Pour le script du générateur de VHDL comportemental, la partie analyse représente 31% (1020 lignes) du code total (3253 lignes) 
SCORE : 74052


 L’exemple ci-dessous montre la possibilité d’exploiter simultanément les concepts d’entité et de block 
SCORE : 74043


 Le premier cas ci-dessus indique la correspondance F1[i] -> Pt[i] avec i allant de 1 à n, puis la visibilité de tous les Pt[1:N] par F2 
SCORE : 74038


 - le contrôle du flot de transactions: source, destruction, boucle, divergence, jonction, interruption, reprise d’activité, etc 
SCORE : 74011


 Le diagramme de flot est plutôt un diagramme de flot de contrôle qu’un diagramme de flot de données 
SCORE : 74000


 Il s'agit de développer partie par partie la solution en faisant apparaître des fonctionnalités de plus en plus abstraites pour se rapprocher de l'objectif 
SCORE : 73971


 Il s'agit de développer partie par partie la solution en faisant apparaître des fonctionnalités de plus en plus abstraites pour se rapprocher de l'objectif 
SCORE : 73971


2 Le concept de fichier Template La description suivante correspond au template possible pour produire le programme précédent 
SCORE : 73944


E Mais, l’utilisation de VHDL pour la simulation de notre modèle de performance souffre de quelques restrictions: - manque de généricité pour la déclaration des types 
SCORE : 73887


 4- Développer une démarche de partitionnement interactif basée sur une évaluation rapide des performances dynamiques du partitionnement choisi 
SCORE : 73844


 Le modèle de performance présenté ici ne limite pas son champ d’application à l’analyse des systèmes électroniques 
SCORE : 73826


 Elle ne possède obligatoirement qu’une entrée et une sortie temporelle pour représenter le début et la fin de l’activité 
SCORE : 73785


 Les paramètres et attributs de chaque fonction, activité, opération sont des paramètres génériques des blocks et des entités 
SCORE : 73772


 Par exemple, l’émulation du processeur MicroSPARCII (Sun) sur le système de prototypage QuickTurn n’a pu s’effectuer qu’à une fréquence de fonctionnement maximale de 750 Khz 
SCORE : 73742


 Pour un élément partagé, il s'agit de son exploitation: écriture, modification pour une donnée partagée, libération pour une ressource 
SCORE : 73739


 Le parcours de la structure est efficace car l’implantation des ensembles d’opérations est faite sous la forme de listes chaînées 
SCORE : 73722


 L’algorithme d’analyse d’une condition d’évolution distingue donc ce cas par rapport au cas général 
SCORE : 73706


 Dans le projet RASSP, la modélisation de performance repose également sur l’utilisation du langage VHDL et regroupe principalement l’Université de Virginie (modèle UVa/Adept), Honeywell Technology Center, Lockheed Martin Advanced Technology Laboratories [HEIN-95] et Omniview 
SCORE : 73694


 init main String type String grammar String name Stack Value resetValue nameOf grammarOF typeOf setType isIn search peekAt size push pop assign read duplicate NodeDs nextFriend,superFather,father Vector element GrammarDs grammarDs  
SCORE : 73674


 Chaque instruction est définie par le nombre de cycles et le nombre d’accès mémoire nécessaires à son exécution 
SCORE : 73669


 La vérification de l’absence de rupture de séquence se fait par chaque fonction Réception par vérification de la contrainte de temps 
SCORE : 73591


 Un autre aspect important concerne la gestion des accès simultanés sur notre variable partagée Séquences 
SCORE : 73582


E obligatoirement des techniques de prototypage ou de réalisation avec observation des propriétés temps-réel de la solution 
SCORE : 73568


 Son principal inconvénient est la recherche des conditions de mise à jour qui peut nécessiter un parcours multiple du modèle source 
SCORE : 73546


 •Un activité désigne une transformation de donnée ou d’information en entrée en d’autres données ou informations en sorties 
SCORE : 73482


 Ainsi, si on considère la transcription du port Cmd[1:k], il faut produire toutes les lignes comprises entre "MultipleCmd" et "END GENERATE MultipleCmd 
SCORE : 73468


 Compte-tenu de la grammaire, la structure de données souhaitée pour tout script est représentée sur la figure suivante 
SCORE : 73444


 De plus, une fois le partitionnement effectué, le concepteur effectue généralement une vérification fonctionnelle du résultat obtenu 
SCORE : 73424


 En effet, ils ne distinguent pas clairement la vue fonctionnelle du système de sa vue architecturale 
SCORE : 73416


 La technique de simulation associée au modèle repose sur la transcription de la représentation textuelle du modèle en un langage exécutable ou simulable 
SCORE : 73397


 Ce fichier d’échange doit être transformé en une structure de données qui est ensuite manipulée par l’outil concerné 
SCORE : 73348


 Le langage VHDL permet en effet d’intégrer une description écrite dans un langage autre que VHDL grâce à l’interface Foreign Language Interface (VHDL’93) 
SCORE : 73333


 Du coté fonction, le protocole de communication est implanté sous forme de procédures (primitives d’accès) 
SCORE : 73289


 - Si l’on doit tenir compte de l’attribut ‘Concurrency, on n’a pas d’autres choix que de mettre à plat la description (solution b) 
SCORE : 73288


 RDD100 permet de représenter simultanément ces trois points de vue en un seul diagramme appelé "Behavior Diagram" 
SCORE : 73285


 Cette possibilité est très intéressante pour produire un générateur plus rapide que l’interprétation du script par le méta-générateur 
SCORE : 73252


 Ce modèle de comportement est relativement proche de celui du modèle MCSE où l’on retrouve les concepts de fonctions et de port de communication 
SCORE : 73237


 La vue structurelle décrit les éléments actifs (fonction, processeur) d’un système et leurs interconnexions 
SCORE : 73137


 Les propriétés intrinsèques du langage VHDL satisfont aussi certains critères de qualité d’un modèle énoncés dans le chapitre 3: - modèle hiérarchique 
SCORE : 73115


 - l’utilisation d’un simulateur VHDL nécessite aussi des ressources de simulation importantes (puissance de calcul, mémoire) 
SCORE : 73111


 Le mécanisme d’exception permet de retrouver plus facilement la source d’une erreur survenue lors de l’exécution du programme 
SCORE : 73090


 Evidemment, le programme C++ seul ne permet pas de faire une analyse détaillée du comportement du système (chronogrammes du simulateur VHDL) 
SCORE : 73072


 Le comportement de l’entité Ev qui est passive par rapport à la ressource d’exécution est décrit par deux automates (figure 4 
SCORE : 72987


 Il s’agit en effet d'un modèle non-interprété où seuls comptent les temps des opérations et les dépendances temporelles 
SCORE : 72918


 Système taille du code source Mcse taille du code VHDL généré Temps en mode interprété Temps en mode compilé ComSys 4 
SCORE : 72798


 Notre technique de co-simulation repose donc sur la simulation d’un modèle de performance mascroscopique et non interprété 
SCORE : 72777


 Des expressions régulières définissent les tokens à reconnaître et l’analyseur lexical est souvent implanté par une machine à états finis 
SCORE : 72710


 La machine virtuelle permet donc l’exécution simultanée de plusieurs tâches ou opérations logicielles 
SCORE : 72656


 Lors de l’étape de spécification, un modèle de comportement est souvent basé sur un diagramme d’activités, un StateChart ou un automate à états finis 
SCORE : 72631


 Il en résulte une identification de zones intermédiaires qui nécessitent un travail plus approfondi qui est alors typiquement du ressort du co-design 
SCORE : 72611


 Les différents types de parcours possibles sur la structure de données McseDs du modèle de performance de MCSE sont détaillés dans le paragraphe suivant 
SCORE : 72607


 Une probabilité peut être utilisée, ainsi que toute expression mathématique comme pour la durée 
SCORE : 72590


 L’efficacité des opérations résulte d’un accès efficace aux opérandes puis d’une exécution rapide 
SCORE : 72507


 Les entités peuvent être représentées selon plusieurs vues (saisie graphique et textuelle) 
SCORE : 72506


 La technique de génération de code que nous avons utilisée pour transcrire le modèle textuel du modèle de performance en VHDL est particulière 
SCORE : 72496


 La partie logicielle est représentée par des tâches utilisant une quantité de mémoire et un nombre d’instructions donné 
SCORE : 72432


1 Règles de génération Les règles de génération concernant la composante structurelle du modèle de performance de MCSE sont définies dans le tableau suivant 
SCORE : 72398


 Aujourd’hui, le développement de ces systèmes est bien maîtrisé et repose sur l’utilisation de méthodes et outils efficaces (COSSAP, SPW, DSP WorkStation, 
SCORE : 72388


 En effet, chaque séquence est une branche de la structure de données chargée dont la racine est du type ActivitySequence 
SCORE : 72372


 -A- Structure fonctionnelle et modèles de comportement utilisés La structure fonctionnelle simulée est représentée par la figure suivante 
SCORE : 72323


 Pour le dimensionnement de l’architecture, nous faissons une évaluation de M et de ND en fonction du nombre simultané d’usagers ou du débit global 
SCORE : 72308


 Par contre l’estimation des performances dynamiques nécessite l’utilisation de modèles analytiques, d’un prototype ou d’un modèle de simulation 
SCORE : 72306


 Avec cette approche, le contenu de la trace ne peut pas être modifié en direct par l’outil d’analyse des performances 
SCORE : 72253


 Le premier exemple nous a été proposé par le CCETT de Rennes et concerne la conception d’un serveur pour séquences audio-visuelles 
SCORE : 72250


 La spécification graphique du méta-modèle fournit un bon support pour la documentation et le suivi du développement de l’outil 
SCORE : 72237


 Le concepteur peut facilement faire un partitionnement grossier du système avant de se concentrer sur les parties délicates 
SCORE : 72217


 Les possibilités d’évaluation sont importantes car il est possible d’observer l’état de chaque bloc et de chaque jeton 
SCORE : 72209


 Le modèle UVa est aussi un modèle d’architecture mais il s’appuie également sur le formalisme des réseaux de Petri pour le comportement de chaque bloc 
SCORE : 72203


 Cette première approche est importante car elle induit la qualité ou la non-qualité pour le reste du développement 
SCORE : 72179


 Cette première approche est importante car elle induit la qualité ou la non-qualité pour le reste du développement 
SCORE : 72179


 La constance du débit par rapport au paramètre n est due au fait que le temps de transmission d’un message qui est en moyenne de 90 s (129x0 
SCORE : 72153


 Le partitionnement devient alors principalement un problème d’ordonnancement de tâches dynamiques dans un système distribué 
SCORE : 72148


 Dans la suite, nous supposerons l’existence de cette partie matérielle qui implante l’interface bas niveau du bus 
SCORE : 72106


 Dans un premier temps, notre principe de génération reposait uniquement sur les concepts de méta-modèle et de template 
SCORE : 72091


 Après acquittement par l’événement, la fonction passe alors le temps d’écriture nécessaire réalisé par la procédure DELAY 
SCORE : 72043


 Pour la simulation, les propriétés et certaines constructions du langage VHDL autorisent ou facilitent la simulation de notre modèle de performance, à savoir: - Parallélisme inhérent 
SCORE : 72024


 Le temps d’accès à l’élément de relation est simulé du coté producteur et non du coté port 
SCORE : 72020


3 Le partitionnement interactif Ismail [ISMAIL-94a] [ISMAIL-94b] propose une technique de partitionnement interactive (PARTIF) permettant de cibler sur une architecture hétérogène 
SCORE : 71998


 Dans les paragraphes suivants, nous allons décrire le fonctionnement d’un analyseur syntaxique obtenu avec JAVACUP 
SCORE : 71970


 La valeur courante de ce signal est donc gérée par une fonction de résolution basée sur une table de transition 
SCORE : 71936


 L'évolution séquentielle permet par exemple de caractériser le déroulement d'un ensemble de fonctions sur un processeur séquentiel 
SCORE : 71928


 Jamais encore un nouveau langage de programmation n’a reçu autant d’attention et est devenu très populaire aussi rapidement 
SCORE : 71772


 Il ressort de cette analyse que toute structure XDs peut se construire sur la base d’un modèle de noeud appelé ici NodeDs 
SCORE : 71763


E 13 Chaque niveau de la réalisation est vérifiable, ce qui assure sa conformité au niveau correspondant de la conception 
SCORE : 71694


E 13 Chaque niveau de la réalisation est vérifiable, ce qui assure sa conformité au niveau correspondant de la conception 
SCORE : 71694


 Un ensemble d’opérations peuvent se regrouper en une procédure, ce qui va se traduire par une règle de construction ou de transformation 
SCORE : 71685


6 TEST DU GENERATEUR OBTENU Le générateur ainsi développé a été testé sur deux exemples qui sont décrits dans le chapitre suivant 
SCORE : 71653


 -A- Cas N -> 1 La valeur N ou 1 peut concerner aussi bien un objet actif qu'un objet de relation 
SCORE : 71626


 Dans le cas général, l’architecture matérielle peut être quelconque, c’est-à-dire hétérogène et distribuée 
SCORE : 71615


 •La stratégie de test doit être définie dès le début, dans la phase de spécification déjà 
SCORE : 71614


3 Définition des variables L’analyse qui précède montre que les références ou valeurs sont de 3 natures: Référence sur une structure de données, chaîne de caractères, Nombre 
SCORE : 71608


 En effet, le système est basé sur le modèle Supervision/Contrôle-Commande avec des contraintes faibles pour la partie Supervision et des contraintes fortes pour la partie Commande 
SCORE : 71576


 Dans cet exemple, tous les résultats sont très dépendants du temps d’exécution de chaque consommateur 
SCORE : 71545


 Le comportement de la fonction est voulu séquentiel pour une modélisation la plus réaliste possible, ce qui justifie l’attente alternative 
SCORE : 71433


 Offrant une séparation plus nette entre la partie matérielle et logicielle du système, il est aussi mieux adapté au Chapitre 2 38 M 
SCORE : 71406


 not(ConsReady) and not(ProdReady) and Start Rendez Vous InputInactiveReq OutputInactiveReq 1 Blocked Waiting * astuce pour que le consommateur ne soit pas pris pour un autre producteur Transcription du modèle de performance en VHDL M 
SCORE : 71388


 On notera que la génération des sorties n’est pas associée aux opérations mais après celles-ci 
SCORE : 71373


 Pour cela, il faut rechercher la solution la plus appropriée, c'est particulièrement le cas pour l'interface homme-machine 
SCORE : 71364


 Pour cela, il faut rechercher la solution la plus appropriée, c'est particulièrement le cas pour l'interface homme-machine 
SCORE : 71364


 (2) >allocation des ressources en personnel et matériel Mettre les bonnes personnes au bon endroit, en leur donnant les moyens adéquats, c’est une source de motivation 
SCORE : 71321


 Lorsque la conception est avancée, la description fonctionnelle est très détaillée et le comportement des fonctions est purement séquentiel 
SCORE : 71293


 Ensuite, pour l'élaboration des spécifications fonctionnelles, celles-ci doivent se limiter à une description externe du système 
SCORE : 71270


 Ensuite, pour l'élaboration des spécifications fonctionnelles, celles-ci doivent se limiter à une description externe du système 
SCORE : 71270


 Ces exemples ont également permis de mettre en évidence l’importance de l’extraction et de l’interprétation des résultats 
SCORE : 71267


2 Exemple de Script L’exemple suivant est un script permettant de traiter partiellement le problème de génération présenté dans le paragraphe 5 
SCORE : 71265


 Ainsi dans ce paragraphe la variable partagée Disques est remplacée par des fonctions, chacune représentant le comportement réaliste d’un disque 
SCORE : 71239


 Le modèle structurel est hiérarchique (un élément actif peut être raffiné) et permet la réplication (instance d’un modèle) 
SCORE : 71222


3 Implantation de l’automate L’automate d’exécution se déduit assez directement de la technique décrite dans le paragraphe précédent 
SCORE : 71208


 Ainsi, une fonction consommatrice ne devient active que lorsqu’il y a au moins un message dans le port auquel elle accède 
SCORE : 71175


 La fonction ReadMovie assure la lecture des blocs successifs sur les disques et leur transfert vers le téléviseur 
SCORE : 71171


 Par opposition à une recherche intuitive, l'emploi d'une méthode garantit l'obtention rapide d'une solution a priori de qualité 
SCORE : 71101


 Par opposition à une recherche intuitive, l'emploi d'une méthode garantit l'obtention rapide d'une solution a priori de qualité 
SCORE : 71101


 Le temps de latence des messages croit en fonction du nombre n de producteurs/consommateurs et du nombre k de cartes 
SCORE : 71097


 La figure ci-dessous illustre cette association bidirectionnelle dans le cas de l’exemple du début de chapitre 
SCORE : 71079


 Pour une évaluation des performances, les opérations sont caractérisées par un temps d’exécution et non par un algorithme particulier de traitement 
SCORE : 71052


FM QUALITÉ DU DOCUMENT •Un document de spécifications doit être: >correct >complet >cohérent >compréhensible >vérifiable >exploitable >rédigeable et modifiable 
SCORE : 71041


 Comme le script est un texte, il est à son tour analysé et chargé sous la forme d’une structure de données 
SCORE : 71028


 C’est une description exécutive, qui décompose la fonction en terme de processus, de mémoires de données, de noeuds de communication 
SCORE : 70965


 Le plus important est alors de fournir au concepteur des outils d’estimation rapides des propriétés du partitionnement choisi 
SCORE : 70946


 Le modèle qui en résulte est un modèle dit non-interprété car les valeurs des données et des informations pour l’application n’interviennent pas dans la description 
SCORE : 70901


 Les attributs retenus sont les suivants: - ‘Policy: (Fifo, Priority), (Fifo) - ‘Concurrency: un entier positif, (1) - ‘Capacity: un entier positif ou nul ou * ou fugitive, (*) - ‘Write: un temps, (0) - ‘Read: un temps 
SCORE : 70845


 Les valeurs des variables sont gérées sous la forme de pile pour permettre la récursivité des règles du script 
SCORE : 70830


 Pour un consommateur la procédure Receive (à droite de la figure) est identique mais avec l’indication d’une attente de message par ActiveReq 
SCORE : 70819


 Par spécifications, il faut entendre une description complète mais purement externe du système à concevoir 
SCORE : 70811


 Par spécifications, il faut entendre une description complète mais purement externe du système à concevoir 
SCORE : 70811


 Nous pensons que le modèle de performance retenu est beaucoup trop structurel et dynamique pour que cette méthode puisse être appliquée 
SCORE : 70809


 En cas d’erreur, un événement contenant un message d’erreur est envoyé vers l’interface graphique 
SCORE : 70764


 Lorsque celui-ci apparaît, il y a achèvement immédiat de l’activité A1 et donc de toutes les activités incluses (A11 en l’occurrence) 
SCORE : 70741


 Il faut d'abord traiter les aspects généraux avant les aspects particuliers, les concepts avant les techniques 
SCORE : 70729


 On utilise également un événement mais sans message pour signaler la fin d’exécution d’un script 
SCORE : 70683


 L’emploi du composant conduit à créer une ou plusieurs instances chacune ayant un nom pour l’application 
SCORE : 70657


 Pour un consommateur la procédure WaitEv (à droite de la figure) est identique mais avec l’indication d’une attente d’événement par ActiveReq 
SCORE : 70645


2 Le modèle UVa/ADEPT SES/Workbench et ADEPT sont relativement proches car ils sont tous les deux basés sur un principe de modélisation par flot de transactions 
SCORE : 70550


 L’architecture générique mono-processeur et constituée d’un ensemble de FPGA correspond peu à la réalité industrielle 
SCORE : 70487


 Le débit pour une séquence et un utilisateur est tiré aléatoirement selon une loi uniforme entre 0 et 15 Mbits/s 
SCORE : 70467


 Ils constituent donc la cible privilégiée de l’activité de co-design: "Creating an embedded computer system which meets its Chapitre 1 4 M 
SCORE : 70456


E La structure d’exécution est composée de 2 processeurs P1 et P2 reliés entre eux par le noeud de communication appelé Bus 
SCORE : 70424


 (0) Les 3 premiers concernent le constituant servant de support d’exécution pour la structure correspondant à son raffinement 
SCORE : 70377


 Lorsque tous les fragments ont été enregistrés, la fin de séquence est représentée par un message transmis à RepCanal[Source] 
SCORE : 70303


 Pour garantir un transfert correct, chaque message doit être acquitté via le port P_ack 
SCORE : 70290


 Le protocole se termine ensuite par InactiveReq puis l’état de repos InactiveAck qui sert aussi à la fin de la procédure SignalEv 
SCORE : 70289


 Le protocole se termine ensuite par InactiveReq puis l’état de repos InactiveAck qui sert aussi à la fin de la procédure Send 
SCORE : 70289


 Il a permis de constater que l’exécution du programme C++ obtenu est environ 4 fois plus rapide que la simulation VHDL équivalente 
SCORE : 70286


 Certaines propriétés intrinsèques du langage VHDL (parallélisme inhérent, instanciation multiple, paramètres génériques, etc 
SCORE : 70270


 Lorsque l’on analyse un fichier template, certaines parties déclaratives de ce fichier n’auront pas à être modifiées pour la transcription 
SCORE : 70259


 BehaviorDef La signification de la notation pour interpréter les règles est la suivante: - <Component> et "(" sont des symboles terminaux (directement présents dans le texte) 
SCORE : 70245


 Lors de la simulation du programme VHDL, des informations pertinentes doivent être extraites pour analyser les résultats de performance 
SCORE : 70175


 Comme il est possible de définir la politique d’ordonnancement des transactions (préemptif, non-préemptif, temps partagé, 
SCORE : 70116


 Les accès à la mémoire inclut le chargement de l’instruction (fetch) et les accès en lecture et/ou écriture de l’instruction 
SCORE : 70087


7 5 10 15 20 25 30 "k=3" "k=6" "k=9" ms n n n bit/s μ Chapitre 7 232 M 
SCORE : 70081


 Le savoir-faire d’une entreprise, qui est en particulier le savoir-faire de son personnel, est un élément stratégique pour le futur 
SCORE : 70066


 D’autres moyens de vérification et d’analyse peuvent être ajoutés pour augmenter la confiance dans la solution retenue 
SCORE : 70021


 Pour estimer les performances dynamiques, il faut recourir à une analyse des contraintes temporelles ou à l’utilisation d’un modèle de performance 
SCORE : 69970


 -C- La configuration Les modèles fonctionnel et exécutif considérés séparément ne sont pas suffisants pour décrire la solution d’un système 
SCORE : 69924


 On constate bien que l’évolution du temps est bloquée lorsque la fonction utilisant la procédure DELAY n’est plus active 
SCORE : 69889


 Enfin, comme pour le modèle UVa, des opérateurs de contrôle du flot de jetons tel que les divergences ("split"), les convergences ("join") et les matrices d’interconnexions ("crossbar") sont disponibles 
SCORE : 69861


 Une valeur pour un attribut est déterminée par son expression textuelle: constante, résultat d'un calcul, valeur probabiliste 
SCORE : 69822


 Une fois transcrit en code java, le générateur obtenu reste un outil multi plateforme (Unix, PC, Mac 
SCORE : 69793


14-d) ne pose pas de difficultés car il s’agit d’indiquer l’indice (attribut ‘Path) de l’entrée sélectionnée dans le vecteur 
SCORE : 69782


 Or, il y a actuellement un développement incontestable en recherche sur les architectures reconfigurables dynamiquement et les méthodologies associées pour leur exploitation (reconfigurable computing) 
SCORE : 69770


 La variation du nombre de fragments présents dans les fifos internes des fonctions Lecture au cours de la simulation est la suivante 
SCORE : 69741


 La variation du nombre de fragments présents dans les fifos internes des fonctions Lecture au cours de la simulation est la suivante 
SCORE : 69741


 - La structure de sortie OutputDs est créée à l’image de XTemplateDs par copie de parties de structures en se basant sur une analyse de la structure McseDs 
SCORE : 69705


1 Structure du générateur Un générateur basé sur le principe expliqué dans les paragraphes précédents exploite en entrée les 2 structures McseDs et XTemplateDs 
SCORE : 69704


 La sélection peut être fixe (‘Path=Pt[5], ‘Path=me‘Index) ou dynamique en exploitant le contenu de messages ou de transactions (‘Path=mess‘Id) transitant par le sélecteur 
SCORE : 69699


 Avec un analyseur syntaxique fonctionnant avec un "lookahead" d’au moins deux tokens, il n’y aurait pas de conflits dans ce cas 
SCORE : 69679


 La structure de données en interne est aussi indispensable car c’est la seule forme exploitable efficacement par des programmes 
SCORE : 69652


 Ces systèmes sont constitués principalement de logiciels (système d’information exploitant une base de données par exemple) 
SCORE : 69553


 Le document appelé cahier des charges, s'il est suffisamment explicite, peut servir pour un appel d'offre 
SCORE : 69522


 Il nous apparaît possible et opportun de choisir comme unité d’allocation l’activité dynamique 
SCORE : 69453


 La continuité du modèle doit faciliter la transition d’une phase de conception à l’autre et ainsi améliorer la traçabilité 
SCORE : 69448


 La procédure concurrente TaskKiller a la charge de désactiver tous les process d’une activité en fonction de l’état de l’activité mère 
SCORE : 69430


 Pour un système composé 2 ou 3 cartes, le temps de latence des messages est sensiblement le même pour les trois implantations 
SCORE : 69395


 Les temps d’écriture et de lecture dans FifoEnr sont considérés nuls car ces temps sont associés aux opérations OpDépot et OpRetrait 
SCORE : 69339


 Il n’est pas toujours possible d’obtenir d’un fabricant de microprocesseurs, un modèle de simulation basé sur le jeu d’instruction du processeur 
SCORE : 69260


 Ainsi, il est tout d’abord aisé d’ajouter la propriété temporelle de temps d’exécution pour une action et pour une activité 
SCORE : 69249


 Il s’agit d’un modèle non-interprété qui, par simulation, permet de déduire les propriétés de performance [CALVEZ-96b] [CALVEZ-96d] 
SCORE : 69209


 Par exemple, dans [KUMAR-94], l’auteur présente la modélisation d’un cache mémoire qui a nécessité pas moins de 2000 blocs 
SCORE : 69207


 Le lien Lt sert à assurer une synchronisation (lien simple flèche) entre la fin de A111 et le début de Op3 
SCORE : 69170


 Que ce soit en entrée ou en sortie, le champ Status du signal Access implémente le protocole et le champ Value est le support de la donnée 
SCORE : 69102


 On constate aujourd’hui que la plupart des problèmes sont présentés isolés alors qu’en réalité ils ne le sont pas 
SCORE : 69011


E 39 La technique d’évaluation repose sur l’exécution d’un programme en C++ généré à partir des descriptions graphiques et algorithmiques du modèle 
SCORE : 69003


 •Faire ou acheter est une vraie question qu’il faut se poser souvent dans un processus de développement technique 
SCORE : 68939


 Au préalable, il est bon de rappeler que le développement est une activité humaine mettant en jeu une méthodologie et un système social 
SCORE : 68925


 Au préalable, il est bon de rappeler que le développement est une activité humaine mettant en jeu une méthodologie et un système social 
SCORE : 68925


 /* we assume that the first model is the model of the current configuration */ TmpType:=TypeOf(ComponentDef) 
SCORE : 68918


 A notre point de vue, un modèle non accompagné d’une démarche favorisant l’élaboration de solutions n’est pas suffisant 
SCORE : 68892


 Il peut s'agir: - d'une exécution N fois (*N), - d'une exécution une fois tous les N (/N), - d'une exécution jusqu'à une condition (=expression) 
SCORE : 68877


 Un état supplémentaire (ExitNow) a été rajouté à l’ensemble des états possibles d’un tâche (fonction ou activité) 
SCORE : 68841


 Un tableau comparatif avec les autres générateurs de code prototypés pour la plate-forme d’outils "MCSE ToolBox" est fourni 
SCORE : 68836


 De plus, le concepteur a aussi la maîtrise complète de la solution retenue avec toutes ses justifications 
SCORE : 68766


 La taille et le débit peuvent être fixes ou tirés aléatoirement selon des distributions uniformes, gaussiennes, de poisson, etc 
SCORE : 68752


 Les chemins d’accès aux scripts contenant les règles à importer sont définis dans le fichier de configuration de l’outil 
SCORE : 68733


 Les informations nécessaires pour la génération de la trace sont contenues dans le modèle MCSE source sous la forme d’attributs ‘Probe et transformées Le Générateur VHDL M 
SCORE : 68722


E 103 - définir un type spécifique pour chaque type d’élément de communication (solution (a) de la figure 4 
SCORE : 68721


 Les attributs retenus sont les suivants: - ‘Policy: (DataFifo, DataPriority, ResourceFifo, ResourcePriority), (DataFifo) - ‘Concurrency: un entier positif, (1) - ‘Capacity: un entier positif, (1) - ‘Write: un temps, (0) - ‘Read: un temps, (0) - ‘Use: un temps (0) 
SCORE : 68647


 Aujourd’hui, ces systèmes intègrent systématiquement du matériel et du logiciel et sont de plus en plus présents dans une grande variété de produits 
SCORE : 68609


 L’algorithme du parcours du type TopDown est décrit ci-après sous forme script 
SCORE : 68481


 Naturellement, une méthodologie de co-design apparaît comme un enrichissement d’une méthodologie de conception système existante 
SCORE : 68430


 -A- Chargement d’une structure à partir d’un texte: LoadDs Les structures nécessaires pour la génération (par exemple McseDs et XTemplateDs) sont chargées par l’opération RefDs := LoadDs(AccessFileName, Grammar, mode) 
SCORE : 68368


 Il résulte que la solution est fortement dépendante de l’architecture et des composants standards utilisés pour la réalisation [WOLF-94] 
SCORE : 68340


 Les deux nouvelles fonctions logicielles sont rajoutées à la fonction Processeur avec la priorité la plus élevée pour ReceptionMess puis pour EmissionMess 
SCORE : 68304


 Ils sont de 3 types pour la structure fonctionnelle (Evénement, Variable partagée, Port) et de 3 types pour la structure d’exécution (Signal, Mémoire commune, Noeud de communication) 
SCORE : 68304


 Ils sont de 3 types pour la structure fonctionnelle (Evénement, Variable partagée, Port) et de 3 types pour la structure d’exécution (Signal, Mémoire commune, Noeud de communication) 
SCORE : 68304


 Cette solution est uniquement possible si le modèle final est une description structurée et de préférence hiérarchique et descendante 
SCORE : 68281


 Ainsi, par itérations successives durant la conception, le parallélisme exprimé dans la spécification de départ est transformé en un parallélisme de fonctions 
SCORE : 68257


 Par rapport au développement d’un appareil ou d’un système tout entier, le travail peut paraître plus simple 
SCORE : 68235


 Par rapport au développement d’un appareil ou d’un système tout entier, le travail peut paraître plus simple 
SCORE : 68235


 De plus, le concept de messages avec des attributs associés permet de propager dynamiquement un comportement dans la structure 
SCORE : 68233


 Les parties de l’architecture plus spécifiques du co-design seront décidées selon les contraintes à satisfaire 
SCORE : 68221


FM ETAPE 3: LA CONCEPTION FONCTIONNELLE •Le document conception fonctionnelle est la première véritable vue interne du système demandé 
SCORE : 68209


 Les spécifications des modèles sont saisies graphiquement et l’outil permet d’adopter une démarche incrémentale facilitant le prototypage 
SCORE : 68192


 Le générateur doit alors intégrer ce code saisi manuellement au code généré automatiquement 
SCORE : 68166


 Le nombre d’états et de transition croit très rapidement en fonction de la complexité du système étudié 
SCORE : 68156


E 235 8 Conclusions et Perspectives Ce chapitre conclut la thèse en donnant un bilan du travail effectué et les perspectives envisageables au terme de cette recherche 
SCORE : 68145


 C’est le rôle des sources de jetons ("InputDevice") qui définissent le destinataire du jeton, sa taille et son débit 
SCORE : 68082


 La condition d’acceptation d’un message comprend: la demande ActiveReq, la disponibilité d’une place, le degré de concurrence non atteint (NbUse) 
SCORE : 68072


 Il est en effet basé sur deux vues complémentaires et orthogonales: la vue structurelle et la vue comportementale 
SCORE : 68059


 Malgré la malléabilité du logiciel, les problèmes rencontrés lors de l’intégration se traduisent généralement par un surcoût financier et temporel important 
SCORE : 68053


 La capacité de chaque port et la politique d’ordonnancement des tâches jouent également un rôle important 
SCORE : 68027


 A cette fin, il devrait se poser les questions préalables suivantes: •A quelles questions ce document doit-il vraiment répondre  
SCORE : 67998


 La fonction de chargement charge sous la forme d’une structure interne le texte source 
SCORE : 67969


 Généralement, le comportement d’une fonction est représentée sous la forme d’un flot de donnée et d’un flot de contrôle (CDFG) 
SCORE : 67898


 The design of the hardware and software components influence each other" [WOLF-94] 
SCORE : 67886


 Il est complété par l’outil Price System pour l’analyse de coûts et les outils RAM-ILS (Reliability, Availability, Maintainability, Integrated Logistic Support) pour l’analyse de la sûreté de fonctionnement, la fiabililité et la maintenabilité d’un système 
SCORE : 67878


 Par défaut, lorsqu’une règle est complétée, l’analyseur syntaxique Méthodologie de co-design et estimation des performances M 
SCORE : 67870


 Comme nous le verrons dans le chapitre suivant, nous avons retenu et expérimenté l’utilisation du couple VHDL/Simulateur VHDL 
SCORE : 67869


 L'adéquation du modèle à la problématique traitée a ainsi été validée ainsi que l'intérêt de toutes les étapes 
SCORE : 67860


 L'adéquation du modèle à la problématique traitée a ainsi été validée ainsi que l'intérêt de toutes les étapes 
SCORE : 67860


 Citons comme exemples: La capacité mémoire nécessaire, la consommation maximale, le poids, l’encombrement, le coût, etc 
SCORE : 67859


 La séparation radicale matériel ou logiciel est généralement assez simple pour une grande partie du système 
SCORE : 67852


3 MODELE DE SIMULATION RETENU POUR L’EMPLOI DE VHDL La transcription du modèle de performance en VHDL repose tout d’abord sur un bon choix de solution d’implantation 
SCORE : 67805


 L’ordre strict est simple puisqu’il suffit de mettre en séquence les diverses attentes (figure 4 
SCORE : 67758


 Lors de la sauvegarde sous forme textuelle, il faut éliminer les délimiteurs de zones non analysées syntaxiquement 
SCORE : 67690


 -F- Attributs sur les liens Des attributs sur les liens sont parfois nécessaires pour fixer d’une manière plus fine le comportement souhaité 
SCORE : 67687


E -A- Activation conditionnelle L'évolution d'une activité ou d’une opération doit pouvoir être conditionnelle à une entrée 
SCORE : 67680


 CHEN pour une modélisation entités/relations La description "orienté objet" est un exemple actuel de modélisation de données 
SCORE : 67664


E 153 -C- Copie d’une structure complète: CopyDs L’objectif est d’obtenir une nouvelle structure image complète de sa source 
SCORE : 67642


 -C- Principe d’exécution La figure suivante montre la technique retenue pour obtenir une exécution efficace 
SCORE : 67622


 On admet généralement que dépasser le budget de développement de 25% est moins domageable que de prendre plusieurs mois de retard pour la sortie du circuit 
SCORE : 67595


 L’outil RDD100 est l’outil central d’un ensemble d’outils intégrés pour l’ingénierie des systèmes utilisé dans le projet RASSP [FRY96] 
SCORE : 67557


 Les outils de synthèse comportementale même s’ils manquent encore un peu de maturité, sont aussi maîtrisés par les compagnies EDA/ESDA 
SCORE : 67544


14 représente la description fonctionnelle retenue pour le serveur et les 3 entités de son environnement 
SCORE : 67538


 Cette évaluation des performances faite par une co-simulation repose sur la transcription du modèle de performance en un modèle VHDL simulable 
SCORE : 67533


 L'intégration ou allocation décrit complètement l'implantation de la description fonctionnelle sur la structure d'exécution 
SCORE : 67507


 L'intégration ou allocation décrit complètement l'implantation de la description fonctionnelle sur la structure d'exécution 
SCORE : 67507


 Il correspond par exemple aux temps d’accès d’un disque modélisé par une variable partagée 
SCORE : 67503


 Sinon pour chaque paramètre générique, on recherche son type et sa valeur par défaut 
SCORE : 67456


 Comme le langage VHDL est très déclaratif, le générateur permet de générer 60-80% du code automatiquement 
SCORE : 67416


 Dans cette description, A1[1:m] est un vecteur d’activités dont la taille est définie par le paramètre générique m 
SCORE : 67378


 MCSE préconise une démarche globalement descendante qui conduit à rechercher par approches successives, une réalisation appropriée 
SCORE : 67364


 MCSE préconise une démarche globalement descendante qui conduit à rechercher par approches successives, une réalisation appropriée 
SCORE : 67364


 } La traduction de cette règle sous la forme d’une structure conduit à un vecteur des règles plus élémentaires 
SCORE : 67353


2 Principe d’exécution La structure du script doit être construite pour avoir une efficacité d’exécution 
SCORE : 67331


 Les exigences fonctionnelles expriment le comportement voulu du système en relation avec son environnement 
SCORE : 67301


 - l'étape de Réalisation qui consiste à développer le matériel et le logiciel à partir des spécifications de l'étape précédente 
SCORE : 67284


 Dans un parcours d’une arborescence en profondeur d’abord, après avoir rencontré une feuille, on doit remonter dans l’arbre 
SCORE : 67277


E 219 Avec la nouvelle représentation des disques, le comportement considéré pour la fonction Lecture est représentée par la figure suivante 
SCORE : 67267


 La phase d’exécution est un parcours ordonné de la structure du script et une exécution des opérations élémentaires 
SCORE : 67254


 Cette solution facilite la génération de code mais a probablement un impact négatif sur la durée de simulation 
SCORE : 67208


12 représente un exemple d’achèvement forcé d’activité et son principe de transcription 
SCORE : 67203


 Après exécution de cette instruction, le champ LinkUp référence l’élément de relation ou l’interface de niveau supérieur 
SCORE : 67203


 Cette solution d’implantation qui dépendait également de l’environnement graphique SunView ou XMOTIF pour l’interface utilisateur s’est vite révélée pénalisante 
SCORE : 67184


 Pour le modèle comportemental, les activités et opérations sont au contraire dynamiques et définissables aussi sous forme de vecteurs 
SCORE : 67176


4 Méthodologie pour le co-design Dans le rapport [MCC/OMI-96], le processus de co-design est représenté par la figure 1 
SCORE : 67159


 Donc, ce document doit être approuvé et il a une valeur contractuelle, formelle ou non, entre les deux parties 
SCORE : 67159


 Chaque construction sera définie sous sa forme la plus complète et uniquement une fois 
SCORE : 67157


 Il en résulte que toutes les propriétés temporelles du modèle fonctionnel découlent essentiellement des propriétés du modèle comportemental des fonctions 
SCORE : 67103


 Il faut donc déjà partir des entrées et sorties fonctionnelles et non pas physiques 
SCORE : 67005


 Il faut donc déjà partir des entrées et sorties fonctionnelles et non pas physiques 
SCORE : 67005


 -C- Analyse architecturale La description de l’architecture matérielle permet de déclarer les ressources (mémoire, processeur 
SCORE : 66983


 Pour un ensemble 1:1, on trouve le noeud correspondant au cas représenté dans le texte (ici StructureDef) 
SCORE : 66976


 Un temps est obligatoirement associé aux éléments de relation (voir les attributs du modèle structurel) 
SCORE : 66969


 De la même manière, il va créer la structure interne XTemplateDs à partir du fichier texte XTemplate 
SCORE : 66951


 De la même manière, il va créer la structure interne XTemplateDs à partir du fichier texte XTemplate 
SCORE : 66951


 Durant une évaluation, un seul paramètre au maximum doit être considéré comme variable 
SCORE : 66910


 Ces valeurs quantifient la qualité d’un aspect particulier du système placé dans un contexte donné d’exploitation 
SCORE : 66895


 On utilise ce champ ElementName car une condition d’évolution ou une action peut être simple ou composée 
SCORE : 66874


 Chaque activité est caractérisée par: son comportement interne, son temps d’exécution 
SCORE : 66857


 L’exemple d’application fourni par le CCETT de Rennes est le serveur vidéo temps-réel décrit dans le chapitre 7 
SCORE : 66835


 La co-simulation n’est pas la seule technique disponible pour vérifier la conception et l’implantation d’un système 
SCORE : 66808


 qui indique une mise en attente sur une condition d’activation avec libération de la ressource d’exécution, - WaitingTask(state:DefState) 
SCORE : 66735


 Dans le premier cas, le signal assurant le protocole est utilisé comme nom du port 
SCORE : 66733


 Une qualité essentielle du loader est son aptitude à pouvoir s’adapter à toute modification de la grammaire 
SCORE : 66695


E La référence sur la nouvelle structure inclut aussi la référence sur la grammaire source pour l’interprétation 
SCORE : 66685


 L'étape de définition de la réalisation conduit à mettre en évidence les 2 parties : matériel, logiciel 
SCORE : 66680


 L'étape de définition de la réalisation conduit à mettre en évidence les 2 parties : matériel, logiciel 
SCORE : 66680


 Un consommateur est également supposé dépenser au moins 1 ms pour exploiter chaque message reçu 
SCORE : 66672


 Un fichier sérialisé sera chargé plus rapidement qu’un fichier texte, mais il n’est pas lisible 
SCORE : 66647


 On peut donc se dire qu’il s’agit de rechercher un langage de manipulation de structures 
SCORE : 66627


3 Structure de données pour une solution Considérons maintenant un texte respectant les règles de grammaire ci-dessus 
SCORE : 66615


 Avec le modèle de performance de MCSE, les estimations de performances dynamiques s’obtiennent à partir des temps d’exécution supposés pour les opérations 
SCORE : 66556


 Mise à jour de la clause port map du composant et déclaration des types et signaux associés 
SCORE : 66527


 Pour être bonne, l'analyse doit se faire sur un plan fonctionnel et non matériel 
SCORE : 66518


 Pour être bonne, l'analyse doit se faire sur un plan fonctionnel et non matériel 
SCORE : 66518


 Le débit d’un utilisateur est tiré aléatoirement selon une loi uniforme U(0,15) (débit exprimé en Mbits/s) 
SCORE : 66493


 Niveau 1 Niveau 2 Niveau 3 Niveau 4 Abstrait Concret PRODUIT Temps DEFINITION de la REALISATION REALISATION Spécifications Description fonctionnelle Description exécutive Modèles Spécification Modèle fonctionnel Modèle d’exécution Spécifications Spécifications fonctionnelles et opératoires CHARGES CAHIER DES technologiques CONCEPTION FONCTIONNELLE Spécifications technologiques de réalisation SPECIFICATION 1 - PRESENTATION GENERALE DE LA METHODOLOGIE M 
SCORE : 66489


 Niveau 1 Niveau 2 Niveau 3 Niveau 4 Abstrait Concret PRODUIT Temps DEFINITION de la REALISATION REALISATION Spécifications Description fonctionnelle Description exécutive Modèles Spécification Modèle fonctionnel Modèle d’exécution Spécifications Spécifications fonctionnelles et opératoires CHARGES CAHIER DES technologiques CONCEPTION FONCTIONNELLE Spécifications technologiques de réalisation SPECIFICATION 1 - PRESENTATION GENERALE DE LA METHODOLOGIE M 
SCORE : 66489


 Le concept d’attributs associés aux objets permet aisément de définir un comportement 
SCORE : 66438


 Un ordonnanceur est associé à chaque processeur et permet de modéliser du multi-tâches [ROSE-96] 
SCORE : 66410


 -C- Allocation L’outil ne se contente pas d’aider le concepteur à optimiser les performances des parties matérielle ou logicielle séparément 
SCORE : 66406


 Nous retenons les instructions suivantes: - Règle = suite d’instructions ou de règles exécutées en séquence, - While Condition do règle 
SCORE : 66363


9 sur la structure interne d’un générateur du chapitre 5 peut se raffiner comme le montre la figure 6 
SCORE : 66354


 Un élément de relation est transcrit par une entité générique qui est instanciée sous la forme d’un composant 
SCORE : 66342


 Un générateur est donc le résultat de l’écriture d’un script fourni à un programme (automate d’exécution) 
SCORE : 66321


 Compte-tenu du choix adopté pour l’implantation d’un ensemble, il s’agit d’effectuer les opérations plus élémentaires suivantes: TmpDs := SourceDs 
SCORE : 66311


 De toute façon, un concepteur de script pourra optimiser ou compléter cette base à sa guise 
SCORE : 66309


 De plus pour pouvoir modifier la structure interne, l’enrichir par exemple, il faut ajouter une fonction Edit 
SCORE : 66305


 - Les systèmes de traitement concernés principalement par les traitements de toutes formes d’informations: signal, image, parole 
SCORE : 66293


 Enfin, il peut transcrire le script en un programme Java dont l’exécution sera beaucoup plus rapide (Code) 
SCORE : 66283


 On obtient alors un shift/reduce conflit où le shift l’importe: ce qui correspond à une associativité à droite 
SCORE : 66258


 CONSEILS POUR UNE UTILISATION RATIONNELLE DE MCSE Nous rappelons ici les principes essentiels de la Méthodologie qu'il est conseillé de suivre pour obtenir les meilleurs résultats 
SCORE : 66242


 CONSEILS POUR UNE UTILISATION RATIONNELLE DE MCSE Nous rappelons ici les principes essentiels de la Méthodologie qu'il est conseillé de suivre pour obtenir les meilleurs résultats 
SCORE : 66242


 Ceci implique la possibilité de préemption du processeur ou de la ressource d’exécution pour une fonction ou une activité interne 
SCORE : 66205


E Les règles de génération concernant la composante comportementale du modèle de performance de MCSE sont données dans le tableau suivant 
SCORE : 66186


 En général, la répartition logiciel/matériel découle des contraintes de temps d'exécution d'une fonction 
SCORE : 66171


 L’ingénieur électronicien est parfois amené à développer un seul circuit intégré pour une application spécifique (ASIC = Application-specific IC) 
SCORE : 66150


 Chaque unité de comportement, c’est-à-dire fonction, activité ou opération, est transcrite comme une tâche 
SCORE : 66141


 Se pose le problème des règles d'interconnexion entre composants actifs et éléments de relation 
SCORE : 66110


 Ce fichier est alors directement exploitable par un outil d’analyse de performances (MCSE-PERF) pour la présentation des résultats 
SCORE : 66078


 De même lorsque A11 s’achève, le symbole Exit associé engendre l’achèvement de A1 et donc la suppression de l’attente sur Stop 
SCORE : 66064


 Ces outils se distinguent par le format de spécification de la grammaire et l’algorithme d’analyse syntaxique utilisé 
SCORE : 66051


 L’exécution de l’objet MCSE-Parser produit des instances des objets de la classe MCSEGrammarDs pour représenter une solution de description 
SCORE : 66032


 La fonction F commence par une opération Op0 et se met ensuite en attente d’un message sur l’un des ports du vecteur M 
SCORE : 66031


 La décomposition du script en deux parties facilite sa lisibilité et sa maintenance 
SCORE : 66023


 Le code de la grammaire VHDL comporte 3084 lignes alors que celui de la grammaire du modèle MCSE ne nécessite que 1750 lignes 
SCORE : 66010


 Ces temps peuvent se déduire plus précisément à partir d’une description VHDL ou C de l’algorithme de l’activité élémentaire 
SCORE : 65928


1 Transcription d’une fonction Dans le cas général, une fonction sera transcrite sous la forme d’une entité 
SCORE : 65926


 >favoriser le partenariat Une collaboration profitable aux deux parties est basée sur le principe “win-win” 
SCORE : 65842


 Un support de communication est caractérisé par sa capacité et chaque message par sa taille 
SCORE : 65818


 Notre modèle est en effet basé sur l’emploi du modèle fonctionnel et du modèle exécutif préconisés par la méthodologie MCSE et d’un modèle de comportement des fonctions 
SCORE : 65769


 Contrairement à l’évaluation analytique, la simulation a l’avantage de pouvoir analyser tout type de systèmes 
SCORE : 65759


 Pour le modèle structurel, nous considérons important de pouvoir disposer du concept de composants génériques 
SCORE : 65753


 Elle inclut une évolution selon 2 branches exclusives avec une sélection aléatoire définie par une probabilité 
SCORE : 65749


 Ce fichier doit contenir toutes les constructions du langage utiles pour la génération de code 
SCORE : 65714


 Il doit juste redéfinir l’allocation des éléments fonctionnels sur les éléments de la structure exécutive (mapping) 
SCORE : 65648


 La séparation des types nécessite de déclarer une primitive d’accès pour chaque type d’information 
SCORE : 65610


 Cette description résultante est ensuite transformée par synthèse logique en une netlist de portes et de bistables pour une implantation dans un circuit 
SCORE : 65598


 Transcrit en VHDL en appliquant les règles décrites dans le chapitre 4, ce modèle de performance permet de faire une co-simulation Introduction M 
SCORE : 65562


 Les entrées et les données internes influencent le comportement du système uniquement par l’intermédiaire d’attributs 
SCORE : 65550


 Les entrées et les données internes influencent le comportement du système uniquement par l’intermédiaire d’attributs 
SCORE : 65550


 Un tel parser est ici appelé Grammar-Parser puisqu’il exploite pour cela en entrée la grammaire du modèle MCSE 
SCORE : 65532


 Lorsque toutes les branches parallèles ont été exécutées, le processus père reprend la main (primitive WaitJoin et WaitingTask) 
SCORE : 65499


2 Difficultés rencontrées Certaines constructions du modèle MCSE et leurs principes de transcription en VHDL posent des difficultés pour la génération automatique de code 
SCORE : 65496


 Ainsi, l’outil ne permet pas d’explorer le domaine des solutions possibles d’un partitionnement logiciel/ matériel 
SCORE : 65489


2 Comportement macroscopique de la structure Il s'agit de spécifier le comportement directement et obligatoirement induit par la structure 
SCORE : 65484


 La compréhension est facilitée si l’on utilise un modèle graphique qui permet une représentation à au moins deux dimensions 
SCORE : 65481


 Ainsi, il est possible d’observer l’influence de la politique d’ordonnancement (attribut ‘Policy) et de la puissance du processeur (attribut ‘Power) 
SCORE : 65450


 Un script se décompose en deux parties: une partie déclaration et une partie description des opérations 
SCORE : 65438


5 explique la technique dite du "bootstrapping" que nous avons utilisée pour engendrer le parser souhaité 
SCORE : 65397


 Pour cela, il est utile d’exprimer les propriétés locales d’un modèle par des attributs associés aux éléments du modèle 
SCORE : 65393


 L’une des branches inclut une boucle représentant l’exécution multiple (ici N fois) de l’opération A11 
SCORE : 65389


 La rupture de séquence en lecture se détecte par le non-respect de la contrainte de temps T qui correspond à la période 
SCORE : 65310


E La fonction commence par demander les A premiers fragments puis attend la réception de ceux-ci 
SCORE : 65290


 Le diagramme de déroulement temporel est assez limité car il ne représente que l’état actif d’une tâche 
SCORE : 65286


 Elle se termine quand l’analyseur lexical n’émet plus d’unités et que la pile de l’analyseur syntaxique est vide 
SCORE : 65276


 Lorsque la compilation s’est passée sans erreur, le concepteur peut lancer l’interprétation de son script (Execute) 
SCORE : 65205


 -C- Implantation La communication entre une fonction et une variable partagée ou une ressource est implantée par un signal DefDataAccess regroupant Status et Value 
SCORE : 65202


Id), SupervisionState) car l’indice d’un vecteur lors d’un appel procédural doit être une expression statique 
SCORE : 65199


 Il permet donc de contrôler les cycles, de détecter l’existence de blocages éventuels et de s’assurer que tous les états sont atteignables 
SCORE : 65186


 -A- La classe VariableScript Chaque variable du script possède une référence sur la grammaire et la règle de grammaire concernées 
SCORE : 65186


 Si des connaissances importantes pour l’entreprise doivent être discutées avec des tiers, il y a lieu de signer au préalable un accord de confidentialité (NDA = Non-Disclosure Agreement) 
SCORE : 65180


 Les réseaux de Petri représentent le flot de contrôle et le flot de données des parties matérielles et logicielles 
SCORE : 65150


 La description textuelle d’entrée et celle de sortie du générateur à développer sont conformes à une grammaire 
SCORE : 65133


 Sur un Pentium 90, le test s’effectue en 135 secondes en mode interprété et 28 en code java 
SCORE : 65125


 Il permet également de surcharger dynamiquement les attributs (temps d’accès en lecture et Transcription du modèle de performance en VHDL M 
SCORE : 65051


 Cette entité est instanciée sous la forme d’un composant et les attributs définis à ce stade sont statiques 
SCORE : 65045


 Les raisons de ce succès sont principalement liées à la sélection minutieuse des constructions du langage et son ouverture sur le web 
SCORE : 65024


 Les spécifications considérées sont en réalité une description fonctionnelle détaillée résultant d’une approche système 
SCORE : 65018


 Le code algorithmique des opérations doit alors être saisi manuellement par le concepteur 
SCORE : 65013


 Parmi les restrictions du langage VHDL pour la simulation de notre modèle de performance, la plus contraignante est le manque de généricité pour la déclaration des types 
SCORE : 64993


 Elle exploite une fonction de résolution strictement nécessaire pour gérer la variable partagée state 
SCORE : 64979


E 51 3 Le modèle de performance de MCSE Pour le demandeur, un système est caractérisé par des exigences fonctionnelles et des exigences non-fonctionnelles 
SCORE : 64856


 Il peut aussi revenir sur l’architecture matérielle en changeant sa constitution et/ou des caractéristiques de ses composants 
SCORE : 64838


 Pour accélérer la simulation du modèle logiciel, l’outil calcule le temps total nécessaire à l’exécution d’une instruction 
SCORE : 64818


4-a représente la structure fonctionnelle constituée des fonctions Prod et Cons reliées par le port de communication nommé Port 
SCORE : 64810


 Elles peuvent contenir des valeurs d’attributs qui sont significatifs comme information abstraite pour la modélisation de performance 
SCORE : 64797


E 177 Les entrées acceptées par l’analyseur syntaxique qui ne sont pas des constructions VHDL correctes peuvent être rejetées par des contrôles sémantiques 
SCORE : 64784


 Si aucune valeur n'est fixée, il s'agit d'une sélection équiprobable, donc sélection à tour de rôle 
SCORE : 64778


 Le raffinement d’un élément actif se compose d’éléments de relation et d’éléments actifs (ComponentDescription) et/ou d’instances de modèle (ComponentInstanceDeclaration) 
SCORE : 64771


 Ils font partie d’un ensemble (système+environnement) composé d’actionneurs qu’ils contrôlent en fonction des événements perçus par des capteurs 
SCORE : 64766


E 75 L’activité A1 montre un raffinement particulier puisque le symbole "Exit" est utilisé (carré noir) 
SCORE : 64753


7 Transcription des actions La transcription des actions multiples est la duale de celle des conditions et ne pose pas de difficultés particulières 
SCORE : 64750


 On utilise donc cette technique sachant qu’une seule séquence est exécutable après 
SCORE : 64702


 Il doit également permettre d’accroître la qualité de conception et de réduire le temps de développement 
SCORE : 64692


 Sa signification peut au moins s’étendre à la description des architectures système, à la modélisation des ateliers, etc 
SCORE : 64681


 Cette solution est une vue orientée vers l'application et se doit d'être indépendante de la technologie 
SCORE : 64671


 La vue fonctionnelle doit bien définir toutes les transformations prévues sur les informations 
SCORE : 64660


 L’attribut ‘Level est optionnel et permet d’indiquer le niveau ou la catégorie de l’élément dans la structure complète 
SCORE : 64655


 Le parcours BFS consiste à parcourir l’arborescence par niveau, de gauche à droite dans chaque niveau 
SCORE : 64620


E L’élément partagé est transcrit en VHDL comme une entité instanciée sous la forme de composant 
SCORE : 64618


 Le deuxième cas en dessous indique que toutes les fonctions F2[i] peuvent faire un retrait de Pt 
SCORE : 64616


 Nous commencerons par décrire les principaux modèles de performances existants et les outils les plus représentatifs qui leur sont associés 
SCORE : 64613


 >maintien du savoir-faire Produire en interne peut être une bonne protection contre la concurrence 
SCORE : 64566


 L’expression de ce comportement s’effectue simplement en ajoutant des attributs aux éléments de la structure 
SCORE : 64517


1 Définition Le terme performance est très souvent utilisé sans que la signification soit claire 
SCORE : 64496


 Il s’agit alors de vecteurs de fonctions, de ports, de variables partagées, d’événements, de noeuds 
SCORE : 64492


 Ce guide est la méthode à suivre : technique d'analyse, séquence des décisions, critères de choix 
SCORE : 64487


 Ce guide est la méthode à suivre : technique d'analyse, séquence des décisions, critères de choix 
SCORE : 64487


 Ceci permet à l’utilisateur de pouvoir découper son code en différents petits morceaux de script 
SCORE : 64415


 Pour un noeud de composition, la notation est identique à celle de la grammaire, mais l’implantation diffère 
SCORE : 64332


 Contrairement au modèle structurel, le modèle comportemental est plus riche en concepts et n’est pas strictement hiérarchique, ce qui ne facilite son analyse 
SCORE : 64332


 Après une opération Op0 représentant des opérations d’initialisation, une première requête est envoyée via le port de communication Req 
SCORE : 64321


1 Présentation de l’exemple Le serveur audio-visuel se place dans un service de consultation à distance de séquences vidéo ou sonores 
SCORE : 64313


 Comme notre but n’est pas de générer un éditeur orienté par la syntaxe, nous n’aborderons pas le sujet des contrôles sémantiques 
SCORE : 64309


 Puis peu à peu, l’arrivée de microprocesseurs spécifiques (DSP) de plus en plus performants a donné une part de plus en plus importante au logiciel 
SCORE : 64287


 Les deux modèles sont enrichis avec des attributs pour spécifier les caractéristiques de chaque élément 
SCORE : 64220


7 INTERFACE UTILISATEUR DE L’OUTIL OBTENU Le générateur obtenu est intégré dans une plate-forme d’outils en cours de développement nommée McseTools 
SCORE : 64213


 Ce méta-modèle fait clairement apparaître des bouclages indiquant que l’algorithme de parcours est récursif ou utilise une pile 
SCORE : 64143


 Ne peut-on pas alors pousser plus loin le raisonnement en cherchant une solution d’un seul générateur programmable de l’extérieur 
SCORE : 64132


 Les deux modèles sont enrichis avec des attributs pour spécifier les caractéristiques de chaque composant 
SCORE : 64125


 En plus, les conditions d’activation peuvent être composées (Ordre strict, Et sans ordre, l’un, sélection) 
SCORE : 64125


 Pour un événement du type fugace, il n’y a exploitation de l’événement que s’il y a au moins un récepteur de l’événement en attente 
SCORE : 64117


 Le travail effectué lors de cette thèse a débouché sur: - l’enrichissement et la validation des concepts du modèle de performance 
SCORE : 64080


 Notons que le principe de traduction consiste à nouveau à considérer que l’élément de relation est un élément passif 
SCORE : 64077


 Pour le type fugace, il n’y a pas mémorisation de l’événement si un constituant actif destinataire n’est pas en attente 
SCORE : 64064


4-b, appelée structure mixte ou architecturale, regroupe les 2 points de vue fonctionnel et exécutif 
SCORE : 64057


 Ainsi ne peut-on pas utiliser Edit pour sélectionner une solution particulière pour la génération lorsque plusieurs sont possibles 
SCORE : 64017


 L’attribut ‘Power dans l’argument TaskState est utilisé pour modifier le temps d’exécution fourni comme argument 
SCORE : 64002


 En effet, l’apparente simplicité du développement d’un circuit intégré est largement compensée par l’inaccessibilité et l’aspect définitif de sa réalisation 
SCORE : 63992


4 IMPLANTATION DE LA FONCTION D’ORDONNANCEMENT La limitation du parallélisme de la ressource d’exécution est assurée par une fonction Scheduler ajoutée en interne de chaque fonction 
SCORE : 63983


 Il est aussi essentiel de chercher à satisfaire la demande et non pas se satisfaire de son développement 
SCORE : 63957


 Il est aussi essentiel de chercher à satisfaire la demande et non pas se satisfaire de son développement 
SCORE : 63957


E 7 coût, sont beaucoup plus délicates à formaliser et pourtant elles sont essentielles pour décider d’un partitionnement approprié et justifié 
SCORE : 63942


 Une synthèse des méthodes et algorithmes de partitionnement matériel/logiciel automatiques est présenté par Rousseau, Bergé et Israel [ROUSSEAU-95] 
SCORE : 63904


 Cette variable va être modifiée par l’ordonnanceur Scheduler pour indiquer les états actifs et suspendus de la tâche 
SCORE : 63833


12 que Cmd est un événement et que l’activité A11 est implantée sur un processeur, la nouvelle primitive SignalEv est: PROCEDURE SignalEv( SIGNAL eve : INOUT DefSignalIn 
SCORE : 63805


 Les producteurs et consommateurs de jetons sont très utiles pour modéliser l’environnement du système à étudier 
SCORE : 63804


 Les symboles terminaux représentent les mots clés et les expressions régulières (identificateurs, nombre, etc) 
SCORE : 63735


 Lorsqu’ils sont produits en grande série, ils doivent présenter un coût de fabrication minimum 
SCORE : 63730


 L’attribut me’Index est alors traduit sous la forme d’une constante (constante me) 
SCORE : 63685


 L’utilisation de modèles hybrides a pour but de faciliter la transition d’une phase de conception à une autre 
SCORE : 63665


 Même pour les petits systèmes, cette diversité rend de plus en plus difficile la conception intuitive basée sur l’expérience du concepteur 
SCORE : 63641


 Hiérarchique et graphique, le modèle fonctionnel facilite la recherche progressive d’une solution par transformations de comportements en structures 
SCORE : 63611


 Les deux vues sont enrichies avec des attributs pour spécifier les caractéristiques de chaque élément 
SCORE : 63573


 L’implantation distingue le port du type rendez-vous (’Capacity=0) des ports à N places (N>0) ou fugace 
SCORE : 63569


 •Pour compenser un peur ces défauts, le prototype se fait en principe avec une technologie programmable (FPGA, par exemple) 
SCORE : 63532


6 TRANSCRIPTION DU MODELE COMPORTEMENTAL Le comportement de chaque fonction est modélisé comme un ensemble de process synchronisés et coopérants 
SCORE : 63492


E 151 - Il met ensuite à jour la structure créée dans OutputDs compte-tenu des champs des noeuds de McseDs 
SCORE : 63468


 Pour des accès à une variable partagée à des niveaux hiérarchiques différents, on instancie une interface (décodeur de priorité) 
SCORE : 63454


 Il est possible d’utiliser une désignation fixe ou d’exploiter l'identité (‘Id) du contenu dans le cas d'une information 
SCORE : 63398


 Chaque variable est également gérée comme une pile qui permet la récursivité et la gestion de listes 
SCORE : 63397


 Seul le cas de la simultanéité diffère et nécessite l’activation de process synchronisés par les méthodes Fork/Join (figure 4 
SCORE : 63395


 A tout moment, il peut aussi envoyer un message avec les instructions "Display(msg) 
SCORE : 63369


4-c, lorsqu’un producteur désire déposer un message, il fait appel à la procédure Send (à gauche de la figure) 
SCORE : 63362


 L’implantation en VHDL ne pose aucune difficulté et découle directement de ce qui a été fait pour les ports 
SCORE : 63351


 Ainsi comme le montre la figure ci-après, le modèle de cycle de développement est un emboîtement de développements 
SCORE : 63332


 Ainsi comme le montre la figure ci-après, le modèle de cycle de développement est un emboîtement de développements 
SCORE : 63332


 Le symbole est choisi différent pour une activité raffinée ceci pour faciliter l'interprétation du modèle graphique 
SCORE : 63303


 Cette distinction facilite l’exploration du domaine des solutions possibles d’un partitionnement matériel/logiciel 
SCORE : 63295


 Un modèle peut posséder des paramètres génériques qui définissent son emploi à l’instant de l’instanciation 
SCORE : 63273


 [:] veut dire tout le vecteur et ses bornes sont celles de sa définition 
SCORE : 63272


 Cette phase d’optimisation est une pseudo-interprétation du script qui ne tient compte que du type des variables 
SCORE : 63267


E 169 -B- Les classes des noeuds de structure Les classes des noeuds de structure héritent toutes de la classe NodeDs 
SCORE : 63253


 Lors d’une assignation, il y a systématiquement vérification de la cohérence entre le type de la variable et la valeur qui lui est assignée 
SCORE : 63183


 L’algorithme d’analyse d’une action se déduit facilement par dualité de celui d’une condition d’évolution 
SCORE : 63177


 Sa multiplicité est décrite comme un vecteur défini par l’indice de début et l’indice de fin 
SCORE : 63151


 La transcription doit aussi satisfaire les particularités de l’activation conditionnelle et de l’achèvement forcé 
SCORE : 63145


 -H- GUIDE POUR LA CONDUITE DE PROJET Le modèle de cycle de développement est utilisable pour la mise en place d'une procédure de conduite d'un ensemble de projets 
SCORE : 63128


 -H- GUIDE POUR LA CONDUITE DE PROJET Le modèle de cycle de développement est utilisable pour la mise en place d'une procédure de conduite d'un ensemble de projets 
SCORE : 63128


 Dans ce modèle, un utilisateur est représenté par une transaction (ou jeton) qui accède au processeur par l’intermédiaire d’une file d’attente 
SCORE : 63113


 2 temps sont à considérer pour son utilisation: allocation ou écriture/modification, libération ou lecture 
SCORE : 63088


 La génération d’un package est due uniquement aux limitations sur la généricité des types du langage VHDL 
SCORE : 63082


 Au-delà de l'aspect méthode, l'idée des modèles génériques de solutions a un intérêt certain 
SCORE : 63080


 Au-delà de l'aspect méthode, l'idée des modèles génériques de solutions a un intérêt certain 
SCORE : 63080


 -D- Analyse d’un élément de relation Les composants sont couplés entre eux par l’intermédiaire d’éléments de relation 
SCORE : 63066


E 107 Très proche de ceux du port à N places ou de l’événement, l’automate modélisant le comportement (figure 4 
SCORE : 63062


 Parfois pour protéger la propriété intellectuelle du fabricant, le modèle de simulation du microprocesseur est uniquement un modèle de bus (bus level model) 
SCORE : 62984


 Dans la réalité industrielle, le partitionnement d’un système ne pose problème que pour une petite partie du système 
SCORE : 62981


 Il est évident que d’autres politiques sont aisément implantables par extension algorithmique en utilisant la valeur de l’attribut ‘Policy 
SCORE : 62949


 Nous présentons donc dans ce chapitre à titre d’illustration les résultats de performance obtenus pour l’exemple 
SCORE : 62918


 >Quelle doit être la forme finale du produit: prototype de laboratoire, prototype industrialisable, design, etc 
SCORE : 62897


 On distingue deux types de parcours DFS: - En préordre ou préfixé ou parcours descendant (top-down) 
SCORE : 62845


 Ce symbole sera aussi utilisé pour sortir de l’activité englobante par un achèvement forcé 
SCORE : 62817


 Des chiffres de plus de 70 % sont cités, ce pourcentage étant bien entendu très dépendant du problème traité 
SCORE : 62800


 La variable partagée Séquences est maintenant remplacée par un ensemble de ND fonctions, chacune modélisant un disque 
SCORE : 62790


 Cette notation est exploitable en mixant les 3 types d'entrée: synchronisation, transfert d’information et donnée permanente 
SCORE : 62763


FM ETAPE 6: LA VALIDATION •Toutes les méthodologies existantes insistent sur le fait de tester et valider à chaque phase de production du système 
SCORE : 62736


2 Opération, activité élémentaire L'opération est l'unité comportementale la plus élémentaire, donc non-décomposable 
SCORE : 62726


 Le générateur de code VHDL se contente alors simplement de mettre à jour le contenu du record DefInformation 
SCORE : 62711


 La différence vient du fait que le temps ‘Use n’a pas de signification et que la ressource est considérée occupée entre le Alloc et Release 
SCORE : 62694


 Les spécifications non fonctionnelles représentent tout ce qui dans le cahier des charges n’est pas une exigence fonctionnelle 
SCORE : 62692


 Mais, cette mise à plat n’est pas possible si il y a une imbrication de fonctions multiples sur plusieurs niveaux 
SCORE : 62648


 La seule contrainte imposée concerne l’accès à la donnée de façon à conserver l’intégrité de l’information 
SCORE : 62640


 Ces indices peuvent être des constantes ou des variables (paramètre générique expliqué plus loin) 
SCORE : 62600


 Dans cette étape a lieu le découpage entre les fonctions logicielles et matérielles (software et hardware = CODESIGN []) 
SCORE : 62580


 Cette solution conduit à devoir développer autant de générateurs que de résultats différents en sortie 
SCORE : 62543


 Le nombre d’utilisateurs est fixe et doit être inférieur à la taille des files d’attente 
SCORE : 62542


 Des attributs caractérisent cette fonction: son degré de concurrence (attribut ‘Concurrency) et sa puissance (attribut ‘Power) 
SCORE : 62488


 La variable InfCmdCanalLec liée à l’entrée CmdCanalLec[] est déclarée comme shared variable au niveau NbTask=2 Nbtask=3 NbTask=2 F1 ‘Concurrency=1 F11 F12 F111 F112 [1:n] PortMultiple: PortMapMultiple: StateVector => StateVector(IndexVector+1 To IndexVector+n*NbTask) StateVector: INOUT DefStateVector(1 TO n*NbTask) PortSimple: StateVector : INOUT DefStateVector(1 TO NbTask) PortMapSimple: StateVector => StateVector(NbTask*(i-1)+1 TO i*NbTask) PortMapSimple: StateVector => StateVector(IndexVector+1 TO IndexVector+NbTask) PortSimple: StateVector : INOUT DefStateVector(1 TO NbTask) IndexVector:=IndexVector+n*NbTask 
SCORE : 62468


5e+06 5 10 15 20 25 30 "k=3" "k=6" "k=9" 0 
SCORE : 62378


 Un fragment correspond à une quantité fixe d’information définie par la technique de mémorisation du serveur 
SCORE : 62352


 Les performances statiques peuvent se déterminer à l’aide d’estimateurs (calcul analytique et/ou heuristique) 
SCORE : 62276


 Le comportement de l’entité Port est constitué de deux automates pour un port à N places ou fugace (figure 4 
SCORE : 62273


 Le concept d’attribut pour définir des propriétés aux constituants permet d’enrichir le modèle à volonté 
SCORE : 62266


 Dans la suite, on ne fera pas obligatoirement de distinction entre les constituants du modèle fonctionnel et ceux du modèle exécutif 
SCORE : 62264


 L’ordre des traitements des feuilles de l’arborescence de l’exemple pour les 3 types de parcours possibles est le suivant 
SCORE : 62255


 Dans ce paragraphe nous analysons la structure de données ScriptDs pour déduire la spécification du moteur d’exécution 
SCORE : 62216


 La partie analyse extrait les informations pertinentes et appelle les règles de la partie génération 
SCORE : 62173


 Dans la suite, on s’intéresse successivement à la transcription d’une fonction, d’un port, d’un événement et d’une variable partagée 
SCORE : 62153


 Au niveau comportemental, ce générateur de code synthétisable n’accepte que des comportements de fonctions qui sont séquentielles et déterministes 
SCORE : 62150


 Le point de vue du comportement d’un composant est une vision orthogonale au point de vue structurel 
SCORE : 62139


 Les variables désignant une structure ou un noeud doivent être typées avec la grammaire 
SCORE : 62063


 open_Action save_Action exit_Action cut_Action copy_Action paste_Action replace_Action find_Action compile_Action execute_Action code_Action breakButton_Clicked stepButton_Clicked continueButtonClicked watchButtonClicked debugFlag_Action historyFlag_Action reload_Action Vector roots Vector Infos Vector paths  
SCORE : 62061


 Le but de cet exposé est d'expliquer les principales notions de la méthodologie d’un développement de circuit ou d’un système électronique 
SCORE : 62050


 En ce sens, l’application des principes de conception en vue du test (DFT) est primordiale pour la réussite du projet 
SCORE : 62049


2 Description textuelle du serveur vidéo Le modèle graphique ci-dessus est transcriptible en une notation textuelle 
SCORE : 62035


 La solution à retenir ici est très dépendante à la fois du modèle à traduire et du langage cible 
SCORE : 62022


 On commence par exploiter la racine puis la sous-arborescence de la gauche vers la droite 
SCORE : 61965


 Enfin, les vendeurs d’outils EDA fournissent aujourd’hui des solutions spécifiques au problème de la co-simulation (Seamless CVE de Mentor, Eagle i de Viewlogic) 
SCORE : 61891


 Si un accès par le nom est souhaité, une hashtable pour la mémorisation des identificateurs peut être appropriée 
SCORE : 61857


 La méthode de partitionnement retenue s’appuie sur une démarche itérative guidée par le concepteur et par une analyse des Chapitre 8 236 M 
SCORE : 61833


 •Le cahier des charges est le premier interface entre le commanditaire (le demandeur, le client) et le concepteur (le réalisateur) 
SCORE : 61726


 La fonction ReceptionMess est un process cyclique qui attend un message du port TB et l’envoie vers le port Lind 
SCORE : 61660


 L'évaluation pour un tel critère n'est pas simple car il s'agit d'une perception relativement subjective et qui en plus dépend des concepteurs 
SCORE : 61526


 Savoir rédiger correctement un cahier des charges est le fruit d'une longue expérience qui s'acquière progressivement, de projets en projets 
SCORE : 61520


 La transcription se limite donc simplement à convertir une structure de données en un enchaînement d’instructions 
SCORE : 61445


 Les techniques de raffinement, d’encapsulation (ou abstraction) et de réutilisation de modèles existants sont ici essentielles 
SCORE : 61368


 Un constituant actif multiple est représenté par son symbole avec son ombre 
SCORE : 61358


 - Chaque référence désigne 4 cas possibles: vide, un autre noeud, une valeur, un identificateur 
SCORE : 61354


 Elle peut être infinie (*) ou exprimée par une expression mathématique quelconque (comme pour les temps) 
SCORE : 61332


 -F- UN MODELE DE CYCLE DE DEVELOPPEMENT HIERARCHIQUE Pour un système relativement complexe, le modèle ci-dessus en double triangle n'est pas suffisamment précis 
SCORE : 61314


 -F- UN MODELE DE CYCLE DE DEVELOPPEMENT HIERARCHIQUE Pour un système relativement complexe, le modèle ci-dessus en double triangle n'est pas suffisamment précis 
SCORE : 61314


 Une modification de la grammaire du langage cible se veut être sans conséquence sur la partie Analyse 
SCORE : 61286


 Les primitives associées à l’état d’une tâche ont donc été légèrement modifiées 
SCORE : 61229


 Condition satisfaite Début exécution Inactive Wait Ressource allouée Waiting Ressource préemptée attente condition Fin exécution Blocked eAncdtive ExitNow Exit Exit Exit Fin exécution Transcription du modèle de performance en VHDL M 
SCORE : 61226


 Les modèles générés en VHDL peuvent s’échanger plus facilement entre différents groupes de travail 
SCORE : 61212


 L’efficacité de déduction provient de l’intégration complète du modèle de performance à la méthodologie de conception système MCSE 
SCORE : 61202


 Si le modèle MCSE source l’autorise, il est préférable de laisser le choix au concepteur de générer un modèle VHDL hiérarchique ou un modèle à plat 
SCORE : 61158


 Un ensemble peut être vide ou non, peut aussi être borné 
SCORE : 61099


 C veut dire que le texte comprend A ou B ou C (Ou exclusif) - Y ::= [ A ] veut dire que A est optionnel 
SCORE : 60973


 NOTA: les lignes indiquées en commentaires sont à considérer dans le cas du partage d’une ressource limitée pour plusieurs fonctions 
SCORE : 60937


 La structure de données d’une variable du script pour l’exécution est représentée par la figure suivante 
SCORE : 60923


 Il faut donc y ajouter un critère de sélection qui peut être déterministe ou probabiliste 
SCORE : 60864


2e+06 5 10 15 20 25 30 "k=3" "k=6" "k=9" 0 
SCORE : 60835


2e+06 5 10 15 20 25 30 "k=3" "k=6" "k=9" 0 
SCORE : 60835


 Il est utilisé pour l’étape de conception fonctionnelle et celle de conception architecturale de la méthodologie MCSE 
SCORE : 60788


 Ce texte sert de point d’entrée au générateur de code VHDL présenté dans le chapitre 6 
SCORE : 60727


 Le texte suivant constitue un ensemble de règles de grammaire écrites selon la norme BNF (Backus Naur Form) 
SCORE : 60725


 Le noeud ElementaryOp illustre le cas des 2 types d’opérandes: une variable ou constante, un champ d’un noeud 
SCORE : 60725


 On retrouve le noeud de composition et 4 types d’ensembles, chacun défini par des bornes différentes 
SCORE : 60606


 Chaque document est le résultat d'une étape, et sert comme informations pour l'étape suivante 
SCORE : 60551


 Chaque document est le résultat d'une étape, et sert comme informations pour l'étape suivante 
SCORE : 60551


 Cette phase de configuration correspond à l’étape de partitionnement et d’allocation en co-design 
SCORE : 60538


 Avant de conclure, nous présentons donc une liste non exhaustive d’améliorations possibles 
SCORE : 60521


 Comme pour les conditions d’évolution, on transforme la simultanéité et l’alternative comme indiqué ci-dessous 
SCORE : 60508


 Il s’agit de transcrire le modèle de performance en un code C++ et d’obtenir les résultats par exécution du programme C++ 
SCORE : 60507


E 133 5 Le Méta-Générateur MetaGen Après avoir défini les règles de transcription, il s’agit de les implanter dans un générateur de code 
SCORE : 60503


 Il est par exemple usuel de l’employer pour décrire la qualité d’un système à satisfaire un objectif demandé 
SCORE : 60503


 Le modèle de performance comporte également une vue comportementale qui est complémentaire et orthogonale à la vue structurelle 
SCORE : 60501


 L’algorithme d’analyse des paramètres génériques qui exploite la structure de données cidessus est le suivant 
SCORE : 60419


 Cette notation (a) se veut explicite pour bien montrer que lorsque Op1 s'achève, il y a attente de E pour poursuivre par A2 
SCORE : 60416


 Celle-ci est décrite comme un block avec ses entrées et sorties 
SCORE : 60392


 Les valeurs d’une variable sont gérées par une pile dont la tête est la valeur courante de la variable 
SCORE : 60389


 Le principe de description repose sur l’évolution d’une transaction à travers les divers noeuds d’un graphe 
SCORE : 60323


 Le comportement de chacune des 3 fonctions de la solution interne fonctionnelle est décrit par la figure 3 
SCORE : 60295


 Il peut s'agir d'une exécution N fois (*N) ou d’une exécution tous les N fois (correspond à une division (/N)) 
SCORE : 60238


 Ceci est possible avec l’opération de modification d’un champ décrite ci-après 
SCORE : 60211


 Une autre technique de co-simulation est également en cours de développement dans l’équipe MCSE 
SCORE : 60175


 Tout comme pour l’architecture matérielle, on peut analyser la vue logicielle seule 
SCORE : 60143


 Un protocole de communication est développé pour le couplage d’un élément de relation avec une fonction 
SCORE : 60117


 Mise à jour de la clause générique du composant en fonction des attributs de l’élément de relation 
SCORE : 60091


 La valeur plus élevée se justifie par le coté plus réaliste d’implantation des blocs ou des disques consécutifs (Round-Robin) 
SCORE : 60088


 Cette restriction a deux implications: - sur la déclaration des primitives d’accès aux éléments de relation 
SCORE : 60046


 Pour pouvoir analyser le modèle d’architecture seule, il faut injecter des jetons dans l’architecture matérielle 
SCORE : 60001


 Condition satisfaite Début exécution Inactive Wait Ressource allouée Waiting Ressource préemptée attente condition Fin exécution Blocked eAncdtive (WaitingTask) (BlockingTask) (InactiveTask) (WaitingTask) par le scheduler (BlockingTask) Transcription du modèle de performance en VHDL M 
SCORE : 59977


2 LES TEMPLATES UTILISES Le fichier template contient toutes les constructions du langage VHDL nécessaires pour le générateur 
SCORE : 59970


 •une fonction permanente : elle est tout le temps active, à la manière d’une fonction combinatoire 
SCORE : 59967


 L’outil réalisant la vérification grammaticale d’un texte s’appelle un analyseur syntaxique (ou parser) 
SCORE : 59966


 Elaboration des spécifications Pour pouvoir concevoir, il faut tout d'abord disposer des spécifications 
SCORE : 59952


 Elaboration des spécifications Pour pouvoir concevoir, il faut tout d'abord disposer des spécifications 
SCORE : 59952


 En fait, un noeud est simplement le cas particulier d’une structure à un seul élément 
SCORE : 59940


 La compréhension de ce fonctionnement est indispensable pour écrire les règles grammaticales d’une manière correcte et efficace 
SCORE : 59923


3) est composé des fonctions Environnement, F1 et F2 et des éléments de relation Mesures et M[1:n] pour le premier niveau de description 
SCORE : 59919


 La complexité actuelle des systèmes sort souvent du domaine d’application stricte des modèles analytiques 
SCORE : 59919


 Le fichier template de l’entité contient comme constructions de base du langage VHDL: GenericEntity ArchitectureBody EntityDeclaration DesignUnit NoParseContextClause OptionalDesignUnit Design Unit Design Unit Design Unit Entity Declara 
SCORE : 59916


9 donne la représentation graphique et la notation syntaxique pour chaque type de construction 
SCORE : 59915


 L’emploi d’un langage unique élimine aussi tout risque d’erreurs ou d’approximations de transcription 
SCORE : 59910


 Au premier niveau, la conception est générale et concerne l'application dans son ensemble 
SCORE : 59897


 Au premier niveau, la conception est générale et concerne l'application dans son ensemble 
SCORE : 59897


 La MetaDs sert alors à la construction de la représentation interne de la grammaire appelée ici GrammarDs 
SCORE : 59896


 La partie Génération regroupe l’ensemble des règles de production de la structure de données de sortie 
SCORE : 59878


 Pour la description logicielle, il existe dans le domaine public des outils de conversion de VHDL vers C et réciproquement 
SCORE : 59858


 Déclaration ou mise à jour du type, signal et alias associés à l’interface du block 
SCORE : 59835


16-a) fait partie de l’exemple du serveur vidéo présenté dans le chapitre 7 
SCORE : 59814


 En plus du champ Status, l’élément de base de communication possède deux autres champs Priority et Date 
SCORE : 59800


 Chaque message transmis contient l’adresse du destinataire, la longueur de l’information transmise et l’information 
SCORE : 59798


 La valeur par défaut de l’attribut ‘Id est la valeur ‘me représentant l’indice courant de la fonction 
SCORE : 59765


 Par exemple, un même script peut ainsi fournir un générateur pour C/VxWorks ou un générateur pour C/NoyauETRIreste 
SCORE : 59756


 Il s’agit d’un partitionnement fonctionnel c’est-à-dire vis-à-vis de l’objectif à satisfaire 
SCORE : 59749


 Nous définissons aussi une liste de critères de qualité d’un modèle de performance utile pour juger la pertinence de notre modèle 
SCORE : 59733


 Le deuxième champ indique le nombre de symboles qui suivent, sauf s’il un seul existe 
SCORE : 59728


 Un analyseur syntaxique est obtenu à partir de la spécification de la grammaire du langage concerné 
SCORE : 59724


 C’est un générateur d’analyseur syntaxique du type LALR(1) comparable à YACC qui génère du code JAVA et qui a été développé par Scott E 
SCORE : 59693


 Notre modèle est très utile pour la problématique du CoDesign qui correspond à l’étape de définition de la réalisation de la méthodologie MCSE 
SCORE : 59692


 Ils ne font donc pas partie du champs d’application de l’activité de co-design 
SCORE : 59638


2 METHODES DE PARTITIONNEMENT Le problème du partitionnement matériel/logiciel est au coeur de l’activité de co-design 
SCORE : 59637


 Une autre suggestion est de constituer plusieurs templates différents et de choisir le template le mieux adapté 
SCORE : 59633


 La fonction Lecture de l’exemple du serveur vidéo temps réel illustre ce cas 
SCORE : 59610


 De plus, même les "System on a chip" ne sont pas mono-processeur car ils disposent de plus en plus souvent d’un coeur de DSP et d’un coeur de microcontroleur (MCU) 
SCORE : 59610


 La taille du vecteur est alors un paramètre générique mais obligatoirement statique 
SCORE : 59575


 La solution basée sur l’emploi d’un langage simulable est celle décrite dans ce chapitre 
SCORE : 59570


 •C’est une vue importante pour la spécification d’un système contrôle/commande temps-réel 
SCORE : 59555


 La description d’un tel schéma est conventionnelle et s’obtient par l’emploi d’outils de saisie de schémas 
SCORE : 59553


 Il ne faut pas confondre activité (et opération) et état, ce qui justifie la notation légèrement différente 
SCORE : 59552


 Ces bancs mémoires sont caractérisés par leur temps d’accès et l’utilisation ou non d’un cache 
SCORE : 59523


 Les paramètres génériques de ce composant sont les attributs associés habituellement à un port de communication (‘Capacity, ‘Write, ‘Read, ‘Concurrency) 
SCORE : 59507


 Le port est décrit comme une entité instanciée sous la forme de composant 
SCORE : 59492


 PSP (Priority Scheduling Policy) veut dire le choix d’un ordonnancement des fonctions selon leur priorité 
SCORE : 59474


 Il faut ensuite assurer la mise à jour, par exemple modifier le nom X en Cmd 
SCORE : 59440


 Les messages permettent de contraindre l’activation d’une fonction et donc de contrôler son comportement 
SCORE : 59419


 Il correspond à la description du système à concevoir selon une vue purement externe 
SCORE : 59382


 Il correspond à la description du système à concevoir selon une vue purement externe 
SCORE : 59382


 Rappelons que les 3 types de relation pour le modèle de structure sont: - la synchronisation (événement), - le transfert d'information, Op1 E A2 A1 A2 E TOC TI Op1& 
SCORE : 59375


 GenerateFromIncludeFile information fournie: FileName Le fichier contenant l’algorithme de l’opération élémentaire est inclu par référence 
SCORE : 59374


 A notre point de vue, le StateChart (et également le SpecChart) est un modèle trop détaillé pour l’évaluation des performances 
SCORE : 59374


9 décrit un exemple qui montre clairement que la description suit le chemin parcouru par une transaction 
SCORE : 59370


 Pour l’approche système, la méthodologie présentée dans ce chapitre repose sur l’utilisation de la méthodologie MCSE 
SCORE : 59352


 Il s’agit par exemple de pouvoir exécuter une règle pour chaque élément de l’ensemble 
SCORE : 59337


 La fonction Recording assure la lecture auprès de la source de Size blocs et leur copie sur les disques 
SCORE : 59332


 La partie délicate est l’implantation du carré noir qui implique la fin immédiate de l’activité 
SCORE : 59312


 Le signal Status permet le handshake entre un producteur et un port à l’aide des 4 valeurs possibles: InactiveAck, ActiveAck, InactiveReq, ActiveReq 
SCORE : 59284


 - de la MetaDs et de la table des symboles de la méta-grammaire, indispensable pour l’interprétation de la grammaire et la production de la GrammarDs 
SCORE : 59222


8 EXTRACTION DES RESULTATS D’UN MODELE DE PERFORMANCE L’évaluation des performances d’un système nécessite l’extraction des informations pertinentes pour l’analyse 
SCORE : 59220


 Il résulte du travail déjà effectué pour l’ensemble du système au niveau fonctionnel 
SCORE : 59199


 La spécification d’une grammaire est une opération longue pour laquelle une maîtrise totale de la syntaxe est indispensable 
SCORE : 59175


 Pour satisfaire ces exigences, le modèle de simulation retenu pour le modèle de structure est représenté par la figure 4 
SCORE : 59162


3 TECHNIQUES DE CO-SIMULATION Les problèmes de la co-simulation et du partitionnement matériel/logiciel sont souvent liés 
SCORE : 59161


 On utilise pour cela la technique de l’activation multiple déjà vue dans le paragraphe 4 
SCORE : 59123


-93] se compose: - d’une source d’événements ou jetons (source) caractérisée par une distribution (Uniforme, Normale, Erlang, Poisson, etc 
SCORE : 59043


 La référence sur la nouvelle structure inclut la référence sur sa grammaire pour l’interprétation 
SCORE : 59008


 NOTA: Il n'y a pas de différence entre une opération et une activité non raffinée (même symbole) 
SCORE : 58973


 MCSE n'est pas à opposer aux autres méthodologies, bien au contraire, elle se veut complémentaire 
SCORE : 58958


 MCSE n'est pas à opposer aux autres méthodologies, bien au contraire, elle se veut complémentaire 
SCORE : 58958


1 Transcription d’un modèle de comportement séquentiel La transcription d’un modèle de comportement séquentiel ne pose pas de problème particulier 
SCORE : 58930


 Sous certaines conditions, des outils de synthèse haut-niveau (Behavioral Compiler de Synopsys, SpecSyn de l’UCI, AMICAL de l’équipe Tima, GAUT du Lasti-Lester, etc 
SCORE : 58927


 On peut également visualiser l’évolution temporelle du taux d’occupation d’une ressource 
SCORE : 58889


 Plus ces spécifications sont détaillées et conformes à des modèles formels, plus il est facile de déduire une solution 
SCORE : 58884


 Plus ces spécifications sont détaillées et conformes à des modèles formels, plus il est facile de déduire une solution 
SCORE : 58884


 L’exemple du système de communication a également permis de tester la transcription du modèle de performance en C++/Kernel Windows NT 
SCORE : 58824


 Le débit sur le bus dépend uniquement du paramètre k qui représente le nombre de cartes 
SCORE : 58771


 Il génère un programme VHDL simulable à partir d’un ensemble de blocs prédéfinis ou composants spécialisés 
SCORE : 58740


 Par conséquent, l’algorithme de parcours est un algorithme itératif utilisant une pile ou un algorithme récursif 
SCORE : 58728


 >WARD-1985 relève qu’il faut, pour caractériser une donnée, expliciter la signification, la composition et le type 
SCORE : 58697


 Pour cela, le pourcentage pour chaque opération ou une condition logique est associé au lien entrant 
SCORE : 58675


 La première colonne indique les 5 cas de règles de grammaire selon la notation BNF 
SCORE : 58665


 Lorsqu’une activité est considérée comme élémentaire, elle sera appelée opération 
SCORE : 58651


 La classe StartScript sert à lancer l’outil sous forme d’application locale ou d’applet 
SCORE : 58647


 Un état ne peut se décrire que par un diagramme d’états plus élémentaire (raffinement du statechart) 
SCORE : 58621


 Rien ne permet de modéliser des caractéristiques temporelles internes sinon l’emploi de variables Temps 
SCORE : 58586


 - le niveau Réalisation qui décrit la solution finale comme un ensemble de cartes et de logiciels 
SCORE : 58579


 - le niveau Réalisation qui décrit la solution finale comme un ensemble de cartes et de logiciels 
SCORE : 58579


 Il s’agit donc d’assurer la conversion du nom du champ en un index dans le noeud 
SCORE : 58565


 Ainsi, il est possible de représenter des comportements plus généraux que le modèle cyclique et séquentiel d’une fonction du modèle fonctionnel initial de MCSE 
SCORE : 58554


 L’exemple ci-dessous est une partie d’un fichier de template illustrant ces propos 
SCORE : 58550


 1- Initialement, le producteur assigne la valeur InactiveAck au signal Status, pendant que le port lui assigne la valeur InactiveAck 
SCORE : 58530


 a) Représentation graphique de la structure fonctionnelle du système b) Représentation textuelle partielle du système c) Code VHDLpartiel Transcription du modèle de performance en VHDL M 
SCORE : 58515


 Dans la suite, nous présentons tout d’abord globalement le modèle comportemental par un exemple 
SCORE : 58474


 L’outil réalisant cette décomposition en différentes unités s’appelle un analyseur lexical (ou scanner) 
SCORE : 58450


 La cohérence entre les différentes vues est gérée par l’outil de manière transparente pour l’utilisateur 
SCORE : 58372


 La méthodologie MCSE possédait déjà un modèle de comportement reposant sur la composition d’opérations élémentaires statiques 
SCORE : 58365


3 représente les différentes phases de la démarche de co-design [CALVEZ-94] [CALVEZ-96c] 
SCORE : 58314


 Les doubles flèches sur les grandeurs internes en entrées et sorties signifient qu’il s’agit de données permanentes 
SCORE : 58309


 Généralement la structure de donnée interne s’appelle un "parse tree" ou encore "intermediate code representation" 
SCORE : 58306


 A ce stade le concepteur fait face à la problématique de partitionnement matériel/logiciel 
SCORE : 58306


 La traçabilité entre modèles de différents niveaux doit être gérée 
SCORE : 58261


 Eli Computer Construction System est le plus complet car il fournit également des outils pour les phases d’optimisation et de génération de code 
SCORE : 58250


 -B- ETAPE DE CONCEPTION Pour cette étape, le premier point important est de faire une conception indépendante de la technologie 
SCORE : 58233


 -B- ETAPE DE CONCEPTION Pour cette étape, le premier point important est de faire une conception indépendante de la technologie 
SCORE : 58233


 Pour cette vérification, le message reçu par SéquenceOut[] doit contenir le débit ‘Débit comme attribut 
SCORE : 58231


 La répétition peut aussi être spécifiée par une condition de fin (until (=)) 
SCORE : 58229


 D'autre part, des instanciations multiples de fonctions ou d'éléments de relation sont possibles 
SCORE : 58219


 Time-to-market : la vitesse de pénétration sur le marché est un des facteur les plus important pour assurer la survie de l’entreprise 
SCORE : 58196


 Une activité ou une opération implique l’utilisation d’une ressource d’exécution pour son intervention 
SCORE : 58175


 Il faut tenir compte de tous les cas de scénario de charge du système 
SCORE : 58157


 GenerateElementaryActivity informations fournies: Name, Expression, TimeUnit Appel de la primitive Delay et déclaration d’une constante ou d’une variable pour l’expression du temps 
SCORE : 58150


 Cette description interne a la particularité d’être indépendante de toutes les contraintes technologiques 
SCORE : 58142


 Cette description interne a la particularité d’être indépendante de toutes les contraintes technologiques 
SCORE : 58142


 Cette entité permet ainsi de définir complètement la charge du système (workload) 
SCORE : 58139


 L’argument de sortie BranchNumber sert à s’orienter vers l’exécution de la branche rendue active 
SCORE : 58138


 Lorsqu’un producteur désire émettre un événement, il fait appel à la procédure SignalEv (à gauche de la figure) 
SCORE : 58129


 -D- Attribut ‘Path L’attribut ‘Path sert à définir le chemin qui sera choisi dans le cas d'une sélection 
SCORE : 58100


 La table des symboles est aussi indispensable pour l’écriture textuelle des symboles terminaux 
SCORE : 58093


 Aussi, l'attitude volontariste des concepteurs est une première condition strictement nécessaire pour le succès de la démarche 
SCORE : 58083


 Aussi, l'attitude volontariste des concepteurs est une première condition strictement nécessaire pour le succès de la démarche 
SCORE : 58083


 Ce travail a été effectué sur la base d’un exemple d’application et en collaboration avec le CCETT de Rennes (G 
SCORE : 58039


5 Raffinement d’une activité et modèle réutilisable Une activité peut se raffiner à l’aide des opérateurs décrits précédemment 
SCORE : 58026


 qui assure une demande de la ressource, en sortie de la procédure la ressource a été obtenue 
SCORE : 58002


 Chaque opération élémentaire est caractérisée par son type et l’ensemble de ses arguments 
SCORE : 57998


 La fonction Recording se charge de l’enregistrement d’un film sur les disques du serveur à partir de l’entité Source 
SCORE : 57988


 Quatre valeurs différentes sont possibles ce qui permet de suivre précisément l’état d’un constituant actif: Inactive=X, Blocked=0, Waiting=Z, Active=1 
SCORE : 57983


 Les contraintes de temps sont ensuite analysées pour déduire la répartition matériel/logiciel 
SCORE : 57941


 Les contraintes de temps sont ensuite analysées pour déduire la répartition matériel/logiciel 
SCORE : 57941


 C’est une façon très simple de spécifier la charge imposée au système pour la simulation 
SCORE : 57902


 Ceci va permettre d’étudier l’influence de cette ressource comme contrainte d’exécution 
SCORE : 57887


 >time-to-market La première solution qui donne satisfaction n’est pas forcément la meilleure 
SCORE : 57874


 La structure interne obtenue à partir d’un fichier texte est le coeur des générateurs 
SCORE : 57839


 VHDL possède donc une propriété qui est aussi intéressante pour le co-design [ECKER-93] 
SCORE : 57795


 Un système complet peut être simulé à différents niveaux de détail 
SCORE : 57789


 Cependant, la co-simulation souffre généralement d’un temps de simulation trop long 
SCORE : 57780


 Les idées de solutions peuvent aussi se déduire de modèles génériques de solution 
SCORE : 57777


 Les idées de solutions peuvent aussi se déduire de modèles génériques de solution 
SCORE : 57777


 [] veut dire l’élément dans le vecteur du même indice que l’objet englobant 
SCORE : 57763


 Le protocole est tout d’abord expliqué pour le couplage d’un producteur avec le port 
SCORE : 57760


 La partie restante (frontière à délimiter) qui se veut plus délicate est celle relevant du co-design 
SCORE : 57760


 Le ficher peut être du type Ascii (mode=0) et dans ce cas il est chargé par un analyseur syntaxique 
SCORE : 57753


 Le temps de lecture est défini par la vitesse de transmission qui dépend de l’attribut ‘Speed reçu 
SCORE : 57750


E La valeur moyenne du nombre de fragments dans les fifos internes pour les fonctions Lecture est de l’ordre de 3,5 
SCORE : 57739


 Cette partie d’Analyse a été testée avec l’exemple du serveur vidéo du chapitre 7 
SCORE : 57733


 Le document de spécification est probablement le document le plus important dans les relations demandeur - concepteur 
SCORE : 57715


 Ce protocole est implanté sous la forme d’un signal bidirectionnel et d’une fonction de résolution 
SCORE : 57713


 Le principe de gestion des indices du vecteur d’état est schématisé ci-dessous 
SCORE : 57667


 Le protocole de communication en 4 phases a permis de traduire aisément l’attente conditionnelle 
SCORE : 57652


 L’élément clef, c’est à dire le processeur, est défini par son jeu d’instructions 
SCORE : 57602


 Le temps d’intervention d’une activité est essentiellement défini par les temps d’exécution internes 
SCORE : 57595


 Si le port n’est pas libre, il y a alors libération de la ressource d’exécution par la procédure Blocking définissant TaskState=blocked 
SCORE : 57590


 Le terme macroscopique signifie que le système n’a pas besoin d’être entièrement détaillé 
SCORE : 57587


 Au niveau des coûts, il est souvent possible de s’approvisionner sur les marché des produits standard à meilleur prix 
SCORE : 57553


 -C- Cas M -> N Il s’agit ici de la relation de distribution de M vers N qui permet une interconnexion complète 
SCORE : 57509


 La relation est générale puisqu’il s’agit de coupler m écrivains et n lecteurs sur la même variable 
SCORE : 57492


 Ces définitions s’accompagnent d’un message d’information concernant le rôle joué par le paramètre générique défini 
SCORE : 57486


 Le texte est indispensable car il peut se lire et se mémoriser sous la forme de fichier 
SCORE : 57419


 Le contenu de la variable ComponentModel (pile) pour l’exemple précédent est représenté sur la droite de l’algorithme 
SCORE : 57413


 Dans ce test, les règles de génération affichent uniquement les informations dont elles disposent 
SCORE : 57397


 Pour réduire les temps de simulation, il faut augmenter le niveau d’abstraction des modèles 
SCORE : 57392


 Si plusieurs existent, une valeur doit être fixée pour tous les autres 
SCORE : 57374


 Les templates utilisés pour faciliter la génération du package et de l’entité VHDL sont ensuite décrits 
SCORE : 57358


 La différenciation - lecture ou écriture - est faite par un champ direction dans la définition de Access (champ direction) 
SCORE : 57331


 - les spécifications opératoires, qui concernent le comportement, les performances, précisions, les méthodes à utiliser  
SCORE : 57331


 - les spécifications opératoires, qui concernent le comportement, les performances, précisions, les méthodes à utiliser  
SCORE : 57331


 •Informations complémentaires, en particulier la description de la procédure du test final ou de validation par le client 
SCORE : 57313


 Pour réduire les temps de simulation, il faut élever le niveau d’abstraction des modèles 
SCORE : 57282


 L’ajout en début de l’ensemble ou après un élément donné est assez similaire 
SCORE : 57263


 On peut à nouveau continuer le raisonnement en se demandant comment obtenir automatiquement le programme Grammar-Parser 
SCORE : 57237


 L'approche préconisée conduit à une solution plus simple à comprendre et plus simple à implanter 
SCORE : 57187


 L'approche préconisée conduit à une solution plus simple à comprendre et plus simple à implanter 
SCORE : 57187


 La connaissance de tels modèles, en complément des méthodes, améliore notablement le pourcentage des développements corrects 
SCORE : 57172


 La connaissance de tels modèles, en complément des méthodes, améliore notablement le pourcentage des développements corrects 
SCORE : 57172


 Une librairie de composants de monitoring peut être mise à disposition du concepteur 
SCORE : 57168


 Les règles de transcription sont relativement similaires à celles utilisées pour la transcription du SpecChart en VHDL [GAJSKI-93] 
SCORE : 57136


2 Simulation avec un modèle réaliste des disques Le modèle est maintenant modifié pour être plus réaliste pour les disques 
SCORE : 57119


 L’utilisateur doit alors entrer les algorithmes des opérations élémentaires (modèle interprété) 
SCORE : 57112


 Très peu de techniques de partitionnement sont basées sur un modèle plus abstrait et non-interprété d’un système 
SCORE : 57072


 Pour éviter de définir des stimuli, on modélise également l’environnement du système (fonctions Usagers, Emission et Réception) 
SCORE : 57058


 Toutefois, quelques compléments ou quelques éclairages ont leur source dans les autres références bibliographiques 
SCORE : 57053


 Un port simple ou une fonction simple se déduit d’un élément multiple par simplification 
SCORE : 57036


 La classe GenEdit implante l’interface utilisateur qui sera détaillée dans le paragraphe suivant 
SCORE : 57013


 Le générateur obtenu a été testé avec les exemples décrits dans le chapitre 7 
SCORE : 56983


 Une solution est une représentation de la vision du concepteur tout au long du processus de développement 
SCORE : 56927


E Cette simulation nous a permis d’obtenir un encadrement de la valeur de A qui doit se situer entre 2 et 3 
SCORE : 56900


 Il permet de modéliser des systèmes complexes et de faire une évaluation des performances [SES-89] 
SCORE : 56881


 Pour représenter les classes d’objets implantées, nous utilisons le modèle statique de la méthode OMT-UML 
SCORE : 56880


 Notons que le principe de traduction consiste à considérer que l’élément de relation est un élément passif 
SCORE : 56869


FM ETAPE 5: LA REALISATION •Par réalisation, on comprend construction et programmation hardware aussi bien que software 
SCORE : 56842


 Les informations concernent l’application dans son ensemble avec les objectifs souhaités 
SCORE : 56784


 Les informations concernent l’application dans son ensemble avec les objectifs souhaités 
SCORE : 56784


 Un bloc de code est aussi constitué d’instructions du jeu d’instruction du processeur 
SCORE : 56777


 A cause du caractère aléatoire du modèle, ces trois résultats sont évalués par une moyenne des résultats de Chapitre 7 230 M 
SCORE : 56762


 Puis la transaction passe par un service d’affichage (probabilité p) ou retourne directement au début du réseau 
SCORE : 56723


 Pour cela, il suffit que toutes les opérations nécessaires soient possibles par le script 
SCORE : 56668


 Ce protocole de communication permet de faire de la communication point à point ou de la diffusion 
SCORE : 56655


 L’outil offre aussi une interface de co-simulation appelée SES/ Co-sim 
SCORE : 56639


 -G- GUIDE POUR LA DOCUMENTATION Le modèle de description induit directement la structure des documents à produire durant le développement 
SCORE : 56634


 -G- GUIDE POUR LA DOCUMENTATION Le modèle de description induit directement la structure des documents à produire durant le développement 
SCORE : 56634


 On peut aisément imaginer que les générateurs devraient posséder des opérations en commun par suite de similitudes 
SCORE : 56604


 Pour éviter toute confusion d'interprétation, le symbole OR de la divergence n'est pas utilisé et est remplacé par une barre 
SCORE : 56582


 Ce modèle incite à décrire tout système selon une hiérarchie de niveaux de description 
SCORE : 56579


 Ce modèle incite à décrire tout système selon une hiérarchie de niveaux de description 
SCORE : 56579


 Ainsi une méthodologie se comprend bien lorsque le modèle de description des systèmes à concevoir est explicité 
SCORE : 56504


 Ainsi une méthodologie se comprend bien lorsque le modèle de description des systèmes à concevoir est explicité 
SCORE : 56504


E co-design que le modèle de transactions qui est surtout utilisé pour l’analyse de solutions existantes 
SCORE : 56466


 Cette décomposition en niveaux permet d’induire assez simplement la démarche à suivre 
SCORE : 56449


 Cette décomposition en niveaux permet d’induire assez simplement la démarche à suivre 
SCORE : 56449


 -D- Efficacité de compréhension Durant le développement, un modèle sert d'intermédiaire entre plusieurs stades de conception 
SCORE : 56424


 - la désignation d’un champ dans un noeud d’une structure qui est faite par son nom symbolique 
SCORE : 56372


 •Il est souvent impossible de modéliser un système avec un seul point de vue 
SCORE : 56355


 Durant cette attente, le ressource d’exécution peut être préemptée par une tâche plus prioritaire 
SCORE : 56309


 Durant cette attente, la ressource d’exécution peut être préemptée par une tâche plus prioritaire 
SCORE : 56309


 me‘Index veut dire l’indice de l’élément courant dans le cas d’une instance multiple 
SCORE : 56301


 Aussi, nous présentons le modèle de comportement qui spécifie le séquencement temporel d’un ensemble d’activités 
SCORE : 56269


 Ainsi, le modèle UVa permet d’analyser la tolérance aux fautes et la sûreté de fonctionnement d’un système 
SCORE : 56196


FM D ÉFINITIONS •Un système électronique est un produit dont l’objectif est de répondre à un besoin industriel 
SCORE : 56169


 Les déclarations concernant l’état d’une activité sont donc modifiées de la manière suivante: TYPE DefUTaskState IS (Nodriver,Inactive,Blocked,Waiting,Active,ExitNow) 
SCORE : 56166


 La récursivité apparaît lorsqu’une opération comprend une opération de niveau supérieur 
SCORE : 56163


 La construction la plus complexe à traduire est l’achèvement forcé d’activité qui est à rapprocher des EI Arcs (Exit Immediately) d’un SpecChart [GAJSKI-93] 
SCORE : 56150


 - Y ::= A B C veut dire que le texte doit comporter A puis B puis C 
SCORE : 56149


 Par exemple, les attributs Size (taille) et Id (destinataire) d’un message remplace le contenu du message 
SCORE : 56146


 Par exemple, les attributs Size (taille) et Id (destinataire) d’un message remplace le contenu du message 
SCORE : 56146


 Pour l’instant, aucune étude d’optimisation du code n’a donc été effectuée 
SCORE : 56134


 Ainsi impliqué dans le processus de partitionnement, le concepteur continue à accumuler une expérience et à développer ses compétences 
SCORE : 56133


 Pour cette description, nous avons mis en gras les mots qui sont spécifiques de l’exemple 
SCORE : 56127


 Pour une ressource, il s’agit de sa période d’utilisation, le temps ‘Use est non-significatif 
SCORE : 56096


), en électronique de puissance lorsque l’environnement utilise des courants forts, en réseaux et télécommunications, etc 
SCORE : 56091


 Il a alors la possibilité de visualiser le contenu des variables, faire du pas à pas ou continuer l’exécution 
SCORE : 56062


 L’utilisation de ce thread permet de suspendre l’exécution du script à tout moment 
SCORE : 56058


 buff : fifo pour la mémorisation des messages InStatus[1:m] InValue[1:m] OutStatus[1:n] OutValue[1:n] InactiveReq InactiveAck Wait (ReadTime) DELAY a) b) c) ‘Concurrency ‘Concurrency InValue NbUse < Concurrency NbUse++ 
SCORE : 56056


 Une collaboration importante entre le demandeur et le concepteur est dès lors nécessaire 
SCORE : 56049


5) les informations nécessaires (attributs) pour les transferts de tous les types de messages du système 
SCORE : 56033


 Les critères de lisibilité et de compréhensibilité sont satisfaits grâce à l’emploi d’une notation essentiellement graphique 
SCORE : 55965


E 25 ressources caractérisées par une taille mémoire et le temps d’exécution d’une instruction 
SCORE : 55957


 Ce vecteur regroupe tous les accès (ou liens) rattachés à l’élément de relation 
SCORE : 55907


 •C’est exclusivement une modélisation structurelle et correspond bien à la notion “orienté objet” 
SCORE : 55839


 Ce principe de générateur s’avère ainsi relativement indépendant du langage à produire 
SCORE : 55825


 L’approche proposée par Stoy est donc surtout intéressante pour les systèmes de faible complexité 
SCORE : 55817


 La structure de sortie nécessite aussi de se référer à une grammaire, ici celle de XtemplateDs 
SCORE : 55714


 - la taille des buffers d’anticipation nécessaires pour éviter toutes rupture de séquences 
SCORE : 55701


 Ce vecteur de ports est noté M[:] lorsqu’il s’agit d’un vecteur non contraint 
SCORE : 55684


14, on voit que toutes les fonctions ReadMovie sont considérées implantées sur un même processeur P 
SCORE : 55661


 Celle-ci doit apparaitre cohérente, claire et doit être vérifiée par le demandeur 
SCORE : 55627


 Celle-ci doit apparaitre cohérente, claire et doit être vérifiée par le demandeur 
SCORE : 55627


 Donc pour créer une liste d’éléments, il suffit de les empiler dans une variable à l’aide des instructions Push et d’assignation: Push(Var) 
SCORE : 55582


 Un premier rôle est la modification de la structure par une édition textuelle assistée par la syntaxe 
SCORE : 55574


 La durée de transfert d’un message est donc au minimum la somme des temps des attributs ‘Write et ‘Read 
SCORE : 55558


 VHDL ne permet pas aussi de définir des types dynamiques ou record variant sur des signaux 
SCORE : 55517


 L’efficacité d’évaluation résulte du modèle (généricité et réutilisabilité) et de la technique de simulation associée 
SCORE : 55505


 Le document de conception fonctionnelle s'appuie sur les éléments qui ressortent des spécifications fonctionnelles 
SCORE : 55486


 Ce dernier cas permet de modéliser un comportement conditionnel au flot d’information 
SCORE : 55469


 La période de transmission des blocs est définie par le débit pour le film (déterminé par la qualité et le codage en compression) 
SCORE : 55463


 Certains tels que Adept de l’université de Virginie (modèle UVa) et Cosmos de Omniview utilisent VHDL pour simuler leurs modèles et extraire des informations 
SCORE : 55458


 Basé sur l’association de la vue structurelle et de la vue comportementale, le modèle de performance de MCSE est: - évolutif 
SCORE : 55411


 La vérification de la complétude et de la consistance du modèle généré est assuré automatiquement par le compilateur/simulateur VHDL utilisé 
SCORE : 55402


 L’asservissement des producteurs aux consommateurs dépend de la capacité de chaque port 
SCORE : 55324


 Le simulateur VHDL a l’avantage d’être disponible sous diverses plate-formes (Unix, Pc) 
SCORE : 55310


E 85 4 Transcription du modèle de performance en VHDL Le modèle de performance de MCSE décrit dans le chapitre 4 représente un investissement de plus de 5 ans de la part de l’équipe MCSE 
SCORE : 55277


 Ce point précis est une difficulté en VHDL car il est impossible de suspendre et ensuite de relancer un process de l’extérieur 
SCORE : 55250


 Pour illustrer nos propos, nous allons partir de l’exemple représenté sur la figure 6 
SCORE : 55247


 Dans le court terme, les efforts concernent principalement le développement d’une telle méthodologie 
SCORE : 55221


 Chaque fonction Réception se charge de consommer les fragments à la vitesse définie par le débit de la séquence 
SCORE : 55204


 On dit alors qu’il s’agit d’une activation conditionnelle avec garde 
SCORE : 55184


 Il est clair maintenant que la structure de données interne est l’équivalent du texte source McseModel 
SCORE : 55166


 (Dans un projet d’étudiant, le cahier des charges correspond en principe à la donnée du projet) 
SCORE : 55154


 - il n’y a quasiment plus de maintenance et d’évolubilité des outils GraphTalk et LEdit alors que ceux-ci sont pourtant fortement "buggés" 
SCORE : 55152


10 SPECIFICATION DE LA GRAMMAIRE DU SCRIPT La syntaxe du langage Script a été inspirée de celle de langages existants 
SCORE : 55106


 Les attributs ‘Write et ‘Read sur les liens entre les fonctions et l’événement surchargent dynamiquement les attributs ‘Write et ‘Read de Ev 
SCORE : 55100


 Ces formalismes (modèles et langages) servent à décrire principalement l’aspect fonctionnel 
SCORE : 55044


 La plupart des modèles sont graphiques, favorisant ainsi une compréhension globale et rapide 
SCORE : 55010


 La plupart des modèles sont graphiques, favorisant ainsi une compréhension globale et rapide 
SCORE : 55010


 Cette solution basée sur l’exécution d’un programme C++ est plus avantageuse que l’utilisation du couple VHDL/simulateur 
SCORE : 54985


 L’efficacité d’exécution résulte: - d’une efficacité du parcours, - d’une efficacité d’exécution des opérations 
SCORE : 54959


FM DES OUTILS POUR MODÉLISER •Tous les environnements CAE de développement logiciel (software) implémentent l’une ou l’autre de ces techniques de modélisations 
SCORE : 54887


 De même, les types et attributs concernant les variables partagées sont regroupés dans le record TypeDefData 
SCORE : 54866


 Cette lisibilité doit aussi se retrouver pour les descriptions produites par les outils associés au modèle 
SCORE : 54864


7 CONNEXION ENTRE ELEMENTS DE RELATION ET COMPOSANTS ACTIFS En VHDL, les éléments sont reliés obligatoirement entre eux par des signaux définis par un type 
SCORE : 54862


 Les notions d’entité, de block et de composant permettent de décomposer la description du système 
SCORE : 54840


 Rappelons que la modélisation de performances a pour objectif de spécifier quantitativement les propriétés temporelles d’une solution 
SCORE : 54825


 Les règles de construction permettent seulement à une activité de ne supprimer que des activités inclues (A11 est inclue dans A1) 
SCORE : 54820


 Lorsque la ressource est libre la condition d’évolution est vraie et dans ce cas la ressource est allouée 
SCORE : 54760


 Mais la différence essentielle entre les deux modèles réside dans l’approche de modélisation 
SCORE : 54680


 De son côté, le demandeur validera le document de spécifications par rapport à ses besoins 
SCORE : 54617


 La synchronisation entre les deux flots est réalisée à l’aide de noeuds du type "Interrupt Node" et "Resume Node" 
SCORE : 54592


 Le cahier des charges assorti de propositions de développement doit permettre de décider de l'avenir du produit 
SCORE : 54558


 Cette solution a donc un impact négatif sur la complexité et le temps de génération du code 
SCORE : 54542


 Si plusieurs process sont nécessaires, chacun est créé à l’image du process dans le template 
SCORE : 54493


2 Fonctionnement du générateur La génération est le résultat de l’exécution d’un programme se conformant à un script de génération 
SCORE : 54480


 Les spécifications incluent toutes les contraintes auxquelles doit satisfaire le système 
SCORE : 54461


 Les spécifications incluent toutes les contraintes auxquelles doit satisfaire le système 
SCORE : 54461


 -B- Sauvegarde d’une structure sous forme textuelle: SaveDs La sauvegarde est l’opération strictement inverse du LoadDs 
SCORE : 54363


 Par exemple, les attributs ‘Size (taille) et ‘Id (destinataire) d’un message remplacent le contenu du message 
SCORE : 54355


 La syntaxe et les constructions de ce langage dédié à la manipulation de structure de données sont définies 
SCORE : 54350


E 99 et l’exploitation de ces attributs peuvent être laissées au libre arbitre de l’utilisateur du modèle 
SCORE : 54339


8 STRUCTURE ET FONCTIONNEMENT D’UN GENERATEUR Dans ce paragraphe nous expliquons la structure d’un générateur et son principe de fonctionnement 
SCORE : 54313


 Rajout de l’interface StateVector dans le port et leport map du block si la concurrence est limitée 
SCORE : 54278


 Le modèle de SES/wokbench est plus riche en concepts de modélisation que le modèle de performance que nous avons développé 
SCORE : 54271


 Il est nécessaire de définir l’allocation (ou mapping) des éléments fonctionnels sur les éléments exécutifs 
SCORE : 54230


 Les temps ‘Write, ‘Read, ‘Use sur les liens peuvent venir surcharger les attributs de l’objet de relation 
SCORE : 54223


 Si le composant n’est pas multiple, il suffit de détruire le noeud MultipleBlock (lien en pointillé sur la figure) 
SCORE : 54210


 Un modèle doit toujours être accompagné d’une démarche favorisant l’élaboration de solutions 
SCORE : 54207


 Il doit toujours être accompagné d’une démarche favorisant l’élaboration de solutions 
SCORE : 54207


 Toutes ces questions montrent que le cadre dans lequel un projet se réalise a beaucoup d’importance 
SCORE : 54151


 Les éléments de réponse sont multiples et dépendent fortement du point de vue et des expériences antérieures 
SCORE : 54102


 Très proche syntaxiquement du langage ADA, VHDL se distingue des langages de programmation par le concept de signal 
SCORE : 54067


 Il a également servi à la présentation du modèle de performance et du principe d’évaluation des performances dans [CALVEZ-96b] 
SCORE : 54060


 Dans ce cas, l’estampille d’une demande d’accès se calcule par: ‘date = now + ConversionDebitTemps(debit) - k * TrwFrag, ’Read ‘Use Read Data 1 1 
SCORE : 53924


 Les 2 structures en entrée sont obtenues par l’analyseur syntaxique Loader paramétré par la grammaire du texte 
SCORE : 53918


 (hélas, rien n’est jamais définitif, il faut donc s’attendre à devoir le modifier un jour 
SCORE : 53915


33, le taux d’occupation du processeur pour une charge donnée est de l’ordre de 80% 
SCORE : 53858


 Lorsque cette durée dépend d’une loi aléatoire, le réseau de Petri est appelé réseau de Petri stochastique 
SCORE : 53851


 Génération de: - l’assignation concurrente du signal ProtocolVector - l’appel des primitives InitConditionnalActivation, WaitConditionnalActivation et ResetConditionalActivation - La première branche WHEN  
SCORE : 53844


 •Les simulations effectuées durant le développement forment un bon point de comparaison pour les tests 
SCORE : 53784


 F1 F2 F3 F4 F5 F6 V F1 F3 F4 F5 élément de F6 relation Entité Block Block Block Block Composant F1 F2 F3 F4 F5 F6 Interface d’ élément de relation élément de relation Block Entité Block Block Block Block Composant Composant Solution a Solution b Transcription du modèle de performance en VHDL M 
SCORE : 53767


3 est suffisante à condition de disposer des spécifications correctes et complètes de l’objet à concevoir 
SCORE : 53681


 La description fonctionnelle de chaque partie sert ainsi de spécification 
SCORE : 53676


7 correspond à la zone de modélisation que nous estimons utile pour l’évaluation des performances 
SCORE : 53646


 Pour une solution donnée, l’alternative disparaît car l’élément concerné est fixé dans le texte 
SCORE : 53622


 Les pages qui suivent consistent principalement en un résumé d'une méthodologie assez représentative de ce qui est possible d'étudier dans ce domaine: MCSE = Méthodologie de Conception de Systèmes Electroniques [1] 
SCORE : 53573


 Les composants instanciés sont déclarés avec un nom d’instance (RR[1:n], R1, R2) et le nom du modèle 
SCORE : 53567


 Pour la description du matériel, il faut distinguer 2 parties et donc 2 niveaux de détail 
SCORE : 53505


 -H- Ajout d’un élément dans un ensemble: AddFirst, AddLast, AddAfter les 3 opérations AddFirst, AddLast et AddAfter servent à la mise à jour d’un ensemble d’éléments 
SCORE : 53473


"(HOW) •Il est nécessaire de procéder à une décomposition des blocs fonctionnels en sous-ensemble (raffinement) 
SCORE : 53468


 La figure suivante représente la structure d’un ensemble et l’effet de l’opération 
SCORE : 53408


 Ceci est possible pour une évaluation des performances mais pas pour une vérification fonctionnelle détaillée 
SCORE : 53404


 Ceci est nécessaire pour donner une signification aux champs de la structure ou du noeud référencé 
SCORE : 53393


 Pour cette raison, on ne trouve dans un noeud de composition que des références vers d’autres noeuds 
SCORE : 53334


 chacun possède une valeur par défaut (valeur donnée entre parenthèses) 
SCORE : 53333


 Ainsi, l’évaluation des performances concerne toutes les phases d’une méthodologie de conception 
SCORE : 53332


 En effet, lors de la génération de code Java, les constantes sont remplacées par leurs valeurs 
SCORE : 53320


 Contrairement à Yacc qui possède des opérateurs de priorité et d’associativité (%left, %right, %nonassoc), JAVACUP ne permet pas d’éviter ce type de conflit 
SCORE : 53263


 Les attributs caractérisant chaque processeur sont au départ: - pour Supervision: ‘Power=1, ‘Concurrency=1 (à faire varier), ‘Policy=PSP, - pour Exécution: ‘Power=1, ‘Concurrency=m (à faire varier), ‘Policy=PSP 
SCORE : 53253


 La notation graphique est celle recommandée par la méthodologie MCSE pour la structuration des données [CALVEZ-90] 
SCORE : 53242


 Pour cela, nous avons défini les règles de transcription du modèle MCSE en une description VHDL 
SCORE : 53240


 - le partitionnement matériel/logiciel qui concerne l’étape de conception architecturale 
SCORE : 53225


 Elles sont implantables comme une liste chaînée des noeuds composant cet ensemble 
SCORE : 53210


 Pour estimer les performances dynamiques d’un système, le concepteur a donc recours de plus en plus à la simulation 
SCORE : 53184


2 Technique des compilateurs Les compilateurs de code utilisent un analyseur lexical et un analyseur syntaxique 
SCORE : 53155


2 Parcours du modèle comportemental La vue comportementale permet de décrire le comportement des fonctions 
SCORE : 53133


E 145 -B- Résultat VHDL souhaité Compte tenu du chapitre 4, la traduction souhaitée pour avoir un modèle VHDL noninterprété est la suivante 
SCORE : 53132


 Le principe de génération repose sur l'utilisation d'un analyseur syntaxique et d'un template 
SCORE : 53091


 Un générateur de code C++ pour l’évaluation des performances est également en cours de développement 
SCORE : 53085


 Un générateur de code C++ pour l’évaluation des performances est également en cours de développement 
SCORE : 53085


 Ces performances sont de type contraintes de temps ou contraintes de capacité ou de débit 
SCORE : 53055


 La figure suivante montre l’interface utilisateur du méta-générateur 
SCORE : 53046


 Le méta-modèle pour la définition d’un élément de relation est donné par la figure suivante 
SCORE : 53016


 Ainsi un port tel que P_send ou P_ack est scindé en 2 parties: Port_X_in, Port_X_out 
SCORE : 53014


20- Test du générateur avec la fonction lecture du serveur vidéo 
SCORE : 53013


 Ces attributs sont associés sous forme textuelle au composant décrit 
SCORE : 52967


 La vérification fonctionnelle et l’évaluation des performances est faite par simulation du programme VHDL 
SCORE : 52945


 Nous avons pour cela défini le méta-modèle de toute structure de données 
SCORE : 52937


 Une technique de co-simulation est alors appropriée pour ce type de vérification 
SCORE : 52928


E La troisième colonne donne une implémentation appropriée pour chaque type de noeud 
SCORE : 52902


 La procédure DELAY est à nouveau utilisée pour la simulation de tous les temps d’exécution 
SCORE : 52876


 Ce temps est défini par le débit contenu comme attribut du message 
SCORE : 52865


 Gestion des indices du signal StateVector en fonction du nombre de process(tâches) du niveau 
SCORE : 52860


 Le méta-modèle de structure de données pour la description des conditions d’évolution est le suivant 
SCORE : 52855


 A cette représentation graphique correspond une description textuelle donnée sur la figure 3 
SCORE : 52819


 Le signal State mémorisant l’état d’une tâche est modifié à la fois par la tâche et l’ordonnanceur 
SCORE : 52818


 Elle est en effet utilisée par les process Lecture et OP_2 comme le montre le code suivant 
SCORE : 52802


E (noeud de service avec file d’attente) ou passifs (unité arithmétique et logique) 
SCORE : 52780


 - Grammar définit la grammaire à utiliser pour l’analyse et la construction de la structure de données 
SCORE : 52750


 4- L’architecture est ensuite mise à jour par le nom du modèle (Modele1) et le nom du composant Serveur 
SCORE : 52737


 -A- UN MODELE DE DESCRIPTION COMME BASE Toute méthodologie est basée sur un ou des modèles, ceci permet une décomposition en étapes 
SCORE : 52727


 -A- UN MODELE DE DESCRIPTION COMME BASE Toute méthodologie est basée sur un ou des modèles, ceci permet une décomposition en étapes 
SCORE : 52727


6 montre 2 exemples de description avec l’emploi d’une fonction REGUL comme modèle 
SCORE : 52722


 Ce schéma d’organisation des développements est illustré par toutes les études de cas qui suivent 
SCORE : 52706


 Ce schéma d’organisation des développements est illustré par toutes les études de cas qui suivent 
SCORE : 52706


 L’exemple et les résultats obtenus ont été présentés dans [CALVEZ- 95a] [CALVEZ-96d] 
SCORE : 52699


 -B- Le modèle exécutif Le modèle exécutif est utilisé pour décrire la partie matérielle d’une application 
SCORE : 52697


 Taskblocked Wait ActiveAck Blocked ActiveReq and NbUse >= Concurrency TaskBlocked ActiveReq and NbUse >= Concurrency TaskBlocked TaskBlocked) and (ActiveReq or TaskBlocked) and TaskBlocked ActiveAck ActiveAck Taskblocked Wait ActiveAck Blocked Wait (Ev>0) and (Ev = 0) and Chapitre 4 106 M 
SCORE : 52694


 Le temps de latence des messages et le taux d’occupation du processeur restent similaires 
SCORE : 52690


 La fonction B en attente du message M commence alors son exécution 
SCORE : 52654


 Dans le cas d'une ressource partagée, il s'agit d'une demande d'allocation de la ressource 
SCORE : 52654


 Il en résulte en sortie la spécification détaillée et complète de la solution de réalisation 
SCORE : 52619


 qui rend la tâche inactive avec libération de la ressource d’exécution, - BlockingTask(state: DefState) 
SCORE : 52614


 Une première phase consiste à rechercher A fragments avant d’initialiser la transmission 
SCORE : 52605


 La notation textuelle utilise des crochets pour exprimer l’exécution alternative et le symbole  
SCORE : 52598


 Il y a 2 types de tâches: les tâches périodiques et les tâches apériodiques en attente de l’occurrence d’un message 
SCORE : 52519


 Conception fonctionnelle La solution pour cette étape se déduit d'une analyse des spécifications fonctionnelles 
SCORE : 52510


 Conception fonctionnelle La solution pour cette étape se déduit d'une analyse des spécifications fonctionnelles 
SCORE : 52510


11 donne la représentation graphique et la notation textuelle pour ces 4 compositions 
SCORE : 52506


3 L’analyseur syntaxique obtenu La syntaxe du langage VHDL décrite dans le LRM (Langage Reference Manual) n’est pas du type LR(1) 
SCORE : 52491


 Notre approche permet d’exploiter à nouveau le modèle de performance après synthèse 
SCORE : 52469


 Si une réalisation est souhaitée, ces documents seront à la base d'un contrat de développement 
SCORE : 52432


 Le script se compose d'une partie analyse du modèle source et d'une partie génération 
SCORE : 52432


 La description suivante donne l’écriture textuelle pour l’ensemble de l’application Serveur Vidéo 
SCORE : 52422


 Le concepteur modifie alors l’implantation des fonctions et ressources jugées critiques et réévalue le modèle 
SCORE : 52418


 Une activité peut se décrire par un diagramme d’activités ou par un diagramme d’états 
SCORE : 52380


 La signification de la structure McseDs se trouve par exploitation de la structure MCSEGrammarDs qui représente la grammaire 
SCORE : 52377


 7- Il faut ensuite assurer la mise à jour de la partie comportementale (Behavior) 
SCORE : 52366


 Comme les outils ont été implantés en Java, cette extension du Script ne pose aucune difficulté 
SCORE : 52338


7 s (8 bits de données et 2 bits de start et 1 bit de stop émis à 20 Mbits/s) 
SCORE : 52316


 - Les systèmes interactifs concernés par l’exploitation d’interfaces pour le dialogue homme-machine 
SCORE : 52311


 La seconde catégorie regroupent les classes qui constituent le coeur du méta-générateur 
SCORE : 52278


 Le terme action est généralement limité à une intervention ponctuelle considérée comme instantanée 
SCORE : 52270


 Lorsque ces 2 activités sont achevées, la fonction F2 devient inopérante sans pour cela disparaître 
SCORE : 52265


 L'étape produit une description du niveau suivant conforme au modèle pour l’étape 
SCORE : 52258


 L'étape produit une description du niveau suivant conforme au modèle pour l’étape 
SCORE : 52258


 Il se base exclusivement sur les distances imposées entre certains constituants du système 
SCORE : 52243


 Ces paramètres concernent aussi bien la vue structurelle que comportementale 
SCORE : 52243


 La fonction F1 est raffinée par 2 fonctions F11 et F12 utilisant toutes les deux la variable V 
SCORE : 52161


 Elle a alors développé une méthodologie complète de conception appelée ISPME (Integrated Specification and Performance Modeling Environment) 
SCORE : 52096


 Une file d’attente est associée aux messages d’entrée d’une fonction 
SCORE : 52093


13 REALISATION DE L’OUTIL META-GEN Ce paragraphe décrit la solution retenue pour l’implantation de l’outil MetaGen 
SCORE : 52015


 Les champs contenant des références sur d’autres noeuds ou sur des valeurs ou identificateurs sont vides (Nil) 
SCORE : 52008


17 donne un exemple ainsi que le principe de transcription pour ce cas 
SCORE : 51996


 Les attributs ‘Policy et ‘Priority permettent également de définir la politique d’ordonnancement des tâches 
SCORE : 51992


 Le degré de partage concerne les accès simultanés pour ces 3 temps 
SCORE : 51984


 S’il y a lieu, faire référence à aux brevets, aux normes, etc 
SCORE : 51981


 Il faut donc tout d'abord connaître cet environnement 
SCORE : 51954


 Il faut donc tout d'abord connaître cet environnement 
SCORE : 51954


12- Raffinement d’une activité avec achèvement forcé, principe de transcription 
SCORE : 51930


 Nous nous intéressons à la deuxième situation plus complexe et plus proche de la réalité industrielle 
SCORE : 51914


 La figure ci-dessous montre différentes vues de l’outil Cosmos 
SCORE : 51910


 La clarté d’un script passe par la déclaration des variables utilisées dans celui-ci 
SCORE : 51905


 Les constructions de type itération, boucle, sélection, réplication, décomposition, agrégation sont autorisées 
SCORE : 51890


 -C- Attribut ‘Id Cet attribut est défini pour identifier une information ou un objet dans le cas d'un transfert 
SCORE : 51871


 Une solution intermédiaire existe en utilisant judicieusement les qualités de ces 2 méthodes [CALVEZ-97b] 
SCORE : 51822


 Ce parallélisme peut éventuellement être englobé dans une activité nommée ici Activity1 
SCORE : 51811


) sont appelés symboles nonterminaux et doivent être définis par des règles de grammaire 
SCORE : 51796


 Les paramètres de configuration sont déclarés et initialisés dans le fichier de configuration du méta-générateur 
SCORE : 51765


 -H- Paramètres génériques Toute valeur d’attribut peut se définir par une expression mathématique 
SCORE : 51764


 L’index dans le champ se trouve par la grammaire de la structure du texte considéré 
SCORE : 51745


 Appel la primitive TaskPriority si l’attribut ’Priority est défini et si la concurrence est limitée 
SCORE : 51733


 Le code VHDL ajouté est décidé et écrit par le concepteur du modèle pour ses besoins propres 
SCORE : 51718


 La figure suivante illustre le principe de co-simulation retenu 
SCORE : 51671


 Il faut y ajouter son degré de partage pour des accès multiples 
SCORE : 51666


 Cette transcription répond aux cas de constructions: séquence, alternative, répétition 
SCORE : 51656


 Les paramètres génériques de ce composant sont les attributs associés habituellement à un événement (‘Policy, ‘Write, ‘Read, ‘Concurrency) 
SCORE : 51630


 La partie Génération exploite les informations obtenues de l’analyse et les règles de transcription 
SCORE : 51629


5 Manipulations de liste Une variable du script est implantée sous la forme d’une pile 
SCORE : 51625


 Un attribut structurel ‘Capacity pour FifoEnr définit la taille de la fifo en nombre de fragments 
SCORE : 51600


 Ceci suppose que toute la conception soit achevée et qu'un prototype existe 
SCORE : 51598


 Un élément actif peut être raffiné (StructureDef) ou décrit par un comportement (BehaviorDef) 
SCORE : 51575


 La largeur du triangle pour chaque stade indique la quantité d'informations à maîtriser 
SCORE : 51558


 La largeur du triangle pour chaque stade indique la quantité d'informations à maîtriser 
SCORE : 51558


) permettent même de transformer une description VHDL comportementale en une description VHDL au niveau RTL 
SCORE : 51548


 Dans le cas de la simultanéité, un process est associé pour chaque partie séquentielle 
SCORE : 51505


 L’ordre ET implique une simultanéité d’attente de toutes les conditions (figure 4 
SCORE : 51495


 Dans ce cas, l’exploitation du modèle nécessite de spécifier la taille de ces vecteurs 
SCORE : 51419


 Mais cette spécification doit aussi être vérifiable, en particulier par le demandeur 
SCORE : 51366


 Mais cette spécification doit aussi être vérifiable, en particulier par le demandeur 
SCORE : 51366


 Ce problème est résolu implicitement par le choix d’implantation des outils en Java qui dispose en standard (JDK 1 
SCORE : 51356


 Ainsi, il peut donc tout à fait servir pour l’édition du script 
SCORE : 51339


1 Catégories de modèles de performance Tout modèle est construit sur la base d’un ensemble de concepts de modélisation 
SCORE : 51321


 On trouve ensuite la librairie utilisée puis la déclaration de l’entité 
SCORE : 51306


 Le comportement de chaque fonction est caractérisé par une composition d’activités dynamiques 
SCORE : 51276


 La méthodologie MCSE fournit la démarche à suivre pour cette première recherche de solution 
SCORE : 51237


 Pour cela, le concepteur dispose de l’instruction DelDelimiter dont la syntaxe est la suivante: DelDelimiter(StringRef, BeginDelimiterString, EndDelimiterString) 
SCORE : 51205


 GenerateOneGenericParameter Identique à GenerareFirstGenericParameter GenerateNoGenericParameters Destruction de la clause générique GenerateFromInputOutput informations fournies: ParameterType, ParameterName ParameterModelName, TypeName VectorExpression, Vector BlackBall, IsInput, NumberOfIOSubLevel Mise à jour du Port et Port Map de l’entité ou du block 
SCORE : 51183


 GenerateFirstGenericParameter informations fournies: ParameterName, GenericParameterType GenericParameterDefaultValue Mise à jour de la clause générique de l’entité ou d’un block 
SCORE : 51183


 Le choix d'une méthode spécifique pour l’évaluation passe par une analyse des possibilités 
SCORE : 51168


 Ces règles sont directement écrites dans le langage du programme, c’est-à-dire ici en JAVA 
SCORE : 51158


 Dans ce cas, le logiciel doit être compilé pour le microprocesseur cible 
SCORE : 51149


 Un élément du vecteur est désigné par son nom et son indice 
SCORE : 51148


 Durant l’activité de répartition géographique, un premier partitionnement est déjà effectué 
SCORE : 51097


 Le symbole "#" représente Exit dans la description textuelle et le symbole "/" représente la préemption 
SCORE : 51066


 L’exemple se transcrit sous la forme de 2 blocks et de 5 process (figure 4 
SCORE : 51060


 l’évaluation des performances est facilitée si plusieurs paramètres permettent de configurer le modèle 
SCORE : 51044


 Des indicateurs permettent d’avoir une trace sur l’écran (Debug) ou dans un fichier (History) de la compilation ou de l’exécution 
SCORE : 51014


 Une présentation succincte de l’interface utilisateur du générateur est également donnée 
SCORE : 51007


 La technique de génération de code retenue fait l’objet des chapitres 5 et 6 
SCORE : 50953


 Pour modéliser un système complexe, les deux types de modèle sont nécessaires et complémentaires 
SCORE : 50945


 La partie Architecture contient la déclaration de signaux et alias nécessaires pour les ports 
SCORE : 50912


 Ainsi, l’interprétation de la structure de données pour tout texte se fera à l’aide de la GrammarDs 
SCORE : 50896


8 représente un exemple de modélisation d’une architecture de processeurs distribuée [MOHANTY-94] 
SCORE : 50855


 Des opérations particulières sont ensuite nécessaires pour faciliter l’écriture du script 
SCORE : 50827


 Pour notre exemple, nous avons considéré 3 implantations différentes 
SCORE : 50824


 Par exemple, SADT et les méthodes de spécification de WARD et MELLOR et de HATLEY favorisent la tâche d'analyse du problème 
SCORE : 50798


 Par exemple, SADT et les méthodes de spécification de WARD et MELLOR et de HATLEY favorisent la tâche d'analyse du problème 
SCORE : 50798


E 225 séquences simultanées ayant un débit moyen de 7,5 Mbits/s, soit un débit de 75 Mbits/s 
SCORE : 50782


 La qualité d'un premier cahier des charges est a priori plutôt mauvaise et/ou incomplète 
SCORE : 50775


 Le package Security Manager contient des méthodes pour contrôler les accès des utilisateurs et encrypter les données 
SCORE : 50752


 Il s’agit dans le principe d’une sorte de pré-compilateur tel que celui du langage C 
SCORE : 50735


 Les attributs intéressants sont les suivants: - ‘Policy: (Boolean, Counter, fugitive), (Boolean) - ‘Concurrency: un entier positif, (1) - ‘Write: un temps, (0) - ‘Read: un temps 
SCORE : 50732


 Le prototypage est aussi trop cher et/ou trop long à mettre en oeuvre 
SCORE : 50725


 Les disques sont des fonctions avec leur propre ressource d’exécution 
SCORE : 50711


 -D- Utilisation L’emploi des procédures Send et Receive diffère selon qu’il s’agit d’un accès 1->1, N->1 ou N-> M 
SCORE : 50704


(S1&S2) Séquence S1 S2 & S1 a) b) c) d) Utilisation de la Sélection par l’indice S2 condition pour l’exécution dans le vecteur de la sortie sélectionnée Transcription du modèle de performance en VHDL M 
SCORE : 50700


), - une file d’attente caractérisée par sa taille et sa discipline de stockage (LIFO, FIFO), Chapitre 2 36 M 
SCORE : 50694


 de la construction CASE GenerateFromGuardedCondition information fournie: InputName Appel aux primitives InitConditionnalActivation, Wait- ConditionnalActivation et ResetConditionalActivation Rajout d’une branche WHEN à la construction CASE 
SCORE : 50689


 Des modèles génériques de bus sont ici exploitables (bus VME, bus PCI, 
SCORE : 50655


 Le process est mis à jour compte-tenu de la déclaration du comportement par ActivityDef 
SCORE : 50630


 Ainsi une fonction sera définie par des attributs représentatifs de son rôle 
SCORE : 50621


), une approximation du coût des composants et du temps de conception du système est calculable [MADISETTI-95] 
SCORE : 50615


 Ceci est intéressant pour des instances multiples de fonctions, d’activités, d’éléments de relation 
SCORE : 50594


 Pour l’évaluation des performances, les blocs prédéfinis sont classés en trois groupes principaux 
SCORE : 50561


 Ceci se traduit pour chacun par l’emploi d’un nom d’attribut, d’une valeur, d’une unité 
SCORE : 50561


 Pour l'exécution N fois, si N n'est pas spécifiée, il s'agit d'une exécution infinie 
SCORE : 50557


 L’adaptation porte alors sur certains champs: uniquement le nom Cmd pour le port 
SCORE : 50544


 Ce paragraphe décrit les solutions de transcription retenues pour ces problèmes 
SCORE : 50532


 Cependant, la co-simulation souffre d’un temps de simulation trop long 
SCORE : 50518


 La notion de composant est très importante car elle permet la réutilisation de modèle 
SCORE : 50511


 La première règle de grammaire textuelle de l’exemple se traduit par le rond ComponentDescription 
SCORE : 50498


 / ActiveReq Receive Wait OutAccess end wait Waiting Waiting Prod[1:m] Send Cons[1:n] Receive States(Prod[1:m]) States(Cons[1:n]) Put(buff, InValue) 
SCORE : 50485


 Le noeud de valeur est un noeud élémentaire contenant un nombre ou un identificateur 
SCORE : 50466


 Cette propriété permet de modéliser des systèmes complexes en les décomposant en parties plus simples 
SCORE : 50441


7-a représente la structure fonctionnelle constituée des fonctions Writer et Reader reliées par la variable V 
SCORE : 50434


 Ces blocs ont chacun un comportement décrit par un réseau de Petri écrit en VHDL 
SCORE : 50425


 La machine utilisée pour les tests est un PC PENTIUM PRO 200 Mhz avec 32 Mo de mémoire vive 
SCORE : 50421


 Le nombre de flots d’exécution représente le degré de parallélisme du processeur 
SCORE : 50399


 Un programme Java tourne sur toute plate-forme disposant de la machine virtuelle Java 
SCORE : 50387


 Une Méthodologie (MCSE) [deux tomes, T 1: description de la méthodologie MCSE, T 2: études de cas] J-P 
SCORE : 50379


 Chaque message RepCanal[] possède la signification de la fin de la séquence, ce qui engendre un message RepUsager[] 
SCORE : 50373


 Elle introduit une relation du type producteur/consommateur entre les fonctions 
SCORE : 50362


 FifoLec est caractérisée par son attribut structurel ‘Capacity dont la valeur est supérieure à A 
SCORE : 50345


 La vitesse de consommation de ces messages sera définie par le serveur 
SCORE : 50322


 On rajoute pour cela une fonction nommée Processeur et qui englobe les fonctions logicielles de la carte 
SCORE : 50301


 L’algorithme de parcours du modèle MCSE est donc relativement rapide (10 secondes) 
SCORE : 50267


6-a représente la structure fonctionnelle constituée des fonctions Prod et User reliées par l’événement Ev 
SCORE : 50231


 Le concepteur assure d’abord son édition et sa sauvegarde 
SCORE : 50192


 Java offre ici une propriété très intéressante pour la simulation du modèle de performance de MCSE 
SCORE : 50168


 - une évaluation des performances pour laquelle le code est entièrement généré automatiquement 
SCORE : 50167


 La figure du haut représente les processeurs comme unités d’encapsulation 
SCORE : 50149


 Pour faciliter la production, un template doit contenir la description la plus complexe 
SCORE : 50111


E que les dépendances temporelles sont exclusivement liées à l’évolution de l’environnement (comportement réactif) 
SCORE : 50097


 Par suite de ce caractère générique, il faut définir la notation pour les vecteurs 
SCORE : 50061


 Pour cela, on passe en revue ci-après les 4 types d’éléments 
SCORE : 50039


 Le symbole Exit permet donc une simplification de la représentation pour l’achèvement d’une activité 
SCORE : 50037


 Toutes les fonctions F[i] exploitent le port Pt en respectant son degré de partage 
SCORE : 50033


 La durée d’un état est définie par les conditions de passage dans d’autres états 
SCORE : 50021


12 donne la représentation graphique et la notation textuelle correspondante 
SCORE : 50017


 Un paramètre est une grandeur qui peut varier dans un domaine de définition donné 
SCORE : 50014


 Les attributs ‘Write, ‘Read et ‘Use sur les liens entre les fonctions et la variable surchargent les attributs ‘Write, ‘Read et ‘Use de V 
SCORE : 49993


 - Il met ensuite à jour la structure OutputDs en se basant sur une analyse de la structure McseDs 
SCORE : 49981


 Comme Range est optionnel, on utilise le symbole ensemble (0:1) pour représenter l’alternative: Range ou absence de Range 
SCORE : 49978


 -A- Modèle et résultats de simulation La structure fonctionnelle simulée est représentée par la figure 7 
SCORE : 49906


E Dans la solution a, un type est déclaré pour chaque type de messages transmis 
SCORE : 49887


 Pour le produit, ces exigences sont d’ordre technique et d’ordre économique 
SCORE : 49839


 Les règles de transcription précédentes permettent relativement aisément l’écriture du modèle VHDL 
SCORE : 49829


 Ensuite, il s’agit de choisir la technique à utiliser pour effectuer les transformations de textes 
SCORE : 49824


 Ce programme nommé MetaGen est donc un générateur de générateurs de code ou métagénérateur 
SCORE : 49820


 C’est par exemple le cas pour l’opération LoadDs qui est l’argument de droite de l’opération d’assignation 
SCORE : 49810


 C’est donc la première véritable vue interne du système demandé 
SCORE : 49803


 Le compilateur Java (ou plutôt dans ce cas machine virtuelle) utilisé est le compilateur "Just In Time" de Symantec (VisualCafe 1 
SCORE : 49798


 Une règle doit être définie pour discerner la sortie concernée: déterministe, probabiliste 
SCORE : 49728


 Une condition élémentaire est booléenne et limitée aux tests simples Egal (=), Différent (#), Inférieur (<) et supérieur (>) 
SCORE : 49673


 ce qui nous oblige à gérer les indices de ce vecteur et de ces alias 
SCORE : 49656


 L’attente doit alors être supprimée sur l’autre branche 
SCORE : 49644


 Une modélisation de l’environnement est faite pour simuler les conditions d’utilisation (workload) 
SCORE : 49632


 Chaque opération (rectangle) est caractérisée par son temps d’exécution (attribut ‘Time) 
SCORE : 49625


 Aujourd’hui, le concepteur bénéficie d’une grande diversité de choix pour la réalisation d’un système 
SCORE : 49622


 Dans ce dernier cas, les 2 nombres dans le symbole indiquent la borne minimale et la borne maximale 
SCORE : 49611


 Le point de départ est le cahier des charges décrivant le besoin du demandeur 
SCORE : 49555


 Le point de départ est le cahier des charges décrivant le besoin du demandeur 
SCORE : 49555


 La description du comportement se poursuit avec un parallélisme à deux branches 
SCORE : 49542


 Les valeurs en entrée et celles des données internes ne sont pas prises en compte 
SCORE : 49533


 Les valeurs en entrée et celles des données internes ne sont pas prises en compte 
SCORE : 49533


 Les attributs des 3 types de relations EV, Port et V[1:m] sont aussi rappelés sur la figure 
SCORE : 49527


 a) calcul et visualisation d’indices de performance b) déroulement temporel Transcription du modèle de performance en VHDL M 
SCORE : 49509


 Les blocs décomposables peuvent avoir plusieurs raffinement possibles 
SCORE : 49462


 Le statechart peut aussi être remplacé par un algorithme séquentiel 
SCORE : 49453


 De cette manière, il pourra étudier leur influence sur les propriétés du système 
SCORE : 49439


 Chaque champ de référence pointe sur un autre noeud et donc sur une structure 
SCORE : 49436


 Une grammaire dite libre de tout contexte définit les phrases correctes 
SCORE : 49429


 Le plus souvent la machine virtuelle est modélisée par son jeu d’instructions 
SCORE : 49426


E automatiquement car il se charge de traduire toute l’organisation (ou composante structurelle) du modèle 
SCORE : 49416


 Ceci n’est bien sûr à faire que lorsqu’il y a limitation de la ressource d’exécution 
SCORE : 49391


 Les signaux EvIn et EvOut ne sont composés que du champ Status utilisé pour le protocole de communication en 4 phases 
SCORE : 49336


 Ce point essentiel conduit à un ensemble de hashtables et pas uniquement une seule 
SCORE : 49318


 Chaque message produit est envoyé par un producteur Prod[i] à la fonction Routing via le port Treq[i] 
SCORE : 49289


 Le modèle comportemental spécifie le séquencement temporel d’un ensemble d’opérations et d’activités 
SCORE : 49275


 La difficulté consiste à connaître directement la position de ce champ dans le noeud 
SCORE : 49268


 Pour s’ouvrir de nouveaux marchés, celles-ci s’intéressent de plus en plus à la conception au niveau système 
SCORE : 49128


 La solution retenue par l’équipe est particulière et sera détaillée dans les chapitres 5 et 6 
SCORE : 49107


 On s’intéresse ici tout particulièrement aux exigences techniques 
SCORE : 49086


14- Scénario de charge, retard au démarrage et taux d’occupation du processeur 
SCORE : 49063


 Ceci se fait par l’intermédiaire de paramètres génériques déclarés à la fois pour le modèle et pour l’instance 
SCORE : 48969


 Ainsi, il peut concentrer ses efforts sur les règles de la partie génération 
SCORE : 48966


 Fork active tous les process et WaitJoin attend que tous les process soient achevés 
SCORE : 48922


 Un protocole basé sur une variable à trois états est utilisé pour les synchronisations 
SCORE : 48861


 Nous donnons directement la solution fonctionnelle permettant une estimation de performances 
SCORE : 48845


E simulation de notre modèle de performance souffre également de quelques restrictions 
SCORE : 48819


 dimension F11 F10 clk Mesures Environnement F11[1:n] Raffinement de A1 A1[1:m] A1 dimension spatiale F1 V3‘Write =20 ms 
SCORE : 48744


 La notation 0:n pour ListeName et ListeParam indique une suite vide ou de longueur quelconque 
SCORE : 48741


 Concrètement, cela signifie que la génération d’une feuille se fera en deux phases 
SCORE : 48725


 Une action vers des sorties peut concerner les 3 types de relation 
SCORE : 48710


 Dans ce cas, une implantation matérielle au coût économique plus élevé ne se justifie pas 
SCORE : 48603


 Le noeud de service est constitué d’une file d’attente et d’un temps de traitement 
SCORE : 48574


 Nous ne sommes pas obligés de définir ces champs au niveau du record DefProtocol 
SCORE : 48568


 La taille de cette file d’attente peut varier de 0 (Rendez-vous) à l’infini 
SCORE : 48544


 -B- Construction d'une condition Une condition d’évolution s'élabore à partir des entrées disponibles 
SCORE : 48517


 Elle devrait ainsi être assez familière pour tous nouveaux développeurs de scripts 
SCORE : 48509


 Le symbole Sélection permet de représenter l’aiguillage vers une sortie particulière 
SCORE : 48496


 La simulation des modèles saisis repose sur la génération et l’exécution d’un programme Smalltalk 
SCORE : 48467


 Chaque niveau de description sert d'intermédiaire entre 2 étapes consécutives 
SCORE : 48448


 Chaque niveau de description sert d'intermédiaire entre 2 étapes consécutives 
SCORE : 48448


 La courbe montre que le premier usager possède un débit de 14 Mb/s 
SCORE : 48387


 Un balayage rapide de l’espace des solutions conduit à sélectionner la solution la plus appropriée 
SCORE : 48386


 Au fur à mesure de l’implantation, on perdait en efficacité (interprétation des démons) et en facilités de prototypage 
SCORE : 48372


 Dans ce cas, des comportements sont écrits directement sous une forme algorithmique 
SCORE : 48336


 Ce résultat est important pour la phase de conception architecturale qui est présentée dans [CALVEZ-97a] 
SCORE : 48294


3 CONTEXTE DE CETTE THESE Cette thèse effectuée au sein de l’équipe MCSE de l’IRESTE a été financée par le CNET dans le cadre de la CTI 9 (contrat no 941B CNET France-Télécom) 
SCORE : 48241


 -C- Tout en logiciel La fonction TokenManagement est rajoutée à la fonction Processeur avec la priorité la plus élevée 
SCORE : 48195


 C'est ainsi que l'on peut garantir, au sens large, la qualité du produit 
SCORE : 48188


 L’université de Virginie et Honeywell Technology Center ont travaillé en commun sur l’évaluation des performances dans le cadre du projet RASSP 
SCORE : 48147


 La réalisation est une démarche ascendante puisqu’elle consiste à assembler 
SCORE : 48143


 La réalisation est une démarche ascendante puisqu’elle consiste à assembler 
SCORE : 48143


 •Présentation du problème: reprise du cahier des charges, analyse succincte, définition de la terminologie 
SCORE : 48112


 Ce paramètre peut évoluer de 1 qui représente le fonctionnement séquentiel à l’infini (*) 
SCORE : 48102


FM MODÉLISATION DES DONNÉES / INFORMATIONS (QUOI) •Définir de façon complète et précise la nature des données et la structure des données 
SCORE : 48044


 Un autre catégorie de rôle est la transformation automatique ou assistée de la structure 
SCORE : 47899


 Parallèlement, on peut aussi implanter de plus en plus de fonctions dans le silicium (ASICs, FPGA, system-on-a-chip) 
SCORE : 47885


14 rappelle les possibilités et indique les solutions de transcription retenues 
SCORE : 47869


 Ces 2 possibilités ont été exploitées simultanément sur les deux exemples 
SCORE : 47861


 Ces composants sont concourants et inter-agissent entre eux par des liens de connexion 
SCORE : 47856


 En ce sens, la conception en vue du test (DFT) est primordiale pour la réussite du projet 
SCORE : 47821


 Un deuxième rôle est la modification de la structure par une édition graphique assistée 
SCORE : 47818


 -B- Protocole de communication La technique utilisée est similaire à celle employée pour le port 
SCORE : 47816


 La protection des données partagées entre threads est assurée en standard (synchronisation) 
SCORE : 47793


 -F- Destruction d’un noeud: DelNode Cette opération n’a de signification que s’il s’agit d’un noeud isolé (sans références) 
SCORE : 47790


 Ce template n’est bien sûr pas exhaustif pour la génération d’un programme VHDL noninterprété complet 
SCORE : 47786


 Cette possibilité permet de modifier sélectivement les paramètres du comportement du modèle de structure 
SCORE : 47782


 Les conditions et actions simples se traduisent par l’appel à une primitive d’accès 
SCORE : 47750


 Les composants sont couplés entre eux par l’intermédiaire d’éléments de relation 
SCORE : 47717


1 Les classes d’objets Toutes classes d’objets sont regroupées en deux catégories 
SCORE : 47634


 Les dépendances temporelles, c’est-à-dire les synchronisations, les communications et les sorties, sont représentées horizontalement 
SCORE : 47631


 Ceci est dû au fait que le protocole de communication au niveau message n’est pas correct 
SCORE : 47605


 A partir de cette caractéristique, nous analysons les possibilités de parcours de la structure 
SCORE : 47581


 -I- UNE METHODOLOGIE OUVERTE ET COMPLEMENTAIRE MCSE ne se trouve pas restreinte à une méthode particulière et à un domaine bien spécifique 
SCORE : 47578


 -I- UNE METHODOLOGIE OUVERTE ET COMPLEMENTAIRE MCSE ne se trouve pas restreinte à une méthode particulière et à un domaine bien spécifique 
SCORE : 47578


 Pour conclure ce chapitre, nous donnons l’apport de cette thèse et le plan de ce manuscrit 
SCORE : 47560


 La première condition présente engendre l’exécution de l’activité correspondante 
SCORE : 47536


 Dans les paragraphes suivants, nous passons en revue différentes solutions 
SCORE : 47458


 L’activité A11 inclut 2 branches concurrentes ou simultanées mais qui ne sont pas temporellement indépendantes 
SCORE : 47426


 L’offre en matière de microprocesseurs (MPU, ASSP, ASIP, DSP), de langages de programmation et compilateurs associés est vaste 
SCORE : 47322


2 Modélisation par réseau de files d’attente Le modèle basé sur la théorie des files d’attente [BORDEW 
SCORE : 47192


 Si ce modèle est la description d’une fonction, alors le process est encapsulé dans une entité ou dans un block 
SCORE : 47154


 Si il n’y a pas de demande d’émission, le jeton est transmis directement à la carte voisine 
SCORE : 47134


 •Il exprime les souhaits du demandeur et va donc répondre à la question du "POURQUOI  
SCORE : 47009


 Une telle édition peut s’imaginer se faire d’une manière interactive 
SCORE : 46986


 Si une action est associée à la règle réduite, elle est alors exécutée 
SCORE : 46973


 Aussi il faut faire très attention pour préserver la lisibilité du programme 
SCORE : 46945


 S’il est à une valeur infinie (0 choisie comme valeur représentative), il n’y a pas de particularité 
SCORE : 46903


 Son comportement se rapproche de celui d’un ordonnanceur d’exécutif temps-réel 
SCORE : 46895


 Entre ce niveau et le précédent 2 sous-niveaux sont intéressants comme intermédiaires:  
SCORE : 46805


 Entre ce niveau et le précédent 2 sous-niveaux sont intéressants comme intermédiaires:  
SCORE : 46805


 Celle-ci est indiquée par un attribut particulier appelé ‘Path associé à l’opérateur 
SCORE : 46732


 Le manque de généricité pour la déclaration des types VHDL est alors une limitation sérieuse 
SCORE : 46719


 La question intéressante est: comment engendrer automatiquement ce programme 
SCORE : 46656


 Emission utilise une fonction de chien de garde pour limiter le temps d’attente de l’acquittement 
SCORE : 46563


 Chaque instruction peut utiliser jusqu’à 3 bancs mémoires différents 
SCORE : 46542


 Nous commençons par préciser la signification du terme performance dans le contexte considéré 
SCORE : 46513


 •Un graphe du type état/transition est souvent un modèle adéquat (FSM en particulier) 
SCORE : 46382


 Sans cette difficulté, on aurait pu regrouper les procédures InitConditionalActivation, WaitConditionalActivation et ResetConditionalActivation en une seule procédure 
SCORE : 46346


 A noter que nous exploitons ici la méthodologie MCSE pour la conception de la solution 
SCORE : 46333


 •C’est aussi la prise en compte de toutes les contraintes de toutes natures 
SCORE : 46276


 New_Work + - Get_memory Disk1 Disk2 Cpu not finished Release_memory Exec End_Work Source Allocation Service Désallocation Réference Destruction Rafinement Méthodologie de co-design et estimation des performances M 
SCORE : 46269


 - Spécifications de réalisation pour le logiciel, le matériel et la partie co-design 
SCORE : 46193


 Ceci ne veut pas dire que les variables d’état et les informations ne contiennent pas de données 
SCORE : 46170


 La méthodologie MCSE couvre les phases de Spécification, de Conception Fonctionnelle aussi appelée par ailleurs Conception Préliminaire, de définition de la Réalisation ou Conception Détaillée 
SCORE : 46165


 La méthodologie MCSE couvre les phases de Spécification, de Conception Fonctionnelle aussi appelée par ailleurs Conception Préliminaire, de définition de la Réalisation ou Conception Détaillée 
SCORE : 46165


 Sur cette figure deux fonctions commencent leur exécution simultanément 
SCORE : 46100


 Chaque noeud est identifiable par son type qui est le même que le noeud équivalent dans la GrammarDs 
SCORE : 46082


 L’évaluation d’un partitionnement repose sur la simulation d’un modèle des performances du système 
SCORE : 46041


 Ces systèmes sont caractérisés par des techniques de conception orientées flot de données 
SCORE : 46024


 Les réponses du système lui permettront de connaître l’état et les réactions du serveur 
SCORE : 45972


 De l'autre, le développeur évaluera son produit selon les spécifications 
SCORE : 45918


 Le signal est géré par une fonction de résolution décrite ci-dessous 
SCORE : 45826


4 Le modèle de comportement Le modèle de comportement de chaque fonction est donné par la figure 7 
SCORE : 45821


 Signaux de données Signaux de contrôle SO Source OUT_1 SI Sink IN_1 SW Switch IN_1 OUT_1 IN_C1 OUT_1 IN_1 IN_2 J Junction RC Read Color IN_1 OUT_1 OUT_C SC_D Set Color IN_1 OUT_1 IN_C CP Comparator IN_1 IN_2 OUT_C FD Fixed Delay IN_1 OUT_1 DD Dependent Delay IN_1 OUT_1 R Random IN_1 OUT_1 Méthodologie de co-design et estimation des performances M 
SCORE : 45819


 Le modèle de performance qui est l’entrée du générateur a été présenté dans le chapitre 3 
SCORE : 45776


 La fonction de résolution associée à ce "multiplesignaldriven" lui donne la valeur InactiveAck 
SCORE : 45750


7 montre un exemple de représentation du comportement d’une fonction et d’une activité 
SCORE : 45735


10- Structure de données de la grammaire pour la déclaration d’un élément de relation 
SCORE : 45708


 La définition de la réalisation est l'étape ultime de la conception proprement dite 
SCORE : 45666


 Sous l’impulsion du projet RASSP, SES/Workbench est maintenant capable de générer du code C et du code VHDL 
SCORE : 45643


9 donne un exemple de transcription sous la forme d’un block 
SCORE : 45624


FM MODÉLISATION DES ACTIVITÉS (COMMENT) •Décrire les activités de l’entité et les relations avec son environnement 
SCORE : 45600


 Le cas est alors défini par le type de record (ici A ou B ou C 
SCORE : 45586


22- Résultats pour une implantation logicielle de toutes les fonctions du système 
SCORE : 45581


 La transcription du modèle concerne le modèle de structure (fonctionnel et exécutif) et le modèle de comportement 
SCORE : 45550


 On trouve par exemple ici Range avec sa définition 
SCORE : 45512


 En procédant ainsi, il risque d’obtenir un script non optimisé 
SCORE : 45507


 En effet, chaque fonction possède la variable State en entrée 
SCORE : 45497


 La fonction est décrite sous la forme d’une entité générique 
SCORE : 45492


 Le méta-modèle de structure de données pour la description des actions est le suivant 
SCORE : 45476


12- Exemple de modèle comportemental avec sa structure de données 
SCORE : 45450


 La solution retenue pour la simulation est l’ajout de la partie basse de la figure 4 
SCORE : 45445


 La figure suivante montre le méta-modèle pour la définition de l’interface 
SCORE : 45445


E La structure de données du template de l’entité est représentée par la figure 6 
SCORE : 45419


 Les erreurs de syntaxe, compilation ou exécution sont gérées par le mécanisme d’exception de Java 
SCORE : 45380


 Ecrire le document de spécification est la première phase du travail de conception 
SCORE : 45317


 Taskblocked Wait ActiveAck Blocked ActiveReq and NbUse >= Concurrency TaskBlocked ActiveReq and NbUse >= Concurrency TaskBlocked TaskBlocked) and (ActiveReq or TaskBlocked) and TaskBlocked ActiveAck ActiveAck Taskblocked Wait ActiveAck Blocked Wait Alloc Release wait Chapitre 4 108 M 
SCORE : 45286


 Mais la dépendance peut aussi mener tout droit à la perte 
SCORE : 45278


 EtatCanaux: CanauxLibresLec + FragmentsLibres SupervisionUsager + CanauxLibresEnr SéquenceIn[1:n] SéquenceOut[1:n] CmdCanalLec[1:n] Validation de la méthode par des études de cas M 
SCORE : 45271


 Un exemple d’application du modèle de performance est donné en fin du chapitre 
SCORE : 45267


11- Liens entre éléments de relation et interfaces de composants 
SCORE : 45263


 Au terme de ce développement, diverses améliorations sont envisageables à court terme 
SCORE : 45248


 Pour ce faire, le résultat est transcrit sous la forme du modèle de performances de MCSE 
SCORE : 45233


E 43 vue comportement (évolution temporelle ou flot de contrôle) 
SCORE : 45219


 Le modèle structurel est hiérarchique: un élément actif peut être raffiné 
SCORE : 45188


 Si Range ne doit pas exister, il s’agit de détruire la structure et d’affecter le champ à Nil 
SCORE : 45186


1 Structure de la fonction Génération Compte tenu du principe utilisé, la fonction Génération de la figure 5 
SCORE : 45158


 Dans la trilogie, un modèle est une représentation formelle d’un système à un niveau d’abstraction donné 
SCORE : 45149


 Les contraintes de performances sont obligatoirement des grandeurs quantitatives et mesurables déterminées par des valeurs numériques 
SCORE : 45136


 L’algorithme d’analyse d’un élément actif est donc le suivant 
SCORE : 45128


 Cette durée représente l’utilisation de ressources pour sa réalisation 
SCORE : 45070


E Les phases pour cette étape sont décrites par la figure ci-après 
SCORE : 45067


E Les phases pour cette étape sont décrites par la figure ci-après 
SCORE : 45067


 Ceci doit être le cas pour toute activité composée 
SCORE : 45039


 Le texte à analyser est défini par un ensemble de règles de grammaire 
SCORE : 45034


16- Structure fonctionnelle et code MCSE et VHDL d’un élément de relation simple 
SCORE : 45032


 La particularité d'une opération est sa durée qui est finie et qui n'est pas conditionnelle à une circonstance externe 
SCORE : 45015


 La plupart des blocs ont un comportement non-interprété 
SCORE : 45005


 6- La définition de blockDef est ensuite mise à jour pour l’instanciation de n blocs Emission 
SCORE : 44994


 Un modèle approprié pour l’évaluation des performances est de type non-interprété 
SCORE : 44988


19- Modèle de comportement non interprété de chaque fonction 
SCORE : 44982


Set désigne l’ensemble pour lequel il faut ajouter la structure référencée par VarDs 
SCORE : 44966


 -B- Instruction While Il est indispensable de pouvoir répéter une règle jusqu’à une condition d’arrêt 
SCORE : 44930


E fonctionnelles et non fonctionnelles de son cahier des charges 
SCORE : 44920


 Il y a aujourd’hui de nombreux outils basés sur VHDL disponibles sur la marché 
SCORE : 44906


18- Structure fonctionnelle détaillée d’une carte du système de communication 
SCORE : 44850


 Un élément actif peut aussi être une instance d’un modèle 
SCORE : 44834


 Il s'agit ensuite de trouver une première décomposition fonctionnelle 
SCORE : 44828


 Il s'agit ensuite de trouver une première décomposition fonctionnelle 
SCORE : 44828


 Set11 n AB A 0:1 Y ::= [A] Y Set01 A Y Y Y A 1:n Y ::= A {A} Y Set1n A Y A 0:n Y ::= {A} Y Set0n A Y XDs Record Y mB C A ou B ou C Record A Nil A A A A Nil ou Modèle Ds Type NextFriend Father FieldNb Reserved B NodeDs Nil Node Value ID dans ID Node Key HashTable Le Méta-Générateur MetaGen M 
SCORE : 44802


 La notation 1:1 représente l’alternative des cas possibles 
SCORE : 44777


 L’évaluation des performances dynamiques est effectuée par une co-simulation 
SCORE : 44773


17- Structure fonctionnelle et code VHDL d’un élément de relation multiple 
SCORE : 44766


 Ainsi, une modification de la grammaire du modèle MCSE serait également invisible pour la partie génération 
SCORE : 44722


) et le logiciel par une séquence d’instructions du jeu d’instructions du processeur 
SCORE : 44695


 Ces générateurs de code écrits en C utilisaient des structures internes spécifiques 
SCORE : 44688


 Cette information est indispensable pour concevoir l’interface avec les disques 
SCORE : 44645


 Les processeurs sont représentés par des Méthodologie de co-design et estimation des performances M 
SCORE : 44636


 Cette compilation ne doit se faire que lors d’une modification de grammaire 
SCORE : 44621


E 79 Le comportement de chacune des 3 entités de l’environnement est décrit par la figure 3 
SCORE : 44618


E 9 La figure ci-dessous décrit la procédure à suivre 
SCORE : 44608


E 9 La figure ci-dessous décrit la procédure à suivre 
SCORE : 44608


 sont ajoutées pour exprimer les interdépendances par échange de données ou d’informations (flux horizontal) 
SCORE : 44607


 qui a pour objectif de créer un noeud sans avoir un exemplaire disponible 
SCORE : 44580


 Cette information est utile pour déterminer le taille de la mémoire du système 
SCORE : 44554


 Nous avons donc choisi comme valeur du paramètre A=0 
SCORE : 44546


 CARACTERISTIQUES DE MCSE MCSE est une démarche complète qui permet de passer du problème à une réalisation 
SCORE : 44518


 CARACTERISTIQUES DE MCSE MCSE est une démarche complète qui permet de passer du problème à une réalisation 
SCORE : 44518


E Le champ concerné est défini dans le script par son nom 
SCORE : 44516


 L'alternative conduit à ne générer qu'une seule sortie 
SCORE : 44502


 Puis elles ont été implantées dans un générateur de code 
SCORE : 44486


 IdName et Value sont ici représentés comme l’emploi d’un champ d’une variable 
SCORE : 44419


E ou "TimeLine" qui permet de visualiser l’état des fonctions et la trace des messages 
SCORE : 44418


E 129 - l’observation de données obtenues par une évaluation VHDL et mémorisées dans un fichier 
SCORE : 44394


 On utilise pour cela le champ LinkUp du record ElementName associé à la condition 
SCORE : 44391


 Toutes les fonctions logicielles de la carte sont implantées sur le même processeur 
SCORE : 44369


 L’emploi de disques multiples permet de résoudre ce problème 
SCORE : 44363


 Le noeud de composition contient un ensemble de champs de référence 
SCORE : 44362


4 indique sous la forme de tableau le résultat de synthèse 
SCORE : 44348


6 représente la structure de données simplifiée d’un élément actif 
SCORE : 44337


 La même définition est utilisée pour les vecteurs de constituants de relation 
SCORE : 44337


FM ETAPE 4: LA DEFINITION DE LA REALISATION •A la fin de la décomposition, toutes les fonctions sont définie dans le détail 
SCORE : 44309


 La variable Séquences a été remplacée par un port (DemD) et une fonction (Disque) multiple 
SCORE : 44306


 La charge imposée au système est représentée par la figure suivante 
SCORE : 44197


 Cette valeur constante est due au temps de transmission de chaque message: 129*8/(129x7 s) = 1 
SCORE : 44186


 Ensuite, chaque bloc de Buffer est transmis et un nouveau bloc est lu sur disques 
SCORE : 44184


 - la clause d’importation qui indique les règles importées d’un autre script 
SCORE : 44130


 Les différentes séquences sont décrites comme branches d’un case 
SCORE : 44120


 GenerateFromInputOutputName informations fournies: ParameterType, ParameterName TypeName, BlackBall IsInput, AttributesList IsInternalElement, LocalAtttributes Appel de la primitive d’accès à l’élément de relation 
SCORE : 44116


 La première catégorie concerne l’interface utilisateur de l’outil 
SCORE : 44096


 Nous commençons par décrire la technique retenue pour l’évaluation de performances 
SCORE : 44059


E Certains outils de ce type sont en plus capables de générer un éditeur orienté par la syntaxe 
SCORE : 44036


 Chaque message généré comporte l’attribut ‘Size du message d’entrée 
SCORE : 44000


 On doit alors retrouver en sortie Texte2 le même contenu que Texte1 
SCORE : 43981


E 171 alors visualiser le contenu des variables (Watch) et relancer l’interprétation en continu (Continue) ou en pas à pas (Step) 
SCORE : 43915


 Le principe d’implantation d’une variable partagée est schématisé par la figure 4 
SCORE : 43909


 Dédié à programmer des applications sur Internet, Java a été conçu avec différentes couches de sécurité 
SCORE : 43898


 Nous avons aussi considéré utile d’ajouter l’opération CreateNode(GrammarDs, NodeType) 
SCORE : 43888


 Le code VHDL correspondant à l’implantation du protocole de communication est le suivant: TYPE DefHandshake IS (InactiveAck,ActiveAck,InactiveReq,ActiveReq) 
SCORE : 43884


 Les attributs servent à définir des valeurs aux constituants du modèle 
SCORE : 43882


E 207 sous la forme d’une table de codage par le générateur de code 
SCORE : 43860


 Un comportement est construit sur la base d’opérations (rectangles) et d’activités (rectangle à coins arrondis) 
SCORE : 43856


 Disposant de la fonction Load, il faut aussi la fonction inverse appelée Save 
SCORE : 43804


 Ces méthodes ont été détaillées dans le chapitre 3 sur le modèle de performance de MCSE 
SCORE : 43772


 L’attente OU est identique à une attente conditionnelle multiple (figure 4 
SCORE : 43757


 Le plus prioritaire s’exécute puis indique sa complétude par les primitives InactiveTask et Join 
SCORE : 43722


 L'observation et la mesure ne s'appliquent que sur un système réel que l'on place en fonctionnement 
SCORE : 43700


 Elle utilise pour cela la primitive KillingTask décrite ci-dessous 
SCORE : 43687


 L’attribut ‘Concurrency permet de contrôler le degré de parallélisme à l’exécution 
SCORE : 43686


 La mise au point d’un script se fait d’une manière interactive 
SCORE : 43676


 Les attributs locaux sont utilisés pour surchager ceux de l’élément de relation 
SCORE : 43660


 Ambrosio [AMBROSIO-94] propose une technique de partitionnement basée sur un modèle "système" 
SCORE : 43658


FM SPÉCIFICATION ET CONCEPTION DES ASICS •ASIC = Application-Specific IC, c’est à dire un circuit intégré créé spécialement pour une application spécifique 
SCORE : 43648


 Un programme Java décrit sous forme d’applet est téléchargeable par le web 
SCORE : 43644


 Les éléments en gras correspondent à des branches référencées par des variables du script 
SCORE : 43639


 GenerateFromActivityInstance informations fournies: ActivityName, ActivityRangeExpression ActivityMultiple, AttributesList création d’un block multiple et/ou simple 
SCORE : 43613


3 ANALYSE D’UNE GRAMMAIRE Le fichier d’entrée d’un outil respecte une syntaxe donnée 
SCORE : 43573


 Le loader souhaité est en fait un parser (analyseur syntaxique) 
SCORE : 43546


 Il ne sert donc qu’à illustrer la méthode utilisée 
SCORE : 43528


 On arrive alors à l’idée d’un script définissant le comportement souhaité 
SCORE : 43476


 Un système est souvent la composition de composants fonctionnels et/ou physiques 
SCORE : 43435


4 PRESENTATION GENERALE DU MODELE Pour illustrer les principaux concepts introduits dans les paragraphes précédents, la figure 3 
SCORE : 43344


 Chaque variable se désigne alors par son index dans le vecteur 
SCORE : 43332


 Le code source est décomposé en unités significatives appelées tokens 
SCORE : 43319


 Ainsi une grammaire peut se représenter en interne sur la base de records 
SCORE : 43317


19- Principe de gestion des indices du vecteur d’états des tâches 
SCORE : 43316


 Par dualité, il existe aussi des consommateurs de jetons ("OutputDevice") et des réflecteurs de jetons 
SCORE : 43313


 C’est le cas par exemple en VHDL pour une variable partagée à plusieurs écritures 
SCORE : 43301


" "<Component>" "<EndComponent>" ":" Parameter "["l Indice Indice "]" "Generic" "(" ")" Parameters ListeParam ListeName Name 0:1 0:1 0:n 0:n "," Name GenericParameters ComponentDef 1:1 StructureDef BehaviorDef 0:1 Attributes " 
SCORE : 43295


 Actuellement, les fabricants de composants proposent des circuits dont les fonctionnalités sont toujours plus complexes 
SCORE : 43286


 Les variables d’état permettent de mémoriser l’état d’une fonction 
SCORE : 43215


 Le lien en gras représente la production d’un code source 
SCORE : 43199


 Taskblocked Wait ActiveAck Blocked ActiveReq and NbUse >= Concurrency TaskBlocked ActiveReq and NbUse >= Concurrency TaskBlocked TaskBlocked) and (ActiveReq or TaskBlocked) and TaskBlocked ActiveAck ActiveAck Taskblocked Wait ActiveAck Blocked Wait t>=UseTime t:=0 Wait t>=UseTime UseTime t:=0 
SCORE : 43188


 Trois grandeurs temporelles ‘Write, ‘Read et ‘Use sont aussi à considérer pour son utilisation 
SCORE : 43103


 Les activités sont détaillées par le même type de modèle (raffinement) car le modèle est hiérarchique 
SCORE : 43087


 La figure ci-après donne une exemple caractéristique 
SCORE : 43087


 Un champ peut aussi être mis à vide (Nil) 
SCORE : 43085


 Mais pour l’instant, nous n’avons pas fait de recherche dans cette direction 
SCORE : 43076


7, il y a également une séparation nette entre un modèle de structure et un modèle de comportement 
SCORE : 43062


 Si l’activité A11 n’est pas implantée sur un processeur, alors la primitive Delay est: PROCEDURE Delay (CONSTANT WaitTime : IN TIME 
SCORE : 43057


 Toutes les actions du StateChart sont considérées exécutées en temps nul (hypothèse synchrone) 
SCORE : 43037


 pour cela il y aura toujours une branche "else" ou notée aussi * 
SCORE : 42975


 Cette procédure signale son état actif au port par ActiveReq 
SCORE : 42966


 Cette procédure signale son état actif au port par ActiveReq 
SCORE : 42966


 Evidemment, cette conversion ne concerne que certaines constructions des "sequential statements" du langage VHDL 
SCORE : 42954


 Toute copie du modèle est alors ajustée par changement de valeurs et par élimination des parties nonutiles 
SCORE : 42930


 subtype_declaration_without_resolution_function_name Chapitre 6 176 M 
SCORE : 42924


 Il est en effet [JAWORSKI-97]: - objet (et non orienté objet) 
SCORE : 42907


 La démarche conduit à minimiser le matériel, puis le logiciel 
SCORE : 42899


 La démarche conduit à minimiser le matériel, puis le logiciel 
SCORE : 42899


 -A- Analyse des exigences et Spécification Le modèle ERA est bien adapté pour décrire les constituants d’un système 
SCORE : 42885


 Parmi les données échangées, on trouve les messages et les variables d’état 
SCORE : 42872


 -D- UNE METHODE SPECIFIQUE POUR CHAQUE ETAPE Le modèle de description de la solution à l'issue de chaque étape n'est pas suffisant (le QUOI) 
SCORE : 42853


 -D- UNE METHODE SPECIFIQUE POUR CHAQUE ETAPE Le modèle de description de la solution à l'issue de chaque étape n'est pas suffisant (le QUOI) 
SCORE : 42853


 : une variable d’état) •les relations de transfert d’information ( ex 
SCORE : 42790


E 77 Une expression mathématique quelconque est utilisée pour spécifier N ou la condition 
SCORE : 42762


 Seule la politique d’ordonnancement selon la priorité est actuellement implantée 
SCORE : 42732


E 71 Pour la séquence, la fin d’évolution de OP1 engendre le début d’évolution de OP2 
SCORE : 42724


 Le paramètre A est à déterminer pour éviter toute rupture de séquence 
SCORE : 42714


 - le niveau Description Fonctionnelle, exprimant la structure du système sur le plan fonctionnel 
SCORE : 42702


 - le niveau Description Fonctionnelle, exprimant la structure du système sur le plan fonctionnel 
SCORE : 42702


 Un ensemble de primitives de transformations d’états (déplacement, regroupement, décomposition, 
SCORE : 42700


 L’opérateur de sélection permet de spécifier l’entrée considérée 
SCORE : 42645


 Nous proposons une autre alternative qui consiste à utiliser un modèle de performance 
SCORE : 42640


 Pour spécifier complètement le comportement, des attributs sont ajoutés au modèle graphique 
SCORE : 42610


 On peut de cette manière comprendre aisément l’idée du template 
SCORE : 42586


 Il y a ensuite activation simultanée de 2 branches avec une synchronisation par Lt 
SCORE : 42569


 De plus, pour un port fugace, il n’y a mémorisation du message que s’il y a un consommateur en attente 
SCORE : 42567


 -E- UNE DEMARCHE GLOBALEMENT ASCENDANTE POUR LA REALISATION L'assemblage n'est possible qu'après disponibilité des constituants 
SCORE : 42540


 -E- UNE DEMARCHE GLOBALEMENT ASCENDANTE POUR LA REALISATION L'assemblage n'est possible qu'après disponibilité des constituants 
SCORE : 42540


 S’il s’agit d’une variable, l’opérande est l’index de la variable dans le vecteur 
SCORE : 42534


 Ces constatations justifient pleinement l’intérêt d’une méthode de simulation en C++ que l’équipe développe 
SCORE : 42510


 La sélection faite respecte ainsi obligatoirement la grammaire 
SCORE : 42474


 Pour cela, le degré M est incrémenté jusqu’à ne plus détecter de rupture de séquence 
SCORE : 42461


 Une vérification de conformité est possible à l'issue de chaque étape 
SCORE : 42452


 Une vérification de conformité est possible à l'issue de chaque étape 
SCORE : 42452


7-c) d’une variable partagée se distingue cependant par un état supplémentaire WaitUseTime 
SCORE : 42443


 La transcription de l’achèvement forcé d’activité a été plus difficile 
SCORE : 42431


 Chaque opération est remplacée par la procédure DELAY qui simule le temps d’exécution 
SCORE : 42407


 Les attributs décrits ci-après existent obligatoirement 
SCORE : 42378


 Il suffit d’utiliser à nouveau un parser appelé maintenant Meta-Parser 
SCORE : 42369


 L’algorithme mixte se déduit facilement des deux autres 
SCORE : 42368


18- Résultat partiel du test de la partie analyse du script 
SCORE : 42352


 L’interface définit les données à échanger et le mode de synchronisation 
SCORE : 42272


 Sur la base de cette notation, la structure de données devient plus lisible 
SCORE : 42197


E 199 Le résultat partiel de ce test est présenté ci-dessous 
SCORE : 42183


 L’assignation d’un champ est donc fonction de la catégorie concernée 
SCORE : 42173


 Chaque fonction est donc dépendante de sa fonction englobante 
SCORE : 42165


 Les éléments de l’ensemble constituent une liste chaînée avec le pointeur NextFriend 
SCORE : 42145


 L’espace des solutions possibles apparaît très vaste 
SCORE : 42134


 GrammarDs contient aussi bien-sûr la table des symboles 
SCORE : 42107


 Ensuite, il est intéressant de lever la restriction du caractère statique du diagramme d’activités 
SCORE : 42081


 Une bonne vérification consiste à écrire le script suivant: RefDs := LoadDs(Texte1, McseModel,0) 
SCORE : 42017


11- Evolution du nombre de fragments dans le buffer d’anticipation d’un canal 
SCORE : 42014


 Ces informations pertinentes dépendent des indices de performance à analyser 
SCORE : 41987


16- Charge imposée au système et taux d’occupation du cpu 
SCORE : 41953


 Le réseau faible débit peut être: X25, NUMERIS, Ethernet, etc 
SCORE : 41939


 La fonction TokenManagement a la charge d’allouer le bus à une seule carte 
SCORE : 41935


 La différence est au moins dans les primitives: noms et arguments, ainsi que dans les déclarations 
SCORE : 41902


 •Par un DIALOGUE approfondi avec le demandeur, le concepteur devra comprendre: >Quelles sont les motivations du développement  
SCORE : 41899


1 Modèle de performance pour le serveur Nous ne détaillons pas ici la spécification du système 
SCORE : 41867


 Il est possible d’importer et d’utiliser des règles d’un autre script 
SCORE : 41840


 Les deux solutions sont expliquées par la figure ci-après 
SCORE : 41819


 A ce stade, le système est terminé, ainsi que sa documentation 
SCORE : 41813


 Son degré de concurrence ‘Concurrency est M et sa puissance ‘Power est supposée de 1 par défaut 
SCORE : 41773


 Pour éviter d’avoir une liste trop longue d’instructions Push(Var) 
SCORE : 41734


 Il faut donc penser aux entités fonctionnelles 
SCORE : 41727


 Il faut donc penser aux entités fonctionnelles 
SCORE : 41727


 La priorité de l’accès devient alors locale au niveau 
SCORE : 41711


 Ainsi, les unités sont définies par l’utilisateur (les plus courantes étant définies par défaut) 
SCORE : 41703


 La première satisfaite implique l’exécution de l’opération associée 
SCORE : 41688


 Il s’agit de coupler m producteurs et n consommateurs sur le même port 
SCORE : 41622


 Le mécanisme de synchronisation de process concurrents est très simple 
SCORE : 41599


 : un message) Pour les références bibliographiques, voir les ouvrages de JACKSON, WARD, DEMARCO, HARTLEY pour une modélisation hiérarchique 
SCORE : 41497


E -C- UNE PROGRESSION ITERATIVE Un développement ne peut pas se faire sans erreurs ou omissions 
SCORE : 41445


E -C- UNE PROGRESSION ITERATIVE Un développement ne peut pas se faire sans erreurs ou omissions 
SCORE : 41445


 Pour la divergence, une expression fixe la probabilité pour chaque branche 
SCORE : 41366


11 AUTOMATE D’EXECUTION Le script sert à définir la fonctionnalité du générateur 
SCORE : 41289


) •exploitable (utilisable pour le futur développement et la réalisation) •rédigeable et modifiable 
SCORE : 41282


 K est un coefficient de sécurité (k=2) pour éviter les coïncidences de cas défavorables (ce coefficient n’a pas d’incidence sur A) 
SCORE : 41271


 •Cette modélisation est primordiale et ne doit en aucun cas être négligée 
SCORE : 41131


 Les variables Status sont utilisées pour synchroniser les différentes branches d’un parallélisme 
SCORE : 41017


 Les mots en gras sont des appels aux règles de la partie Analyse du Script 
SCORE : 41017


 Puis nous commentons les résultats obtenus par simulation du modèle de performance 
SCORE : 40991


 GenerateFromRelationElement informations fournies: RelationType, Name, ElementMultiple ElementRangeExpression NumberOfAccessInLevel, AttributesList Instanciation du composant implantant l’élément de relation 
SCORE : 40973


 Normalement, ces chaînes de caractères ne seront pas modifiées par la génération 
SCORE : 40965


 Mais si elle est la première sur le marché, c’est le succès (presque) garanti  
SCORE : 40950


7) est négligeable par rapport à son temps de consommation (1 ms) 
SCORE : 40923


 Les éléments de relation possèdent chacun un comportement précis 
SCORE : 40898


 Seules les parties de Script validées par ces paramètres sont compilées et interprétées ou transcrites en code JAVA 
SCORE : 40874


 Le programme VHDL est instrumenté puis simulé pour obtenir les observations souhaitées 
SCORE : 40823


 La similitude syntaxique entre Java et C++ facilite la translation d’un programme C++ en Java 
SCORE : 40747


 L’outil Cosmos est par exemple le fruit de cette association et de ce travail de recherche 
SCORE : 40735


13- Nombres de fragments moyen et total dans l’ensemble des buffers 
SCORE : 40705


 On ne traitera pas ici le problème du raffinement des éléments de relation 
SCORE : 40705


E 237 Ce modèle est macroscopique, non-interprété, évolutif, générique et paramétrable 
SCORE : 40698


 Cette fois, le modèle source est a priori parcouru une seule fois 
SCORE : 40673


 L’efficacité s’obtient en exploitant une désignation directe de la variable 
SCORE : 40666


 En terme de fonctionnalité pour un usager, le serveur joue un rôle analogue au magnétoscope et au magnétophone 
SCORE : 40637


 A ce titre, il est capable de modéliser n’importe quel modèle de performance MCSE 
SCORE : 40613


 Dans ce cas on générera une action mais en temps nul 
SCORE : 40443


 S’assurer de la complétude d’une spécification est aussi une réelle difficulté 
SCORE : 40406


 S’assurer de la complétude d’une spécification est aussi une réelle difficulté 
SCORE : 40406


 Avec ce type de parcours, la hiérarchie du modèle de départ n’est pas respectée dans le modèle final 
SCORE : 40397


2 Transcription pour un parallélisme Il s’agit de transcrire les 2 situations représentées par la figure 4 
SCORE : 40391


 Peut-être ceci est lié à la limitation à 10 utilisateurs 
SCORE : 40373


 Le système se compose de 2 fonctions F1 et F2 couplées par une variable partagée V 
SCORE : 40366


FM DIALOGUE DEMANDEUR - CONCEPTEUR •Le concepteur est l'ingénieur qui va concevoir le produit demandé 
SCORE : 40360


 L’absence de dimension structurelle stricte (zone 2 de la figure 2 
SCORE : 40346


 Les champs sont traités dans l’ordre pour faire toutes les indirections déclarées 
SCORE : 40298


 La somme de toutes les branches doit donner 1 au maximum 
SCORE : 40265


 Lorsque l’opération précédente est achevée, il y attente des conditions E1 et E2 (figure 3 
SCORE : 40120


E SequencesAccess et deux alias LectureSequences et EnregistrementSequences pour répartir ce vecteur sur la fonction Lecture et la fonction Enregistrement 
SCORE : 40061


E 101 Pour un port du type rendez-vous, il y a gestion de couples Producteur/Consommateur 
SCORE : 39952


14-b), la poursuite se faisant lorsqu’elles sont toutes satisfaites 
SCORE : 39931


 Par contre la condition est évaluée à chaque sortie possible 
SCORE : 39921


 A[1:m] et A2 sont des activités concurrentes liées par la donnée permanente V3 
SCORE : 39850


 Il y a 2 catégories de noeuds: le noeud de composition (NodeDs), le noeud de valeur (DataNode) 
SCORE : 39800


 - et les modèles interprétés pour lesquels les valeurs des données sont considérées 
SCORE : 39787


" Ready Condition Condition BehaviorDefinition Op0 * Ack Req Proc & Op1 Op2 Ready Activity1 Ack Op0’Time= 100 us Op1’Time= 20 us Op2’Time= 1 us Proc :: Op0& 
SCORE : 39774


 Plus l’architecture est particularisée, plus les concepts et les outils associés sont actuellement avancés 
SCORE : 39680


 La plupart des modèles proposés par différents auteurs s'avèrent utilisables 
SCORE : 39646


 La plupart des modèles proposés par différents auteurs s'avèrent utilisables 
SCORE : 39646


 Les process qui ne sont pas raffinés sont décrits sous la forme d’une tâche 
SCORE : 39584


 S’il s’agit d’une constante, l’opérande est une référence directe sur cette constante 
SCORE : 39527


 Mais il faut faire très attention à la portée des identificateurs 
SCORE : 39489


 Pour notre simulation, A est calculé par la loi empirique suivante: -Figure 7 
SCORE : 39294


 En l’absence de Range, le lien pointe sur Nil (qui veut dire vide) 
SCORE : 39188


 Les contraintes économiques ou juridiques sont trop souvent sous-estimées 
SCORE : 39186


 L'outil obtenu permet de faire: - une vérification fonctionnelle 
SCORE : 39170


 L’activité de co-design (partie en blanc de la figure 1 
SCORE : 39128


 - adapté à l’implantation de systèmes distribués sur un réseau local ou distant 
SCORE : 39120


 Si le port est en mesure de recevoir le message, il répond immédiatement par ActiveAck 
SCORE : 39025


 Dans ce dernier cas, il faut recourir à un émulateur matériel 
SCORE : 38986


 (expression) Il n’est pas toujours immédiat de retrouver la source d’une erreur 
SCORE : 38955


 Une fois chargé, des contrôles sémantiques et des optimisations sont faites (Compile) sur cette structure 
SCORE : 38952


 La partie gauche est régie selon la description à droite 
SCORE : 38947


5 Mbits/s avec E partie entière Validation de la méthode par des études de cas M 
SCORE : 38893


 Dans ce template certains champs alternatifs (par exemple IN, OUT ou INOUT) sont aussi indéfinis 
SCORE : 38876


 La réponse a été trouvée tout simplement dans le formalisme BNF 
SCORE : 38827


 Est-ce que les concepteurs se consacrent aux travaux les plus importants et profitables pour l’entreprise  
SCORE : 38754


 Sur la figure précédente nous avons grisé la fonction Edit 
SCORE : 38732


 Une valeur peut être un booléen, un entier ou un flottant 
SCORE : 38658


 Regul Regul a) Structure fonctionnelle 1 b) Structure fonctionnelle 2 RR[1:n] C1 Param Cons[1:n] Sv[1:n] P S C Regul C1 P S C P S C Param S1 S2 R1 R2 Chapitre 3 68 M 
SCORE : 38654


 Il est construit autour d’une base de données orientée objet 
SCORE : 38613


4- Exemple de système avec sa structure de données 
SCORE : 38584


 3- Le port voit maintenant la valeur ActiveReq assignée au signal Status 
SCORE : 38570


4-a représente une structure fonctionnelle et une structure d'exécution 
SCORE : 38497


4- Correspondances entre les règles BNF et les modèles de structure de données 
SCORE : 38493


E 173 6 Le Générateur VHDL Ce chapitre décrit l’implantation du générateur de code VHDL 
SCORE : 38490


 Allocation des ressources en personnel et matériel: Un groupe de développement est forcément limité 
SCORE : 38470


" qui permet d’afficher un message et stopper l’exécution du générateur 
SCORE : 38456


 Les résultats de la co-simulation sont données par la figure 7 
SCORE : 38452


 Cependant, il faut être attentif à ne pas paralyser son propre développement 
SCORE : 38406


 De plus, ses besoins influencent le développement de nouveaux produits OEM 
SCORE : 38261


 La description VHDL de la fonction Scheduler est donnée ci-après 
SCORE : 38236


 La description d’un exemple est donnée ci-après 
SCORE : 38211


E Le symbole Séquence (&) fixe l'ordre de génération avec exclusion 
SCORE : 38178


 Cette signification est similaire pour les relations par synchronisation et pour les éléments partagés 
SCORE : 38103


 Dans ce cas il s’agit d’un cas particulier d’une structure 
SCORE : 38097


 - Lavue comportementale permet de décrire le comportement des fonctions 
SCORE : 38079


 La règle d’analyse d’un élément de relation est la suivante 
SCORE : 37980


1 représente la structure fonctionnelle de l’application complète 
SCORE : 37978


 La taille des messages produits est tirée aléatoirement entre 4 et 255 
SCORE : 37975


 L’activité est décrite comme un process qui sera activé par un Fork 
SCORE : 37960


 La récursivité est possible en permettant l’utilisation de règles plus englobantes 
SCORE : 37958


 La figure suivante représente les 3 types d’opérations 
SCORE : 37946


 L’opération peut se représenter par la figure suivante 
SCORE : 37937


 L’opération peut se représenter par la figure suivante 
SCORE : 37937


 L’opération peut se représenter par la figure suivante 
SCORE : 37937


 L’opération peut se représenter par la figure suivante 
SCORE : 37937


 La source est modélisée comme un générateur idéal de blocs 
SCORE : 37876


 Notre analyseur syntaxique n’est donc pas strictement "full VHDL’93" 
SCORE : 37869


 Une vérification de cette opération peut être la suivante: SourceDs := LoadDs(Texte1, Grammaire,0) 
SCORE : 37863


 Nous reprenons ici les aspects généraux essentiels de la méthodologie 
SCORE : 37846


 Nous reprenons ici les aspects généraux essentiels de la méthodologie 
SCORE : 37846


 Lt est un élément du type information car il possède un type 
SCORE : 37842


 Pour cette co-simulation, le modèle de performance de MCSE est transcrit en un code VHDL 
SCORE : 37841


1- Structure fonctionnelle complète permettant la modélisation de performances 
SCORE : 37833


 Ce travail pour le langage VHDL fait l’objet du chapitre 4 
SCORE : 37831


 Il en est de même pour les actions en sortie d’opérations et d’activités 
SCORE : 37782


 Pour l’alternative Set 0:1, on trouve les 2 possibilités: absence ou symbole A 
SCORE : 37781


 Pour ces parties, un optimum local est alors recherché 
SCORE : 37755


 - Il procède ainsi pour toute la structure McseDs par récurrence et/ou récursivité 
SCORE : 37754


 - Il procède ainsi pour toute la structure McseDs par récurrence et/ou récursivité 
SCORE : 37754


 Une fonction procédure WaitConditionalActivation est utilisée pour l’attente multiple 
SCORE : 37741


 Il en est de même pour l’instanciation d’une fonction décrite par un comportement 
SCORE : 37735


 code source code généré modèle graphique Process1 Process2 => OP_2 Chapitre 6 204 M 
SCORE : 37697


 Cette démarche pour la réalisation est représentée ci-après 
SCORE : 37681


 Cette démarche pour la réalisation est représentée ci-après 
SCORE : 37681


 L’interface utilisateur du générateur est représentée par la figure 6 
SCORE : 37675


 Taskblocked Wait ActiveAck Blocked ActiveReq and (NbMess=0 or NbUse >= Concurrency) TaskBlocked ActiveReq and (NbFreeSpace>0 or NbUse >= Concurrency) TaskBlocked TaskBlocked) and NbFreeSpace-- 
SCORE : 37645


 Les différentes solutions peuvent être dans le template 
SCORE : 37631


 Il s’agit de la problématique du partitionnement matériel/logiciel 
SCORE : 37622


 Taskblocked Wait ActiveAck Blocked ProdReady and OutputTaskBlocked OutputActiveAck ActiveAck Taskblocked Wait ActiveAck Blocked Wait Vous InputActiveReq and NbUse >= Concurrency) InputTaskBlocked OutputActiveReq and NbUse >= Concurrency) OutputTaskBlocked ConsReady and OutputInactiveReq ConsReady := OutputActiveReq or OutputTaskBlocked 
SCORE : 37610


 Le deuxième niveau concerne la description de chaque ASIC 
SCORE : 37600


 Le comportement de chaque disque est décrit par un modèle comportemental 
SCORE : 37596


1- Exemple de sous-système concerné par le co-design 
SCORE : 37558


14 représente un exemple simple de modélisation 
SCORE : 37549


 L’implantation du protocole est donné ci-après 
SCORE : 37548


 Le comportement de la procédure DELAY est décrit ci-dessous 
SCORE : 37517


 Chacun de ces points est brièvement développé ci-après 
SCORE : 37508


 Une autre méthode consiste à utiliser un Chapitre 2 20 M 
SCORE : 37501


 Le modèle de structure pour la déclaration des paramètres génériques est le suivant 
SCORE : 37485


 La nouvelle fonction Disque[i] est décrite ci-après 
SCORE : 37464


 Acheter à bon escient peut faire gagner un temps précieux 
SCORE : 37417


 L’étape 3 sert à identifier les spécifications de la réalisation 
SCORE : 37407


15- Les actions et leur principe de transcription 
SCORE : 37400


" ")" 1:1 Expression ComparisonOp BehaviorDef ActivityUnit <Behavior> Name <ActivityUnit> <EndActivity> *Behavior Name "::" BehaviorDefinition BehaviorInstance 0:n 1:n 0:n Interface <EndBehavior> Name Internal " 
SCORE : 37397


 >Répartition logiciel / matériel selon les vitesses de traitements souhaitées 
SCORE : 37391


 -G- Mise à jour d’un champ: ModifField La modification d’un champ est une opération importante 
SCORE : 37385


 La construction VHDL Generate est utilisée pour l’instanciation multiple des fonctions User et TVSet 
SCORE : 37364


 S’il s’agit d’un champ, il s’agit de l’index dans le noeud 
SCORE : 37294


3- Démarche de co-design avec maîtrise des performances 
SCORE : 37286


 Ainsi une modification dans le script est immédiatement reportée dans le générateur concerné 
SCORE : 37275


E 11 et d’extraire les performances dynamiques d’un système 
SCORE : 37238


E 19 • Evaluation et vérification du comportement fonctionnel et des performances 
SCORE : 37226


 Chaque niveau sert d'intermédiaire entre 2 étapes 
SCORE : 37215


 Chaque niveau sert d'intermédiaire entre 2 étapes 
SCORE : 37215


9- Structure fonctionnelle avec modélisation réaliste des disques 
SCORE : 37188


E performances dynamiques du système résultant d’un partitionnement 
SCORE : 37167


4-c) et d’un seul automate pour un port du type Rendez-Vous (figure 4 
SCORE : 37161


 Reçoit sert simplement à consommer les messages en provenance du serveur 
SCORE : 37159


 Il a été détaillé dans différentes publications [CALVEZ-94] [CALVEZ-96c] 
SCORE : 37150


14- Les conditions et leur principe de transcription 
SCORE : 37145


 La XDs est basée sur un modèle de noeud générique appelé ici DsModel 
SCORE : 37143


 Les tâches ont un comportement purement séquentiel 
SCORE : 37131


19- Aperçu de l’interface graphique de l’outil d’analyse de Trace 
SCORE : 37106


 Notre modèle de performance est donc intégré à la méthodologie de conception MCSE 
SCORE : 37103


 On trouve dans ce process les instructions représentant le comportement 
SCORE : 37088


 La répétition exprime l'exécution conditionnelle (Repeat until, While) et inconditionnelle (For) 
SCORE : 37070


 La transcription en VHDL de l’exemple est alors la suivante: library VideoServerLibrary 
SCORE : 37055


 Name <Component> StructureDef ComponentDescription *ComponentDeclaration <EndComponent> ComponentDef <Structure> ComponentModels 1:n interface ":" <ComponentInstance> Name Name 1:1 0:n Name OptAttributes <ComponentModels> 0:1 <End 
SCORE : 37052


 Ceci permet de disposer de la notion de modèle générique pour l’instanciation 
SCORE : 37041


 On trouve ensuite l’instanciation de composants PortObject pour les ports Cmd et Rep 
SCORE : 37014


 Ce développement constitue actuellement l’activité principale de l’équipe MCSE 
SCORE : 37005


 Le système est imaginé capable de servir N utilisateurs simultanément 
SCORE : 36989


 La représentation graphique du template du package est la suivante 
SCORE : 36986


 L’instanciation multiple s’obtient aussi par l’instruction Generate 
SCORE : 36958


 Par l’achat de composants nouveaux il est possible de gagner du temps 
SCORE : 36957


 L’état Waiting est spécifique de l’emploi d’une ressource limitée 
SCORE : 36916


 Les spécifications du système et du bus sont représentées par la figure 7 
SCORE : 36907


 Les primitives Send et Receive décrites en VHDL sont données ci-dessous 
SCORE : 36861


 ARCHITECTURE behavioral OF EnvironnementVideoServer IS -- variable partagee pour la generation de nombres aleatoires SHARED VARIABLE rnd : REAL 
SCORE : 36859


 Une partie des spécifications technologiques est considérée ici 
SCORE : 36843


 La partie matérielle est spécifiée par une structure d'exécution 
SCORE : 36843


 La partie matérielle est spécifiée par une structure d'exécution 
SCORE : 36843


 C’est un langage standard et normalement indépendant de tout vendeur 
SCORE : 36809


 Ces outils sont optimisés pour générer de la documentation à partir d’un modèle textuel 
SCORE : 36796


 Les contraintes de performances sont de nature statique ou dynamique 
SCORE : 36781


 La structure fonctionnelle obtenue est représentée sur la figure 7 
SCORE : 36781


 - pas d’instanciation dynamique possible (uniquement statique) 
SCORE : 36766


 La référence sur la structure détruite n’est plus utilisable car possédant un contenu Nil 
SCORE : 36764


 L’argument est alors la grammaire et le type de noeud 
SCORE : 36741


 Au moins deux approches sont possibles pour ce problème 
SCORE : 36731


 Elle ne doit pas faire intervenir le système à concevoir 
SCORE : 36729


 Elle ne doit pas faire intervenir le système à concevoir 
SCORE : 36729


E 23 Actuellement de nombreuses heuristiques de partitionnement ont été développées 
SCORE : 36715


 Certains doivent pouvoir se définir et se modifier par l’utilisateur 
SCORE : 36646


E 229 Les producteurs et consommateurs sont des process cycliques très simples 
SCORE : 36639


 Ceci a été montré comme indispensable pour les opérations CopyDs et CopyNode 
SCORE : 36639


$Pt[:]&A1 ET sans ordre Pt[1:n] Ordre strict L’un Sélection & ^ OR S ‘Path Le modèle de performance de MCSE M 
SCORE : 36638


 Qu’il soit de qualité ou non, un modèle seul n'est pas suffisant 
SCORE : 36615


13- Etats d’une fonction et conditions de transition pour la condition Exit 
SCORE : 36613


 Le détail de cette démarche est décrit dans le paragraphe suivant 
SCORE : 36610


 Bien entendu, pour cela on interdit l’emploi de l’instruction VHDL "Wait for Time" 
SCORE : 36594


 La notation d'instanciation multiple est utilisable pour le parallélisme 
SCORE : 36589


 Si les 2 conditions sont présentes simultanément, il y a sélection non-déterministe 
SCORE : 36588


 La variable partagée est remplacée par un ensemble de ND fonctions Disque 
SCORE : 36555


5- Les 3 types de parcours possibles de l’arborescence de l’exemple 
SCORE : 36542


 La figure suivante décrit l'enchaînement des 4 étapes 
SCORE : 36516


 La figure suivante décrit l'enchaînement des 4 étapes 
SCORE : 36516


 -C- Implantation Le principe d’implantation d’un port est schématisé par la figure 4 
SCORE : 36503


 Ces phases sont décrites plus en détail ci-après 
SCORE : 36500


 L’attribut ‘Write sur le lien entre Prod et Port surcharge l’attribut ‘Write de Port 
SCORE : 36496


 Ceci veut dire, l’emploi de vecteurs de composants 
SCORE : 36474


 Le code script de l’algorithme est le suivant: AnalyzeBehaviorCondition :: { LocalVisibility ConcurrentActivity,AlternateConditionalActivity,GuardedCondition 
SCORE : 36444


 Sa description au format BNF est donnée dans le paragraphe suivant 
SCORE : 36417


 On retrouve la même notation pour les paramètres génériques 
SCORE : 36415


E Ce modèle de solution satisfait la condition de description hiérarchique 
SCORE : 36387


3 pour le noeud StructureDef qui inclut des composants définis par le noeud ComponentDescription 
SCORE : 36375


" InputOutput ":" "Mess" 1:1 ParameterDef IOType "In" "Out" "InOut" "Var" "Node"" TypedParameter "Ev" UntypedParameter 1:1 Name Name ElementName 0:1 Index GenericParameters NameList NextName 1:1 IndexRange ":" Interface 1:1 Range TypeRelation Chapitre 6 188 M 
SCORE : 36372


21- Face avant du générateur de programme VHDL comportemental 
SCORE : 36371


 L'intérêt est de disposer d'un guide pour la recherche de variables 
SCORE : 36359


 L'intérêt est de disposer d'un guide pour la recherche de variables 
SCORE : 36359


E 45 éléments de communication et les éléments d’Entrée/Sortie [ROSE-95] 
SCORE : 36332


 La fonction EmissionMess reçoit un message de Lreq et demande le jeton 
SCORE : 36318


 Ces références désignent obligatoirement des noeuds non-terminaux 
SCORE : 36308


 Elle exprime la transformation de l’information entrée -> sortie 
SCORE : 36305


" 1:1 InputOutput OptGenericParameters 0:1 Name 0:n "Generic" Name "," 0:1 DefRange Integer ":" Indice *Indice Name "(" 0:n ")" " 
SCORE : 36293


 Le principe d’implantation d’un événement est schématisé par la figure 4 
SCORE : 36257


 La sortie concernée est désignée par l’attribut ‘Path associé à l’opérateur 
SCORE : 36249


 -B- Exploitation des variables Les opérandes sont en fait les variables du script 
SCORE : 36231


Lt&Op3)) M[1:n] & Fonction F Op1 Lt Ev OR Prob_erreur else Activité A1 A12 A10 A1 :: A10&(<Prob_erreur>{A11}*N 
SCORE : 36216


 Pour l'alternative, une seule opération devient active 
SCORE : 36199


 Le système n’a pas besoin d’être entièrement détaillé 
SCORE : 36194


 MCSEGrammarDs contient donc aussi les règles de formatage 
SCORE : 36185


 Nous commençons tout d’abord par le cas du modèle séquentiel 
SCORE : 36181


 instruction appropriée pour les ensembles - Case pour l’exécution conditionnelle 
SCORE : 36162


E 21 composants de celle-ci sont à déterminer 
SCORE : 36121


 Deux fonctions multiples Enregistrement et Lecture accèdent à une variable partagée nommée Séquences 
SCORE : 36111


 Règles de Génération appelées lors de l’analyse Opérations effectuées par le générateur VHDL Chapitre 6 202 M 
SCORE : 36066


 Les variables sont regroupées sous la forme d’un vecteur 
SCORE : 36058


 Les figures montrent la valeur moyenne et la valeur maximale 
SCORE : 36020


 - regrouper en un seul record (solution (b) de la figure 4 
SCORE : 35996


 Ainsi, l'une des branches peut prendre la valeur "else" 
SCORE : 35990


12- Détermination d’une loi pour le calcul de A en fonction du débit 
SCORE : 35977


 Dans le cas contraire on y trouve la référence du noeud 
SCORE : 35956


 Il est ici simplement considéré suffisant pour l’exemple 
SCORE : 35924


 Règles de Génération appelées lors de l’analyse Opérations effectuées par le générateur VHDL Le Générateur VHDL M 
SCORE : 35912


E 139 essentielle par rapport à la structure de données de la grammaire) 
SCORE : 35896


 RefDs et AccessFileName ont les mêmes significations et définitions que ci-dessus 
SCORE : 35887


23- Dimensionnement du processeur et des disques en fonction de la charge 
SCORE : 35880


 Pour contourner cette limitation, deux solutions sont possibles: Transcription du modèle de performance en VHDL M 
SCORE : 35850


 L’entité gérant le port est ainsi passive 
SCORE : 35815


 •On réalise de petits blocs qui sont testés pour assemblés entre eux 
SCORE : 35796


 On peut citer en autres: GenerateConditionalLoop informations fournies: Expression, ComparisonOp, SecondExpression Génération de la construction "WHILE (Expression ComparisonOp SecondExpression) LOOP  
SCORE : 35784


 Le réseau haut débit considéré est le réseau ATM 
SCORE : 35772


7- Charge imposée au système pour la simulation en phase de démarrage 
SCORE : 35733


 La question est: peut-on exploiter Edit dans un générateur 
SCORE : 35715


 Ceci se justifie par le fait qu’en VHDL, on ne peut pas écrire Send(CmdUser, OrderRead(CmdUser 
SCORE : 35701


 - laméthode de partitionnement (interactif, semi-automatique ou automatique) 
SCORE : 35692


 Différentes techniques de co-simulation sont présentées dans le chapitre 2 
SCORE : 35678


 -B- Cas 1 -> N Il s’agit ici de la relation de distribution de 1 vers N 
SCORE : 35673


 Elle évolue depuis la spécification jusqu’au système réalisé 
SCORE : 35654


 Nous avons choisi une capacité de 1 pour les ports Treq et Tcons et de 5 pour les ports Lreq et Lind 
SCORE : 35653


 Les 2 derniers attributs concernent le constituant lorsqu’il n’est pas raffiné 
SCORE : 35631


 - Le résultat RefDs est une référence sur la structure de données créée 
SCORE : 35588


 Le modèle du système à simuler est saisi par un outil graphique 
SCORE : 35566


 il se définit par des attributs similaires au port de communication 
SCORE : 35564


 Le résultat de ce travail doit être vérifié 
SCORE : 35548


 Développer un outil pour effectuer cette transformation n’est pas une tâche facile 
SCORE : 35398


 Il s’agit de transcrire le modèle textuel MCSE en un langage cible (VHDL, C++) 
SCORE : 35377


 Ce travail qui a été effectué en collaboration avec le CCETT de Rennes (G 
SCORE : 35349


 -B- Extension du modèle fonctionnel Chaque fonction du modèle fonctionnel est une unité d’encapsulation 
SCORE : 35338


 Cette description est hiérarchique car une activité peut se raffiner 
SCORE : 35318


 Cette solution offre au moins deux avantages 
SCORE : 35299


 Le processeur Supervision supporte toutes les fonctions de dialogue 
SCORE : 35253


8- Modélisation par réseau de files d’attente d’une architecture parallèle 
SCORE : 35244


 ce qui nous oblige à gérer les indices de ce vecteur 
SCORE : 35177


 Il peut s’agir d’un objet physique ou fonctionnel 
SCORE : 35126


 Cette étape permet de s'adapter aux ETUDES DE CAS 16 M 
SCORE : 35124


 Cette étape permet de s'adapter aux ETUDES DE CAS 16 M 
SCORE : 35124


 Un temps d’évolution caractérise l'opération (attribut ‘Time) 
SCORE : 35068


 l’attribut ‘Proba est utilisé pour spécifier la sortie sélectionnée 
SCORE : 35059


 Aussi, c’est dans cette étape que se situe l’activité de co-design 
SCORE : 35044


 Les déroulements divergents ou simultanés apparaissent comme des branches parallèles verticales 
SCORE : 35042


 Le modèle de comportement décrit un mécanisme de requête/acquittement 
SCORE : 35037


 Ces travaux s’intègrent au développement d’un support informatisé pour la méthodologie MCSE 
SCORE : 34997


 Le processeur Exécution supporte toutes les fonctions critiques Lecture et Enregistrement 
SCORE : 34964


4 Manipulations des variables Des manipulations des variables du type Value et String sont indispensables 
SCORE : 34937


 Contrairement au modèle structurel, le modèle comportemental n’est pas forcément complètement hiérarchique 
SCORE : 34868


 Cet outil est présenté plus en détail dans [CALVEZ-95b] [CALVEZ-95c] [CALVEZ-98a] 
SCORE : 34853


 - Un demi-rond pour l’ensemble qui signifie le regroupement d’une collection d’éléments 
SCORE : 34851


 Nous décrivons donc le rôle des principaux attributs 
SCORE : 34839


19 illustre le cas de l’opération d’assignation 
SCORE : 34796


 •Spécifications technologiques (= contraintes et limitations du système, consommation) 
SCORE : 34778


 Une telle fonction débute par la lecture de A (figure 3 
SCORE : 34768


 Souvent, les premières considérations à prendre en compte ne sont pas de nature technique 
SCORE : 34749


 Une description détaillée et la justification de cette approche est expliquée dans [CALVEZ-96e] et [CALVEZ-97a] 
SCORE : 34734


 -C- Instruction Case L’exécution conditionnelle englobe l’instruction If et l’instruction Case 
SCORE : 34721


 5- Quand le port voit Status=InactiveReq, le port se prépare à un nouvel accès en positionnant Status à InactiveAck 
SCORE : 34714


 De plus, il ne peut intervenir que tard dans le cycle de développement 
SCORE : 34638


 Le travail présenté ici est une contribution à cette nouvelle orientation 
SCORE : 34575


 Il ne limite donc pas les possibilités de topologie d’un système 
SCORE : 34423


 Le rond noir sur les liens entre le port DemD Séquences Enregistrement[1:N] Lecture[1:N]  
SCORE : 34408


 Il s’agit de pouvoir affecter une nouvelle valeur 
SCORE : 34392


 Il faut au préalable ajouter 3 signaux et un alias 
SCORE : 34358


) facilitent la transcription et la simulation de notre modèle de performance 
SCORE : 34342


 Le modèle retenu satisfait les critères présentés dans le paragraphe 3 
SCORE : 34331


 -D- Instruction ForEach Cette instruction porte sur la manipulation d’un ensemble d’éléments 
SCORE : 34262


 Le temps de passage du jeton SToken‘Time de la fonction TokenManagement est fixé à 1 s 
SCORE : 34233


 Le concepteur dispose également de l’instruction "Error(msg) 
SCORE : 34227


 L’achat des composants électroniques standard ne se discute donc pas 
SCORE : 34173


 Le lecteur trouvera ces informations dans le chapitre 7 
SCORE : 34117


 •L’ingénieur concepteur est chargé du travail de spécification 
SCORE : 34113


 Les autres cas s’en déduisent par composition ou association 
SCORE : 34101


8- Nombre de Fragments dans les fifos internes du système pour 40 utilisateurs 
SCORE : 34079


 - mode indique le format du fichier à charger 
SCORE : 34059


 choix d’une action et visualisation immédiate du résultat 
SCORE : 34056


 Cette efficacité est due à la base de données de RDD100 construite sur le modèle Entité-Relation-Attributs (ERA) 
SCORE : 34019


 Généralement, plus le développement est avancé, plus la co-simulation est détaillée 
SCORE : 33994


 Il en résulte une solution fonctionnelle détaillée et optimisée 
SCORE : 33983


 Il ne doit pas se laisser guider par une solution a priori 
SCORE : 33979


 Il ne doit pas se laisser guider par une solution a priori 
SCORE : 33979


 Les entités sont regroupées par type d’entités (catégorie) 
SCORE : 33959


 Un développement, selon MCSE, est décomposé en 4 étapes (figure 2 
SCORE : 33948


 Les ensembles Set 1:n et Set 0:n se retrouvent dans la structure 
SCORE : 33882


E La fonction Supervision attend les demandes des usagers par l’entrée Cmd 
SCORE : 33800


 GenerateFromParActivity information fournie: NbTask Déclaration et initialisation d’un nouveau process 
SCORE : 33709


E 183 - En postordre ou postfixé ou parcours ascendant (bottom-up) 
SCORE : 33686


 La description peut alors être synthétisée 
SCORE : 33637


 •Quelles sont les connaissances nécessaires pour lire et comprendre le document  
SCORE : 33620


 Ces principes répondent à des difficultés couramment rencontrées par les concepteurs 
SCORE : 33602


 Ces principes répondent à des difficultés couramment rencontrées par les concepteurs 
SCORE : 33602


 , une clause LocalVisibility a été rajoutée à la définition d’une règle 
SCORE : 33556


E et permet de calculer une approximation des caractéristiques des processeurs 
SCORE : 33536


 L'enchainement des phases pour cette étape est représenté par la figure 1 
SCORE : 33532


 L'enchainement des phases pour cette étape est représenté par la figure 1 
SCORE : 33532


 IF (Input'LENGTH>1) THEN FOR i IN Input'LOW+1 TO Input'HIGH LOOP IF result/=Input(i) THEN -- tous les elements du vecteur ne sont pas identiques result:='Z' 
SCORE : 33437


 On s’aperçoit que l’élément optionnel du méta-modèle de donnée a disparu 
SCORE : 33422


 •Il est réalisé sur les éléments qui ressortent des spécifications fonctionnelles 
SCORE : 33385


" doit être reproduite pour chaque fonction 
SCORE : 33313


E réside simplement dans la représentation et la signification des constituants 
SCORE : 33284


 Faire ou acheter est une vraie question dans le processus de conception 
SCORE : 33216


FM ETAPE 2: LES SPECIFICATIONS •La spécification est une VUE purement EXTERNE du système demandé 
SCORE : 33213


E La fonction Edit peut avoir un rôle varié 
SCORE : 33163


 Aussi son degré de concurrence est supposé infini 
SCORE : 33087


 Si la recherche échoue, l’activité est une activité élémentaire 
SCORE : 32981


 La notation sera expliquée dans les paragraphes suivants 
SCORE : 32975


 Un besoin n'est jamais clairement et complètement défini 
SCORE : 32939


 Une référence Nil indique la non-existence de l’option 
SCORE : 32938


E 111 La description est donnée pour l’exemple de gauche 
SCORE : 32933


 La seconde solution est également en cours d’expérimentation 
SCORE : 32877


 Si tout s’est bien passé, le client est satisfait 
SCORE : 32792


1 SES/Workbench SES/workbench est un environnement de simulation vendu par SES (Scientific and Engineering Software Inc) 
SCORE : 32783


 Au préalable, nous justifions le choix du langage VHDL 
SCORE : 32661


 "exp" est une fonction probabiliste selon une loi exponentielle 
SCORE : 32640


E 3 - Les systèmes de communications dominés par le transfert d’informations 
SCORE : 32625


 La méthode d’aiguillage par la sélection est différente de la divergence OU 
SCORE : 32574


 Pour différencier les 2 cas, un attribut est associé au lien: ‘Read, ‘Change ou ‘Write 
SCORE : 32571


 Les producteurs et consommateurs sont implantés par des tâches logicielles 
SCORE : 32535


 Les demandes se font par des ordres de lecture et d’écriture DemD[i] 
SCORE : 32526


 Les critères de lisibilité et de compréhensibilité sont donc importants 
SCORE : 32521


 Les opérandes sont de 2 natures: - une référence sur une donnée ou une structure 
SCORE : 32379


 BEGIN -- Instanciation des ports Cmd[1:k] et Rep MultipleCmd : FOR i IN 1 TO k GENERATE Cmd : COMPONENT PortObject GENERIC MAP (NbUsersInput =>1, NbUsersOutput =>1, policy =>Fifo, concurrency =>1, capacity =>1, WriteTime =>NullTime, ReadTime =>NullTime) PORT MAP (InputAccesses (1) =>CmdInputAccesses (i), OutputAccesses (1) =>CmdOutputAccesses (i), NumberOfCurrentAccesses =>CmdNumberOfCurrentAccesses (i), NumberOfMessagesInPort =>CmdNumberOfMessagesInPort (i)) 
SCORE : 32359


 On suppose aussi un accès simultané possible 
SCORE : 32342


 Edit peut par exemple servir à proposer des alternatives 
SCORE : 32312


 Le GRAFCET (particulièrement utilisé en automatique), le STATECHART et le RESEAU DE PETRI sont d'autres variantes 
SCORE : 32293


 - évolutif: la notion d’attributs permet d’enrichir le modèle 
SCORE : 32261


 L’ordonnancement des threads est préemptif et à priorité fixe 
SCORE : 32221


 Cette valeur provient de l’étude présentée dans [CALVEZ-94] 
SCORE : 32154


 Les méthodologies DARTS et SDWMC de BUHR ont aussi des points communs 
SCORE : 32147


 Les méthodologies DARTS et SDWMC de BUHR ont aussi des points communs 
SCORE : 32147


 Les outils de synthèse logique sont très robustes 
SCORE : 32127


8 CONCLUSION Ce chapitre a permis de formaliser et d’illustrer le modèle de performance de MCSE 
SCORE : 32092


 Les perspectives envisageables au terme de cette thèse sont diverses 
SCORE : 32081


 Ce générateur est également celui qui est le plus avancé, debuggé et testé 
SCORE : 32017


 Dans le cas d’une récursivité, la structure de données est prolongée 
SCORE : 31994


) - la répétition, ({}) - l’activation conditionnelle multiple ([ 
SCORE : 31946


 Un ensemble de librairies de noeuds prédéfinis est disponible 
SCORE : 31906


 Notons que dans les systèmes actuels, la part du logiciel est croissante 
SCORE : 31904


 L’intérêt essentiel de cette technique est son évolutivité 
SCORE : 31871


 L’utilisation des méta-outils GraphTalk/LEdit a conduit à une impasse 
SCORE : 31863


 - la personnalisation de l’interface utilisateur est très limitée 
SCORE : 31821


 Ce chapitre a pour objectif de décrire formellement le modèle de performance de MCSE 
SCORE : 31718


 La fonction Usagers est modélisée comme 2 activités simultanées: Envoi et Reçoit 
SCORE : 31676


 - l’approche de COSYMA [ERNST-93] est opposée à celle utilisée dans VULCAN 
SCORE : 31656


 Les variables désignant un scalaire sont du type String ou du type Value 
SCORE : 31483


 L’opérateur avec la lettre S est un opérateur de sélection 
SCORE : 31443


 Par contre, la hiérarchie du modèle de départ est respectée dans le modèle final 
SCORE : 31375


 On peut remarquer qu’il n’y a pas de table de constantes 
SCORE : 31356


 -B- Représentation de la vue logicielle Il s’agit d’un modèle de process communicants 
SCORE : 31246


 On parle alors de vérification d’un prototype virtuel 
SCORE : 31232


 La technologie Java est en plein essor (prolifération de livres, outils et classes) 
SCORE : 31218


 Le premier est une description spatiale ou topologique du système 
SCORE : 31213


 On trouve pour finir l’instanciation de la fonction multiple Emission 
SCORE : 31168


 •VHDL est le langage de modélisation d’électronique numérique le plus significatif 
SCORE : 31129


 Les usagers sont activés progressivement de manière aléatoire 
SCORE : 30945


 >A quel contexte doit se raccorder le système  
SCORE : 30854


 On commence par exploiter les feuilles pour terminer par la racine 
SCORE : 30800


 b) Code VHDLpartiel a) Représentation graphique de la structure fonctionnelle du système Chapitre 4 126 M 
SCORE : 30773


): -B- Importation de règles Un script est un ensemble de règles 
SCORE : 30745


 Aussi, il est utilisé par les concepteurs pour dériver ou induire un modèle plus détaillé 
SCORE : 30728


 Un modèle peut être défini en interne (ComponentModels) M F11 F12 V F1 F2 M F11 F12 V F1 F2 M F11 F12 V F1 F2 M V F1 F2 F11 F12 M V F1 F11 F12 F2 V F11 F12 F1 F2 M BFS TOP-DOWN BOTTOM-UP Chapitre 6 184 M 
SCORE : 30672


 Le corps de la fonction possède un comportement séquentiel 
SCORE : 30652


 •Spécifications fonctionnelles (= description des fonctions du système) 
SCORE : 30630


2- Description de la démarche pour l’étape de définition de la réalisation 
SCORE : 30605


 Méthodologie de co-design et estimation des performances M 
SCORE : 30598


 Méthodologie de co-design et estimation des performances M 
SCORE : 30598


 Méthodologie de co-design et estimation des performances M 
SCORE : 30598


 Méthodologie de co-design et estimation des performances M 
SCORE : 30598


 Méthodologie de co-design et estimation des performances M 
SCORE : 30598


 Méthodologie de co-design et estimation des performances M 
SCORE : 30598


 C’est le cas le plus simple de génération de code 
SCORE : 30493


6- Structure interne générique de chaque outil 
SCORE : 30489


1 Syntaxe BNF de la grammaire du script Script ::= ScriptName [Configuration] [Importation] [Constants] [Variables] Operations Configuration ::= "Configuration" ParameterName {"," ParameterName} " 
SCORE : 30468


 Avec comme caractéristiques du processeur d’exécution ‘Concurrency=1 et ‘Power=0 
SCORE : 30461


 - La méthode et technique de co-vérification 
SCORE : 30457


8- Structure de données de la grammaire pour la déclaration de l’interface 
SCORE : 30438


 >Quelles sont les contraintes matérielles, économiques, juridiques, temporelles  
SCORE : 30432


 La structure de l’implantation en VHDL est décrite par la figure 4 
SCORE : 30415


 La structure de l’implantation en VHDL est décrite par la figure 4 
SCORE : 30415


 La structure de l’implantation en VHDL est décrite par la figure 4 
SCORE : 30415


 Le chapitre 6 décrit le générateur de VHDL comportemental 
SCORE : 30412


E 105 pour une autre tâche (fonction ou activité) 
SCORE : 30397


 La partie Génération est spécifique à chaque générateur 
SCORE : 30396


 Cette partie est spécifique pour chaque générateur 
SCORE : 30396


5- Les phases pour l'étape de définition de la réalisation 
SCORE : 30371


5- Les phases pour l'étape de définition de la réalisation 
SCORE : 30371


3 RDD 100 RDD100 est un outil de la société Ascent Logic Inc [ALFORD-91] [ALFORD-92] 
SCORE : 30364


 VHDL permet l’utilisation de paramètres génériques 
SCORE : 30355


 •C’est aussi la décision définitive des répartitions: >Répartition géographique, éloignement, liaisons 
SCORE : 30328


 Ceci complique sérieusement la génération du modèle VHDL et sa lisibilité 
SCORE : 30284


 Alloc( V) c) Ressource pour une concurrence Release( V) /ActiveReq InValue TaskBlocked Wait InAccess (ActiveReq or ActiveAck ActiveAck InactiveReq InactiveAck InactiveReq InactiveAck DELAY (writeTime) end wait OutValue InactiveReq InactiveAck End DELAY InactiveReq ActiveAck Wait InactiveAck Wait ActiveAck End DELAY InactiveReq InactiveAck Wait (ReadTime) DELAY NbUse < Concurrency NbUse++ 
SCORE : 30270


 Un process est utilisé à cet effet 
SCORE : 30201


 Dans la grammaire du modèle MCSE, le champ Range est une référence sur une structure 
SCORE : 30193


E La technique en développement est représentée par la figure 4 
SCORE : 30179


7 illustre la correspondance entre les 2 démarches complémentaires 
SCORE : 30167


7 illustre la correspondance entre les 2 démarches complémentaires 
SCORE : 30167


7- Structure de données pour la déclaration des paramètres génériques 
SCORE : 30155


 si ‘Policy=fugitive alors Ev:=1 si il existe *Sub(Ev) 
SCORE : 30141


E 113 Après l’opération Op, il y a mise en attente sur les 2 conditions E1 et E2 
SCORE : 30135


 Un exemple est donné ci-après 
SCORE : 30135


 Par exemple, l’opération LoadDs possède les 3 arguments: FileName, GrammarName et mode 
SCORE : 30124


4- Solution pour l’implantation d’un transfert de messages par un port 
SCORE : 30103


9- Les différents cas de l’instanciation multiple 
SCORE : 30101


5- Les différents cas de l’instanciation multiple 
SCORE : 30101


 La figure suivante montre ce protocole 
SCORE : 30086


13- Principe de co-simulation avec le modèle UVa 
SCORE : 30078


1- Architecture générique des outils de la plate-forme 
SCORE : 30063


 •Les tests aussi méritent une bonne documentation  
SCORE : 30054


" Name 1:1 utilsation de la primitive FindModel utilsation de la primitive IncludeComponent Le Générateur VHDL M 
SCORE : 30013


 Le port de communication est modélisé par un composant 
SCORE : 29993


 A1 est simultanément en exécution de A11 et en attente de l’événement Stop 
SCORE : 29991


16- Structure de données pour une variable du script 
SCORE : 29976


 Le langage de simulation retenu ici est VHDL 
SCORE : 29969


 } L’algorithme du parcours du type BottomUp est le suivant 
SCORE : 29967


 Pour ce niveau, le système n’est pas encore défini 
SCORE : 29931


 Pour ce niveau, le système n’est pas encore défini 
SCORE : 29931


14- Structure de données de la grammaire pour les conditions 
SCORE : 29899


 L’outil GraphTalk était séduisant pour au moins 4 raisons 
SCORE : 29863


 Une variable State est associée à chaque tâche 
SCORE : 29850


 Le modèle de comportement (partie droite de la figure 3 
SCORE : 29832


 On retient l’instruction Case car elle englobe la première 
SCORE : 29830


 Action Disque[] sur mess DemD[]: DefDemD avec sortie mess RepD[:]: DefRepD 
SCORE : 29822


 Le premier champ indique le type 
SCORE : 29819


 La structure fonctionnelle considérée (figure 4 
SCORE : 29781


 Le diagramme FLOT DE DONNEES (DEMARCO + WARD&MELLOR) fait partie des possibilités 
SCORE : 29775


 La création se fait à partir du modèle de la grammaire 
SCORE : 29744


14- Solution fonctionnelle pour l’application Serveur vidéo 
SCORE : 29742


15- Influence du nombre d’utilisateurs sur l’attribut ‘Power 
SCORE : 29733


 - ::= définit une règle de grammaire 
SCORE : 29676


2 montre l’organisation de la démarche pour cette étape 
SCORE : 29658


 Elle doit être conforme au modèle fonctionnel 
SCORE : 29655


 Elle doit être conforme au modèle fonctionnel 
SCORE : 29655


16- Comportement des fonctions internes du serveur 
SCORE : 29645


 K est ici considéré comme un paramètre 
SCORE : 29631


16- Structure de données de la grammaire pour les actions 
SCORE : 29615


1- Démarche de conception avec maîtrise des performances 
SCORE : 29608


 Dans ce contexte, comme le montre la figure 5 
SCORE : 29605


 Cette étude concerne par la solution par simulation VHDL 
SCORE : 29571


 Le port multiple Cmd exploite l’instruction VHDL Generate 
SCORE : 29569


 Le modèle structurel (partie gauche de la figure 3 
SCORE : 29526


 Modélisation des activités (comment) C’est une vue matérielle 
SCORE : 29519


 Le co-design est l’une de ces méthodologies 
SCORE : 29516


 Modélisation du comportement (quand) C’est une vue temporelle 
SCORE : 29482


7- Solution pour l’implantation d’un échange par donnée partagée 
SCORE : 29481


20- Hiérarchie des classes d’objets de l’outil MetaGen 
SCORE : 29479


 Une activité élémentaire est appelée opération 
SCORE : 29455


 La simulation est une technique appropriée pour un modèle dynamique 
SCORE : 29441


 Une fonction ReadMovie est associée à chaque usager 
SCORE : 29432


6 illustre le principe de génération de code 
SCORE : 29419


 Pour la compréhension, le comportement est modélisé par la figure 7 
SCORE : 29418


 Pt[:] veut dire le vecteur complet 
SCORE : 29412


E 41 Le modèle est surtout un modèle structurel (zone 2 de la figure 2 
SCORE : 29399


 L’architecture de la solution complète se déduit par MCSE 
SCORE : 29393


 CmdUsager[1:k] RepUsager[1:k] Séquences CmdCanalEnr[1:n] RepCanal[1:k] Emission Enregistrement Lecture Réception Usagers Exécution Supervision ‘Concurrency=nd 
SCORE : 29374


 me‘Index représente l’indice de l’activité courante 
SCORE : 29370


 Lors d’une alternative Set1:1, on trouve la notation alternative 
SCORE : 29354


E Les procédures sont décrites ci-après 
SCORE : 29349


" GenerateFromFirstGuardedCondition information fournie: InputName Déclaration du signal ProtocolVector et de la variable BranchNumber 
SCORE : 29333


 Elles sont définies dans le noeud du même type de la GrammarDs 
SCORE : 29319


 Le loader est en fait réalisé par un programme dénommé MCSE-Parser 
SCORE : 29297


15- Conversion du ET sans ordre et du OU logique 
SCORE : 29276


 Début 1997, l’équipe a donc réfléchi à une autre orientation 
SCORE : 29274


E La hiérarchie des classes est représentée sur la figure 5 
SCORE : 29251


”, “comment se fait-il que cette demande aboutit ici 
SCORE : 29249


 Le protocole est modifié dans le cas d’une ressource 
SCORE : 29237


11- Symboles pour la description d’une condition composée 
SCORE : 29236


E L’attente sur la variable Séquence se traduit par une primitive ReadSharVar 
SCORE : 29229


 Le débit sur le bus est indépendant des paramètres n et k 
SCORE : 29211


 Cette activité a alors une durée de vie illimitée 
SCORE : 29187


 Si l’ensemble est vide, alors la référence est Nil 
SCORE : 29184


 Nous avons retenu cette solution plus avantageuse et plus conventionnelle 
SCORE : 29174


 DESCRIPTION D’UN SYSTEME Une méthodologie est un guide pour le développement d’applications 
SCORE : 29113


 DESCRIPTION D’UN SYSTEME Une méthodologie est un guide pour le développement d’applications 
SCORE : 29113


 Un paramètre est utilisable dans toute expression 
SCORE : 29111


 Les résultats apparaissent similaires avec les 2 modélisations 
SCORE : 29048


 date : IN TIME) IS BEGIN protocol<=DefProtocol'(priority,date,ActiveReq) 
SCORE : 29047


 V[1:m] States(F1) States(F2[1:m]) Scheduler ‘Concurrency ‘Power F1 Cons F2[1:m] Port ‘Capacity ‘Write ‘Read ‘Write ‘Concurrency F States(F) EV ‘Write ‘Read ‘Concurrency ‘Write ‘Read ‘Capacity ‘Concurrency ‘Power ‘Policy ‘Priority ‘Deadline ‘Policy ‘Priority ‘Deadline ‘Policy ‘Use ‘Concurrency ‘Write ‘Read ‘Policy ‘Read TYPE DefUState IS RECORD TaskState : DefTaskState priority : NATURAL 
SCORE : 29035


 Ce principe est présenté en détail dans le paragraphe 5 
SCORE : 29024


6- Structure de données MCSE simplifiée d’un élément actif 
SCORE : 29017


 Déclaration de la variable contenant l’information à transmettre ou recue 
SCORE : 28994


 Souvent, l’architecture générique cible est choisie 
SCORE : 28960


 La syntaxe de ces instructions est: - VarValue := ValueOf( VarString ) 
SCORE : 28960


 La syntaxe d’entrée est souvent au format BNF (Backus Naur Form) 
SCORE : 28947


 et d’optimiser le temps d’exécution du générateur 
SCORE : 28931


 Scheduler est transcrite comme un composant (entité) VHDL 
SCORE : 28919


 Mais sans oublier que la motivation est un facteur déterminant pour la réussite 
SCORE : 28916


 Les cas suivants représentés par la figure 3 
SCORE : 28900


 GenerateFromBehaviorInstance information fournie: BehaviorName Déclaration d’un nouveau process 
SCORE : 28858


 F1 est raffinée par une structure comprenant F10, F11[1:n] et clk 
SCORE : 28856


13- Raffinement d’une activité et achèvement forcé 
SCORE : 28700


 nd,INTEGER,"nombre de disques",10 
SCORE : 28682


 Cette conversion est faite avant exécution 
SCORE : 28659


 Le total doit toujours être de 1 
SCORE : 28646


16-c) utilise un vecteur nommé Chapitre 4 124 M 
SCORE : 28597


 Certaines opérations nécessitent d’employer des données prédéterminées 
SCORE : 28585


 Les lettres en gras sont X pour une chaîne de caractères, un N pour un nombre 
SCORE : 28578


 state state state ’OverHead ‘OverHead Chapitre 4 92 M 
SCORE : 28543


 •Comment vont-ils utiliser le document  
SCORE : 28539


 Des éléments de synchronisation sont alors ajoutés 
SCORE : 28504


 Les ports BlockOut[:] et BlockIn sont du type rendez-vous (‘Capacity=0) 
SCORE : 28495


 Ces systèmes reçoivent, transforment et émettent des flots de messages 
SCORE : 28490


 A, B et C sont des symboles terminaux ou non-terminaux 
SCORE : 28425


 Il est implanté par une fonction de résolution et les procédures Fork, WaitFork, Join et WaitJoin 
SCORE : 28414


19- Structure de données pour l’opération d’assignation 
SCORE : 28393


 Dans le cas de la lecture, le retour est fourni par RepD[i] 
SCORE : 28378


 Le cahier des charges est écrit par le demandeur 
SCORE : 28374


 Les 3 attributs particulièrement concernés sont donc ‘Write, ‘Use et ‘Read 
SCORE : 28371


state/=ExitNow) THEN eve<=DefUSignalIn'(NullTime,DefProtocol'(priority,date,ActiveReq)) 
SCORE : 28305


13 illustre la technique de raffinement 
SCORE : 28304


 La figure suivante fournit la réponse 
SCORE : 28282


3 Problème des accès de niveaux hiérarchiques différents 
SCORE : 28261


 Il s’agit alors d’un accès direct 
SCORE : 28248


 La répétition doit être spécifiée 
SCORE : 28230


 Les noeuds de composition se retrouvent intégralement dans la solution 
SCORE : 28200


 Ils n’agissent que sur la couleur: lecture, modification, comparaison, addition et soustraction 
SCORE : 28122


 Ces instructions sont décrites dans les paragraphes suivants 
SCORE : 28102


 Tous les champs terminaux sont donc existants 
SCORE : 28041


21- Résultats pour la transmission implantée en logiciel 
SCORE : 28039


 Cette modification du protocole est présenté dans [CALVEZ-96c] 
SCORE : 28027


 Il s’agit de tester la valeur de champs 
SCORE : 28021


 Différentes techniques de partitionnement sont présentées dans le chapitre 2 
SCORE : 27936


 -- ########################################################### -- # Types et fonction de resolution pour l'etat d'une tache # -- ########################################################### TYPE DefTaskState IS (Nodriver,Inactive,Blocked,Waiting,Active) 
SCORE : 27904


 <EndRelationTypes> <GenericParameters> n,INTEGER,"nonbre de canaux haut debit",10 
SCORE : 27891


8 3 0 2 4 6 8 10 12 14 int(0 
SCORE : 27871


 1 2 3 4 5 6 7 0 2 4 6 8 10 12 14 "ABuffEstim" int(0 
SCORE : 27871


 Dmux envoie le message au consommateur concerné 
SCORE : 27846


3) explique l’évolution temporelle de la fonction F2 
SCORE : 27820


 Les résultats obtenus sont donnés par la figure 7 
SCORE : 27800


 Cette démarche a été expliquée dans le chapitre 2 
SCORE : 27790


 Les 2 parties ont une importance pour la réussite 
SCORE : 27763


 Les 2 parties ont une importance pour la réussite 
SCORE : 27763


 La simultanéité et les instances multiples sont possibles 
SCORE : 27737


 On peut citer par exemple PCCTS, SORCERER, Gentle Compile-Compiler et Eli Compiler Construction System [GRAY-92] 
SCORE : 27710


 La première situation est la plus commune et la plus simple 
SCORE : 27629


 Le bus est donc le goulot d’étranglement du système 
SCORE : 27562


 On constate bien ici (figure 3 
SCORE : 27552


 Elles peuvent s’exécuter en séquence ou en parallèle 
SCORE : 27544


E partitionnement initial proche de la solution 
SCORE : 27543


" GenerateFiniteUnLoop information fournie: Expression Génération de la construction "IF (cpt=0) THEN cpt := Expression 
SCORE : 27541


 MCSE est basée sur un modèle de description interne en 3 composantes 
SCORE : 27498


 MCSE est basée sur un modèle de description interne en 3 composantes 
SCORE : 27498


 Ici, la priorité la plus élevée est pour Dmux, puis Routing, Cons et enfin Prod 
SCORE : 27484


 Le texte suit l’évolution temporelle 
SCORE : 27467


35 2 3 4 5 6 7 8 9 10 "power" Power Nombre d’utilisateurs 0 0 
SCORE : 27466


 Les expressions doivent rester cohérentes pour les unités 
SCORE : 27352


" sans stopper l’exécution du générateur 
SCORE : 27310


 Il s’agit d’un modèle générique du résultat attendu 
SCORE : 27299


 Il s’agit d’un modèle générique du résultat attendu 
SCORE : 27299


FM ETAPE 1: LE CAHIER DES CHARGES •Le cahier des charges est l’expression du BESOIN 
SCORE : 27280


 On parle alors de simulation hétérogène 
SCORE : 27257


2 CRITERES DE QUALITE D’UN MODELE DE PERFORMANCE Un modèle est construit par l’assemblage de concepts de modélisation 
SCORE : 27058


 - l’utilisation nécessite de payer un "runtime" par machine 
SCORE : 27013


 Un utilisateur (User[i]) sélectionne un film en produisant un ordre Cmd 
SCORE : 26974


 BEGIN -- assignation concurrente pour l'attente conditionnelle ProtocolVector<=CmdUsager 
SCORE : 26959


 La duplication exploite le modèle du noeud dans la grammaire 
SCORE : 26879


 Ceci est mis en évidence dans le paragraphe suivant 
SCORE : 26812


 Pour éviter la confusion, les noms des primitives s’appellent Alloc et Release 
SCORE : 26801


 •La méthodologie de conception des ASIC n’est pas fondamentalement différente 
SCORE : 26797


 C’est donc un arbre et plus précisément une arborescence 
SCORE : 26782


23 donne le résultat du dimensionnement 
SCORE : 26733


5 PLAN DE LA THESE Ce manuscrit de thèse est découpé en 6 chapitres principaux numérotés de 2 à 7 
SCORE : 26722


E 223 Ces résultats sont représentés par les courbes de la figure 7 
SCORE : 26716


 Les règles de description sont ensuite expliquées 
SCORE : 26690


 Les 2 premiers types sont identiques pour les 2 structures 
SCORE : 26690


 De plus, il ne se limite pas nécessairement à l’évaluation des performances 
SCORE : 26638


 Chaque fonction Emission produit en permanence des fragments 
SCORE : 26595


 Nous justifions ensuite le choix du langage VHDL 
SCORE : 26524


 La structure traditionnelle d’un compilateur est la suivante 
SCORE : 26440


 La méthodologie de JACKSON est dans l'esprit relativement proche de MCSE 
SCORE : 26426


 La méthodologie de JACKSON est dans l'esprit relativement proche de MCSE 
SCORE : 26426


 Ceci doit favoriser la réutilisation en conception 
SCORE : 26413


E caractéristiques de l'environnement, en introduisant les interfaces 
SCORE : 26365


E caractéristiques de l'environnement, en introduisant les interfaces 
SCORE : 26365


 L’explication de cette abandon est donnée en début de chapitre 
SCORE : 26292


 •Dans cette partie du travail, il est répondu à la question "COMMENT  
SCORE : 26208


 Dans cette partie du travail, il est répondu à la question "COMMENT  
SCORE : 26208


 literal_without_literal_string  
SCORE : 26203


 - FindModel retourne la description interne du modèle d’une instance 
SCORE : 26184


 Il ne permet pas de mesurer les temps de réponse 
SCORE : 26177


 On détaille dans la suite ces 2 aspects 
SCORE : 26087


 Elles influent surtout sur l’allocation des fonctions 
SCORE : 26059


 Pourtant la méthodologie n’est pas fondamentalement différente (voir [4]) 
SCORE : 26050


 Rôle central du document de spécification d'un produit 
SCORE : 26007


 La syntaxe acceptée se décrit par une grammaire 
SCORE : 25981


 La valeur N est calculée à l'entrée dans le symbole 
SCORE : 25931


 Le concepteur est chargé de rédiger ce document 
SCORE : 25821


 attribute_name operator_symbol::=string_literal primary::=name  
SCORE : 25792


 Exemple: Gestion éclairageHorloge18kHzModule HTBIN2TRIGfonction principalezero_synctrig_outclk_18kHzclk_8Hzlight_enablelight_inGestion touchesclk_35Hz MCSE HES-SO//HEIA-FR Page 15 / 22 Dominique 
SCORE : 25748


 Puis on y ajoute 2 interfaces et un lien pour la communication 
SCORE : 25658


 BEGIN -- Instanciation d’un port MultipleX : FOR i IN 1 TO N GENERATE X : COMPONENT PortObject GENERIC MAP (NbUsersInput =>1, NbUsersOutput =>1, policy =>Fifo, concurrency =>1, capacity =>1, WriteTime =>NullTime, ReadTime =>NullTime) PORT MAP (InputAccesses (1) => XInputAccesses (i), OutputAccesses (1) => XOutputAccesses (i), NumberOfCurrentAccesses => XNumberOfCurrentAccesses (i), NumberOfMessagesInPort => XNumberOfMessagesInPort (i)) 
SCORE : 25617


 •Spécifications opératoires (= déroulement des opérations, précision 
SCORE : 25522


 Buffer est une fifo de capacité supposée infinie 
SCORE : 25425


E -- modelisation de l'environnement du systeme etudie -- entite Users Users : BLOCK PORT (Cmd : INOUT DefPortInVector(1 TO n)) 
SCORE : 25346


 - d’un mécanisme d’élimination du jeton (sink) 
SCORE : 25121


 - La réalisation conduisant à un système opérationnel 
SCORE : 25111


 - La réalisation conduisant à un système opérationnel 
SCORE : 25111


 Une extension vers la modélisation analogique est en cours: VHDL-AMS 
SCORE : 25071


 Les 2 branches sont achevées lorsque Op2 et Op3 sont achevées 
SCORE : 25063


 Ceci est une difficulté qui conduit à des erreurs fréquentes 
SCORE : 25048


 Ceci est une difficulté qui conduit à des erreurs fréquentes 
SCORE : 25048


 Il y a ensuite les modules de gestion des couleurs (9) 
SCORE : 24948


 Les syntaxes de ces instructions sont: - VarString := ToString(VarValue ) 
SCORE : 24809


 •Mais un IC est presque inaccessible et sa réalisation est définitive 
SCORE : 24623


 Le modèle ne modélise pas un étage de pipeline d’instructions 
SCORE : 24539


 ARCHITECTURE behavioral OF ProblemExit IS FOR all : EveObject use entity VideoServerLibrary 
SCORE : 24535


11- Exemple de modules de gestion des couleurs 
SCORE : 24475


 Un DIAGRAMME A ETATS FINIS convient bien à ce genre de description 
SCORE : 24333


 Le programme commence par des déclarations fixes 
SCORE : 24241


 Un reset est nécessaire pour annuler les demandes d’attente 
SCORE : 24156


 La politique d’ordonnancement n’apparaît pas significative 
SCORE : 23584


 L’exemple est dérivé de l’exemple précédent 
SCORE : 23543


 Une entité est un objet conceptuel pour le système 
SCORE : 23494


 Mais la majorité des générateurs de code ne correspondront pas à cette situation 
SCORE : 23380


 - La structure de sortie OutputDs est initialisée à l’image de XTemplateDs 
SCORE : 23363


 Elle est même ambiguë hors contexte 
SCORE : 23362


 Le garbage collector s’occupe de libérer automatiquement la mémoire désallouée 
SCORE : 23242


E approche a également été abandonnée 
SCORE : 23184


 Il y a également un bouclage entre les noeuds Activity, RepeatedActivity et ActivityDef 
SCORE : 23183


 Elles respectent une syntaxe et une sémantique données 
SCORE : 23174


 C’est une description du comportement, dans le temps 
SCORE : 23170


3- Modèle de comportement pour chaque fonction SupervisionUsager 
SCORE : 23157


 •S’attacher à la signification et non à l’implantation 
SCORE : 23140


E 211 La structure fonctionnelle est basée sur le modèle Supervision/Contrôle-Commande 
SCORE : 23124


 & Op3 Lt:DefLt Cmd Op4 Op5 Stop A1 A11 A12 Process Process A111State A111 A112 Process A11 A1State Process A1 Block A11 A1Status A11Status Op1 TaskKiller A11State A112State Op2 A10 A111 A112 (A10) a) Exemple d’activité b) solution d’implantation Chapitre 4 116 M 
SCORE : 23116


 Ceci est le cas pour F mais aussi pour F1 et F2 
SCORE : 23041


2- Spécification du comportement de l’environnement pour les performances 
SCORE : 23027


1- Démarche et outil pour l’évaluation des performances 
SCORE : 23027


End If en réduisant les automates à deux états 
SCORE : 23011


3 représente un exemple de modèle de performance 
SCORE : 23011


 C’est plutôt de savoir “qui est à l’origine du projet 
SCORE : 23002


 Ce modèle de performance est décrit dans le chapitre 3 
SCORE : 22994


2) est intégrée dans la démarche d’ingénierie système 
SCORE : 22986


1- Modèle de description des solutions pour la méthodologie MCSE 
SCORE : 22953


10- Modèle de comportement pour la fonction Lecture 
SCORE : 22945


 /* create new process or task */ GenerateBeginTaskSynchronisation 
SCORE : 22904


E 73 - la donnée ou ressource partagée 
SCORE : 22899


 fonctionnelles (= description des fonctions) •5 
SCORE : 22892


 TaskBlocked Write Wait InAccess (ActiveReq or ActiveAck ActiveAck InactiveReq InactiveAck InactiveReq InactiveAck DELAY (writeTime) end wait Value InactiveReq InactiveAck End DELAY InactiveReq ActiveAck Wait InactiveAck Wait ActiveAck End DELAY InactiveReq InactiveAck Wait (ReadTime) DELAY NbUse < Concurrency NbUse++ 
SCORE : 22892


 Le résultat en sortie est la structure OutputDs 
SCORE : 22862


7- Description comportementale d’une fonction et d’une activité 
SCORE : 22858


 •La méthodologie est l’application d’une démarche 
SCORE : 22844


E 109 écriture) de l’élément de relation 
SCORE : 22815


2- Structure de données pour le template VHDL de l’entité 
SCORE : 22806


4- Modèle structurel pour la modélisation des performances 
SCORE : 22783


4- Les phases pour l'étape de Conception fonctionnelle 
SCORE : 22775


4- Les phases pour l'étape de Conception fonctionnelle 
SCORE : 22775


2 représente le résultat de cette modélisation 
SCORE : 22772


 Serveur <Component> StructureDef ComponentDescription <EndComponent> <Structure> BehaviorDef <Behavior> Emission "::" BehaviorDefinition BehaviorInstance 1:n Interface Modele1 Attributes StructureDescription 1:n <EndStructure> Relation " 
SCORE : 22771


15- Exemple de modélisation sous Cosmos 
SCORE : 22769


 est utilisé pour décrire l’attente 
SCORE : 22769


 - le modèle d’architecture: RD100, Cosmos de Omniview appelé encore récemment Performance Modeling WorkBench 
SCORE : 22756


 ELSIF (CurrentConcurrency=0) THEN -- pas de fonction active ou en attente InactiveTask(ProcessorState) 
SCORE : 22724


 Sa description est décrite par un comportement 
SCORE : 22713


" [Attributes] ComponentDef <EndComponent> Range ::= "[" Indice ":" Indice "]" GenericParameters ::= Generic Name {"," Name } Parameters ::= "(" {Parameter" 
SCORE : 22647


 Le diagramme d’activités de la figure 3 
SCORE : 22647


10- Représentation pour un parallélisme et transcription 
SCORE : 22641


 Un process est utilisé pour cela 
SCORE : 22639


 •C’est aussi une modélisation structurelle 
SCORE : 22631


E template et l’écriture d’un script 
SCORE : 22623


 Port1 Prod[1:m] Info1 Port2[1:n] Cons[1:n] Info2 Exec Send Receive Send Receive Type DefInformation IS RECORD Size : Integer 
SCORE : 22616


 La structure représentée par la figure 3 
SCORE : 22613


 Modèle MCSE Modèle Générique du code Parcours Analyse Analyse et Transformation Sauvegarde Ascii Analyse Code Généré à générer Syntaxique Syntaxique Ordonné Reverse-Coding possible Copie Chapitre 2 34 M 
SCORE : 22609


 OptionalPackage DeclarativePart PackageName PackageName NoParseConstDef TypeDefInformation TypeDefData NoParseTypeDef NoParseReadSharVarDeclaration NoParseSendDeclaration OptionalArchitecture StatementPart Body PackageName NoParseReceiveDeclaration NoParseComponentDeclaration 0:n NoParseReceiveBody NoParseSendBody NoParseReadSharVarBody NoParseWriteSharVarDeclaration NoParseWriteSharVarBody NoParseResolFunc 0:n 0:n Chapitre 6 178 M 
SCORE : 22594


 n est un paramètre générique de la structure 
SCORE : 22578


E exécutif temps-réel 
SCORE : 22568


8- Solution pour l’implantation d’une ressource commune 
SCORE : 22556


 GrammarName Operations ::= "Operations" {OpDefinition} OpDefinition ::= OpName "::" "{" [LocalVisibility] OpDef 
SCORE : 22543


 Le cas est représenté par la figure 5 
SCORE : 22515


 est utilisé pour exprimer la génération 
SCORE : 22508


 Multiple Block "Block" Block EndBlock Block "Process" Statements EndProcess Process If Case Send Stat StatementPart 0:n Process 0:n Declarations Entity Architecture "Architecture" EntityDeclaration End Architecture RelationDescription 0:n Declarations Le Méta-Générateur MetaGen M 
SCORE : 22470


 ContextClause EntityName GenericClause PortClause 0:n OptionalArchitecture DeclarativePart EntityName EntityName ConstantDeclaration TypeDeclaration SignalDeclaration AliasDeclaration NoParseDeclarations PortConfiguration DataConfiguration Library Clause Use Clause 0:n LibraryName LibraryName PackageName ComponentEve 0:n ComponentData GenericBlock OptionalArchitecture StatementPart ComponentPort Block Statem 
SCORE : 22470


2- Représentation du processus de co-design 
SCORE : 22467


4- Principe de co-simulation retenu 
SCORE : 22461


2- Modèle de simulation retenu pour la transcription en VHDL 
SCORE : 22433


 GenerateFromLastGuardedCondition Mise à jour de la dimension du signal ProtocolVector 
SCORE : 22414


6- Solution pour l’implantation d’une synchronisation par événement 
SCORE : 22413


 est utilisé pour exprimer une condition 
SCORE : 22388


 il possède les attributs d’un événement 
SCORE : 22350


 Cmd est un lien du type événement 
SCORE : 22340


 Cette ressource (voir figure 7 
SCORE : 22333


18- Structure de données pour une exécution du Script 
SCORE : 22327


45 Ko 31 Ko 492 s 245 s Generateur Script Mcse Template Sortie Interprété Java Compilé CVxworks 150 Ko 6 
SCORE : 22312


 Une condition se définit comme pour le While 
SCORE : 22301


" InputOutput n 0:n "Generic" "," k 0:n "(" ")" GenericParameters InputOuputs NextList NextName Declarations Relations BlockDef VHDLProgram Behavior *BlockDef 1:1 ForGenerate Block EndGenerate Architec 
SCORE : 22289


 La notation graphique est celle de SES/Workbench 
SCORE : 22287


 •Modéliser, c’est avant tout décrire 
SCORE : 22284


 Validation de la méthode par des études de cas M 
SCORE : 22282


 Validation de la méthode par des études de cas M 
SCORE : 22282


 Validation de la méthode par des études de cas M 
SCORE : 22282


 * * * Validation de la méthode par des études de cas M 
SCORE : 22282


 ElementName 1:1 OrOutput OutputElementNameList SelectName OrderElements NoOrderElements ChoiceElements Action OrOutputItem 1:n "(" ElementName 1:1 OutputChoiceList SubOrderList SubNoOrderList ")" "(" ")" ElementName "<" ">" ConditionExpression OrOutputList " 
SCORE : 22281


 Un modèle de l’environnement est à nouveau nécessaire 
SCORE : 22271


13- Méta-modèle pour la description des activités 
SCORE : 22250


10- Représentation d’une évolution conditionnelle 
SCORE : 22247


 Source User[1:n] Avions TV set[1:n] Disks‘Concurrency = ND 
SCORE : 22237


1- Structure de données pour le template du package VHDL 
SCORE : 22236


 La partie Contrôle/Commande est composée des fonctions Lecture et Enregistrement 
SCORE : 22233


 On différencie une valeur d'une grandeur paramètre 
SCORE : 22222


 La syntaxe est la suivante: R ::= { R1 
SCORE : 22216


12- Représentation pour la génération d’actions 
SCORE : 22210


 Si la Règles BNF notation MetaDs MetaDs A B C A C B Y 1:1 Y Y ::= A B C 
SCORE : 22202


15- Comportement des entités de l’environnement 
SCORE : 22191


1, la différence entre les 2 structures Chapitre 3 56 M 
SCORE : 22171


 Un nouveau loader est engendré par exploitation de Grammar-Parser 
SCORE : 22153


4-c) que le modèle exécutif sert de support 
SCORE : 22148


 -A- ETAPE DE SPECIFICATION Concernant l’étape de spécification, il y a 2 difficultés 
SCORE : 22148


 -A- ETAPE DE SPECIFICATION Concernant l’étape de spécification, il y a 2 difficultés 
SCORE : 22148


 Tprod Emission Cmd[1:k] Rep Modèle1 a) Représentation textuelle b) Représentation graphique Le Méta-Générateur MetaGen M 
SCORE : 22140


3- Etats d’une fonction et conditions de transition 
SCORE : 22117


 L’événement est modélisé par un composant 
SCORE : 22116


 Nous avons appelé ce programme MetaGen 
SCORE : 22098


 La notation retenue est la suivante 
SCORE : 22090


6- Exemples de structures fonctionnelles utilisant un modèle 
SCORE : 22071


9 montre l’organisation d’un générateur 
SCORE : 22069


 setStepFlag load compile interprete interprete doJavaCode ToolsPath ProjectPath WorkPath startComponent  
SCORE : 22059


) >Quelles fonctions doit-il réaliser  
SCORE : 22039


 Dans la notation textuelle, le symbole 
SCORE : 22021


" Activity "<" ExpressionCondition ">" Activity CondActivity 1:n CondActivityList LastCondActivity 0:1 OptLastCondActivity "<*>" Activity RepeatedActivity "{" ActivityDef "}" "*" 1:1 LoopDef "*" Expression "/" Expression "=" Condition AlternateConditionalActivity "[" GuardedCondition "(" BehaviorCondition " 
SCORE : 21974


 Les autres noms (GenericParameters, Parameters, etc 
SCORE : 21960


11- Représentation d’une évolution alternative 
SCORE : 21945


 La syntaxe retenue est la suivante: ForEach( Set : Règle ) 
SCORE : 21935


 La syntaxe retenue est la suivante: Case( Condition1 : Règle1  
SCORE : 21935


 La fonction A envoie un message M 
SCORE : 21913


 (But, «qualité» attendue, marché, etc 
SCORE : 21900


17- Structure de données pour la grammaire du Script 
SCORE : 21898


 - soit au niveau des places 
SCORE : 21885


 -- fonction de resolution pour l'implantation d'un Fork ou d'un Join FUNCTION ResolForkJoin (Input : STD_ULOGIC_VECTOR) RETURN STD_ULOGIC IS VARIABLE i : INTEGER 
SCORE : 21869


17- Spécification du système de communication 
SCORE : 21864


20- Résultats pour le maximum de matériel 
SCORE : 21861


 - Définir un ou plusieurs fichiers template 
SCORE : 21859


 Ceci est une forme de comportement préemptif 
SCORE : 21853


5- Techniques de transfert d’information par les procédures Send et Receive 
SCORE : 21819


 Une Fifo appelée FifoLec est utilisée pour cela 
SCORE : 21817


 Toutes les fonctions sont définie dans le détail 
SCORE : 21790


 Les attributs ‘Read et ‘Write sont aussi utilisables 
SCORE : 21749


) >Quels seront les utilisateurs du système  
SCORE : 21677


21- Interface utilisateur de l’outil MetaGen 
SCORE : 21637


9- Représentation des constructions pour exprimer un déroulement 
SCORE : 21575


 - AccessFileName est le chemin d’accès au fichier 
SCORE : 21531


10- Exemple de modules de contrôle du modèle UVa 
SCORE : 21451


 -E- Attribut ‘Cond Cet attribut est utilisé pour l’opérateur Répétition 
SCORE : 21433


 2- Obtenir un modèle VHDL simulable pour l’extraction de performances 
SCORE : 21418


5) A Débit (Mbits/s) Soit encore A = E(DebitSequence ⁄ DebitMoy + 1, 5) A = E(NbUtilisateurs ⁄ Nbdisques × DebitSequence × TaccDiskMoy ⁄ TailleFragment + 1, 5 ) Courbe Obtenue pour un débit moyen de 7 
SCORE : 21401


 Le second est une description temporelle 
SCORE : 21389


 opératoires (= déroulement des opérations) •6 
SCORE : 21373


 Modélisation des données/informations (quoi) 
SCORE : 21369


" GenerateFiniteLoopExpression information fournie: Expression Génération de la construction "FOR j IN 1 TO Expression LOOP  
SCORE : 21360


 C’est lui qui écrit ce document 
SCORE : 21330


22- Modélisation réaliste des disques 
SCORE : 21325


 - la déclaration des constantes et des variables 
SCORE : 21299


 Les attributs sont aussi ajoutés 
SCORE : 21253


" GenerateFromCondActivity informations fournies: Expression, ComparisonOp, SecondExpression Rajout d’une branche "ELSIF 
SCORE : 21239


 Le script est ensuite compilé 
SCORE : 21181


 GenerateEndTaskSynchronisation information fournie: NbTask Appel des procédures WaitJoin/Join 
SCORE : 21075


 GenerateBeginTaskSynchronisation information fournie: NbTask Appel des procédures Fork/WaitFork 
SCORE : 21075


21- Déroulement temporel pour la validation du modèle 
SCORE : 21003


E 233 nombreux indices de performances 
SCORE : 20988


 Les résultats sont donnés par la figure 7 
SCORE : 20959


 La relation considérée dans le modèle MCSE est générale 
SCORE : 20957


 technologiques (= contraintes et limitations) •7 
SCORE : 20930


 Dans ce cas, l’opération DelDs est suffisante 
SCORE : 20849


17- Conversion de la simultanéité et de l’alternative 
SCORE : 20835


 Y est un symbole non-terminal 
SCORE : 20807


 2- Mise à jour du champ Declarations en remplaçant X par Serveur 
SCORE : 20795


 Prod :: {Tprod&Treq[]}* * Trcons Trcons‘Time=1 ms 
SCORE : 20787


 setDebugFlag setHistotyFlag writeMsg sendMsg clear updateVariableTable getTime getFreeMemory replaceCharAt delDelimiter includeOp initReport initVariableValue writeHistory startExecution suspend resume stopExecution gscriptDs root Vector ConstantVector boolean steptostep Vector ConfigurationVector  
SCORE : 20779


 Un "Behavior Diagram" est constitué d’un ensemble de fonctions 
SCORE : 20673


) sur les performances des divers noeuds du modèle 
SCORE : 20646


45 Ko 27 Ko 31 Ko 492 s 827 Ko 245 s Le Générateur VHDL M 
SCORE : 20627


 Il y a correspondance indice par indice 
SCORE : 20625


 Ceci explique l’ensemble 0:n Chapitre 5 158 M 
SCORE : 20623


 A2 Op0 100 ms maximum 
SCORE : 20586


 •C’est une démarche bottom - up 
SCORE : 20522


 • Il répond donc à la question "QUOI  
SCORE : 20480


 Des corrections sont toujours nécessaires 
SCORE : 20422


 Des corrections sont toujours nécessaires 
SCORE : 20422


" et déclaration de la variable cpt 
SCORE : 20409


 bit_string_literal  
SCORE : 20370


 Des règles d’interaction par les symboles  
SCORE : 20368


 - pas de mécanismes de suspension de process 
SCORE : 20334


 Il est multi plate-formes (PC, UNIX) 
SCORE : 20306


 Elle montre le séquencement : un algorithme 
SCORE : 20301


M Bergé du CNET de Meylan est également présenté dans [CALVEZ-97a] 
SCORE : 20169


 Pour la simplification, on a conservé uniquement les noms Ev et Var 
SCORE : 20167


 Par défaut, la capacité est infinie 
SCORE : 20093


 -- entite source source : BLOCK PORT (BlockIn : INOUT DefPortIn) 
SCORE : 20032


 Mise à jour des records TypeDefInformation et Type- DefData du package 
SCORE : 20012


 message(dest)(source)<=TmpPortAccess 
SCORE : 20006


7- Forme en double triangle pour le développement 
SCORE : 19980


7- Forme en double triangle pour le développement 
SCORE : 19980


 Ceci est expliqué dans le paragraphe suivant 
SCORE : 19923


 - ForEach élément do règle 
SCORE : 19845


 Une seule doit exister 
SCORE : 19787


 Le modèle d’architectures est un modèle naturel pour le concepteur 
SCORE : 19633


 Il ne représente pas les émissions de messages 
SCORE : 19626


 Chaque fonction est définie par les attributs: ‘Concurrency, ‘Power, ‘Policy, ‘Priority, ‘Deadline 
SCORE : 19600


 Plusieurs caractéristiques intéressantes y sont représentées 
SCORE : 19535


 Un identificateur est une chaîne de caractères 
SCORE : 19438


 A1 est supposée être raffinée 
SCORE : 19380


 Les nouvelles procédures sont les suivantes: PROCEDURE BlockingTask(SIGNAL TaskState : INOUT DefState) IS VARIABLE TmpTaskState : DefUState 
SCORE : 19288


 Pour enrichir la signification, il est souhaitable de différencier: Données et Ressources 
SCORE : 19261


 Une couleur est associée au jeton 
SCORE : 19169


 Case(Expression=Nil : Error('Attribut Time not defined for '&Name) 
SCORE : 19108


 Ainsi l’ensemble disparaît dans la structure XDs 
SCORE : 19013


 Non représentés par les courbes de la figure 4 
SCORE : 18987


 On s’aperçoit avec la figure 6 
SCORE : 18795


 Mais le modèle de départ est mis à plat 
SCORE : 18781


 Les 3 parties sont considérées conjointement 
SCORE : 18685


 Tous les paramètres du modèle sont appelés des attributs 
SCORE : 18560


 Les fonctions consomment et produisent des données 
SCORE : 18529


E solution optimale recherchée 
SCORE : 18519


 Contrainte de temps à satisfaire T <=k/SéquenceOut[]‘Débit CanauxLibres = {} 
SCORE : 18429


 Les demandes sont mémorisées dans les ports DemD[i] 
SCORE : 18272


 Tout d’abord, elle est évolutive 
SCORE : 18242


 En supposant dans l’exemple de la figure 4 
SCORE : 18191


priority)) THEN -- processor preemption Preemption(StateVector,lowestActiveFunction, highestWaitingFunction, OverHeadProcessor,ProcessorState) 
SCORE : 18163


 Qu’en est-il des brevets, des réglementations, des normes ou des certifications nécessaires 
SCORE : 18066


 (expression) literal::= numeric_literal  
SCORE : 17969


 Rep : COMPONENT PortObject GENERIC MAP (NbUsersInput =>1, NbUsersOutput =>1, policy =>Fifo, concurrency =>1, capacity =>1, WriteTime =>NullTime, ReadTime =>NullTime) PORT MAP (InputAccesses (1) =>RepInputAccesses (1), OutputAccesses (1) =>RepOutputAccesses (1), NumberOfCurrentAccesses =>RepNumberOfCurrentAccesses (1), NumberOfMessagesInPort =>RepNumberOfMessagesInPort (1)) 
SCORE : 17892


 WHEN Active=> -- Scheduling according to a static priority InfoFunctions(StateVector,CurrentConcurrency, lowestActiveFunction,highestWaitingFunction) 
SCORE : 17811


5- Technique du "bootstrapping" pour la génération du loader 
SCORE : 17720


E 17 qualificatif de complexe 
SCORE : 17477


 ou d'une fin d'execution forcee WAIT UNTIL (TaskState 
SCORE : 17264


 ou d'une fin d'execution forcee WAIT UNTIL (TaskState 
SCORE : 17264


 La réponse est maintenant clair 
SCORE : 17257


 [6] Electronique numérique et séquentielle, Noël Richard, éd 
SCORE : 17084


 • précisions et erreurs tolérées 
SCORE : 16708


protocol:= DefProtocol'(priority,date,ActiveReq) 
SCORE : 16672


 Une variante est indiquée pour le champ Range 
SCORE : 16439


 La zone grisée de la figure 2 
SCORE : 16300


 La structure de la grammaire n’est pas copiée 
SCORE : 16290


 C’est le cas de LEdit de Parallax et de Synthesizer Generator [REPS-88] de la société GrammaTech 
SCORE : 16032


” ou encore “pour qui vais-je travailler 
SCORE : 16028


1) de la sérialisation/désérialisation d’objets 
SCORE : 15922


7) a au moins deux conséquences 
SCORE : 15882


 La nouvelle procédure Delay est donc: PROCEDURE Delay( CONSTANT WaitTime : IN TIME 
SCORE : 15776


E 239 matériel/logiciel 
SCORE : 15583


1- Niveaux de description d’un système 
SCORE : 15469


1- Niveaux de description d’un système 
SCORE : 15469


 Toute la structure entre "MultipleEmission" et "END GENERATE MultipleInstantiationEmission 
SCORE : 15439


5- Modèle de comportement pour la fonction Lecture 
SCORE : 15436


4- Modèle de comportement pour la fonction Enregistrement 
SCORE : 15436


3- Structure de données pour une solution 
SCORE : 15429


6- Principe de la génération de code 
SCORE : 15422


1- Démarche de développement avec MCSE 
SCORE : 15410


2- Structure de données pour une grammaire 
SCORE : 15403


E - Ajout d’un élément dans un ensemble 
SCORE : 15372


E - l'étape de Conception fonctionnelle 
SCORE : 15369


FM R ÉFÉRENCES ET BIBLIOGRAPHIE: [1] Spécification et conception de systèmes 
SCORE : 15361


9- Exemple de modélisation sous SES/Workbench 
SCORE : 15359


 - l'étape de Définition de la réalisation 
SCORE : 15355


 si ‘Policy=Boolean alors Ev:=1 
SCORE : 15349


 => si ‘Policy=Counter alors Ev:=Ev+1 
SCORE : 15349


 / ActiveReq Receive Wait OutAccess end wait Waiting Waiting NbUse:=0 
SCORE : 15342


 / ActiveReq Read Wait OutAccess end wait Waiting Waiting NbUse:=0 
SCORE : 15342


 Le port Cmd est un vecteur 
SCORE : 15331


 La définition Transcription du modèle de performance en VHDL M 
SCORE : 15330


3- Déroulement pour l'étape de spécification 
SCORE : 15328


3- Déroulement pour l'étape de spécification 
SCORE : 15328


 Séquences Disque[1:ND] DemD[1:ND] RepD[1:n] User[1:n] Source TaccDisk = Tseek + Tlatency + Tread 
SCORE : 15326


 Cmd BlockIn BlockOut[1:n] Disks OrderRead[1:n] Recording ReadMovie Supervision Processor P OrderRec P‘Concurrency=M 
SCORE : 15326


6- Valeur de A en fonction du débit 
SCORE : 15319


7- Espace de modélisation des systèmes 
SCORE : 15315


9- Structure interne d’un générateur 
SCORE : 15296


8- Représentation et spécification d’une opération 
SCORE : 15294


 Il est décrit dans le chapitre 5 
SCORE : 15274


8- Structure de données pour le modèle MCSE et le template VHDL 
SCORE : 15247


 Elle est aussi générique 
SCORE : 15239


 ALIAS LectureSequences is SequencesAccess(Nplus1 to DeuxN) 
SCORE : 15227


 ALIAS EnregistrementSequences is SequencesAccess(1 to n) 
SCORE : 15227


 La fonction Emission est multiple 
SCORE : 15216


3- Principaux concepts du modèle de performance 
SCORE : 15212


5 ci-après 
SCORE : 15201


5 ci-après 
SCORE : 15201


 } avec FindGenericParameterDeclaration :: { GenericParameterDeclatation:=Nil 
SCORE : 15168


 } avec FindAttributeValue :: { AttributeValue:=Attributes 
SCORE : 15168


 } avec AnalyzeInputOutputInterface :: { Vector:=0 
SCORE : 15168


 - ouvert vers le web 
SCORE : 15167


 - non-interprété 
SCORE : 15167


 Comme le montre la figure 8 
SCORE : 15151


 Comme le montre la figure 3 
SCORE : 15151


 Comme le montre la figure 3 
SCORE : 15151


Op2 Op[1:n] Simultanéité Parallélisme multiple Op1 Op2 OP: PROCESS  
SCORE : 15146


E 157 Set est une référence sur un ensemble 
SCORE : 15114


 Factor BinaryExpression ::= Expression Op Expression Op ::= "+"  
SCORE : 15098


 ">" LogicalExpression ::= "(" Condition LogicalOp Condition ")" LogicalOp ::= "AND"  
SCORE : 15098


 TaskBlocked ActiveAck ActiveAck Taskblocked Wait ActiveAck Blocked Wait InputTaskBlocked Wait InputActiveAck InputActiveAck InputInactiveReq InputInactiveAck InputInactiveAck PORT du type Rendez-Vous pour une concurrence DELAY (writeTime) Input/ActiveReq Rendez OutValue OutputInactiveAck End DELAY OutputInactiveReq Wait InactiveAck Wait ActiveAck End DELAY InactiveReq OutputInactiveAck Wait (ReadTime) DELAY d) NbUse < Concurrency NbUse++ 
SCORE : 15078


 (ActiveReq or TaskBlocked) and NbMess-- 
SCORE : 15065


state/=ExitNow) AND (message 
SCORE : 15041


 et donc coût 
SCORE : 15034


 et donc coût 
SCORE : 15034


 E1 E2 E1 E2 ET sans ordre L’un ^ OR & E1 E2 E1 E2 Le Générateur VHDL M 
SCORE : 15028


 temporelle Le modèle de performance de MCSE M 
SCORE : 15027


" "<Component>" "<EndComponent>" ":" Parameter "["l Indice Indice "]" "Generic" "(" ")" Parameters ListeParam ListeName k "," n 0:n 0:n StructureDef  
SCORE : 14980


 0:n Design File 0:n Le Générateur VHDL M 
SCORE : 14980


 0:n ConstantTime VarBranchNumber VarSeed OptionalProcess DeclarativePart OptionalSubProgram StatementPart OptionalBlock StatementPart OpStatusInit NoParseSeed InactiveTask TaskPriority WaitingTask Fork WaitFork InitConditionalActivation WaitConditionalActivation ResetConditionalActivation CaseStatement UniformCall IfStatement ForStatement LoopStatement Delay WaitJoin Join Send Receive WriteSharVar ReadSharVar SignalEv 0:n WaitEv Architec 
SCORE : 14980


 -- PROCEDURE send(information : IN DefInformation 
SCORE : 14976


Models> StructureDescription 1:n 1:1 *ComponentDescription ComponentInstance Declaration <EndStructure> RelationDeclarations " 
SCORE : 14972


4 donne le modèle de cette fonction 
SCORE : 14935


3 donne le modèle de cette fonction 
SCORE : 14935


14 du chapitre 3 
SCORE : 14934


2- Exemple de diagramme d’activités 
SCORE : 14912


 c’est l’objectif de la procédure InitConditionalActivation 
SCORE : 14908


 2014 / MCSE_2014 
SCORE : 14904


 2014 / MCSE_2014 
SCORE : 14904


 2014 / MCSE_2014 
SCORE : 14904


 2014 / MCSE_2014 
SCORE : 14904


 2014 / MCSE_2014 
SCORE : 14904


 2014 / MCSE_2014 
SCORE : 14904


 2014 / MCSE_2014 
SCORE : 14904


 2014 / MCSE_2014 
SCORE : 14904


 2014 / MCSE_2014 
SCORE : 14904


 2014 / MCSE_2014 
SCORE : 14904


 2014 / MCSE_2014 
SCORE : 14904


 2014 / MCSE_2014 
SCORE : 14904


 2014 / MCSE_2014 
SCORE : 14904


 2014 / MCSE_2014 
SCORE : 14904


 2014 / MCSE_2014 
SCORE : 14904


 2014 / MCSE_2014 
SCORE : 14904


 2014 / MCSE_2014 
SCORE : 14904


 2014 / MCSE_2014 
SCORE : 14904


 2014 / MCSE_2014 
SCORE : 14904


 2014 / MCSE_2014 
SCORE : 14904


 2014 / MCSE_2014 
SCORE : 14904


 2014 / MCSE_2014 
SCORE : 14904


) <Port> <EndRelation> 1:n TypedRelationDef ":" DefCmd *NameList ([1:k])Range Attributes " 
SCORE : 14900


 L’attribut ‘Concurrency de F est le plus spécifique 
SCORE : 14891


 -A- Analyse du parallélisme AnalyzeConcurrentActivity :: { LocalVisibility ParActivityList,Activity,NbTask 
SCORE : 14887


14- Exemple de modélisation sur RDD100 
SCORE : 14885


Description des entrées-sorties •4 
SCORE : 14858


8- Modèle hiérarchique pour le développement 
SCORE : 14846


8- Modèle hiérarchique pour le développement 
SCORE : 14846


 pour exprimer l’attente 
SCORE : 14845


FM M ÉTHODOLOGIE DE CONCEPTION DE SYSTÈMES ELECTRONIQUES R ÉSUMÉ COURS INDUSTRIALISATION DE SYSTÈMES PARTIE I DOMINIQUE RHÊME, HEIA-FR © Dominique Rhême, 2003-2014, EIA-FR, Fribourg MCSE HES-SO//HEIA-FR Page 2 / 22 Dominique 
SCORE : 14842


" 0:n GenericParameterDeclaration <GenericParameters> <EndGenericParameters> GenericParametersDeclaration "," "," "," 1:1 "FLOAT" "INTEGER" IntegerOrReal Comment Le Générateur VHDL M 
SCORE : 14799


 PROCEDURE receive( SIGNAL message : INOUT DefPortOut 
SCORE : 14793


E 155 La syntaxe est la suivante: RefDs 
SCORE : 14769


 M[1:n] & Fonction F2 V3 Ev Op0‘Time = 1 ms 
SCORE : 14762


) MCSE HES-SO//HEIA-FR Page 10 / 22 Dominique 
SCORE : 14747


 c’est le rôle de la procédure ResetConditionalActivation 
SCORE : 14688


 La syntaxe est la suivante: While( Condition : Règle) 
SCORE : 14667


 La syntaxe est la suivante: NewNode := CopyNode(SourceDs) 
SCORE : 14667


 La syntaxe est la suivante: NewDs := CopyDs(SourceDs) 
SCORE : 14667


 La syntaxe est la suivante: ImportOp NomRegle1,NomRegle2 
SCORE : 14667


 La syntaxe est la suivante: DelDs(RefDs) 
SCORE : 14667


 La syntaxe est la suivante: Configuration ExecutifETR 
SCORE : 14667


 La syntaxe est la suivante: AddLast(RefDs 
SCORE : 14667


 La syntaxe est la suivante: - VarValue := SizeOf( ListRef ) 
SCORE : 14667


 [5] MCSE HES-SO//HEIA-FR Page 20 / 22 Dominique 
SCORE : 14649


 A,INTEGER,"taille des fifo",4 
SCORE : 14647


" Actions 1:1 Expression Condition "=" 1:1 Expression "<>" "<" ">" "<=" ">=" MultExpression DivExpression CondExpression GuardedConditionList NextGuardedCondition ActivityInstance <ActivityInstance> Range Interface Name ":" Name "]" " 
SCORE : 14618


 Op Op‘Time= 10 ms 
SCORE : 14608


 CONSTANT A111Time : TIME := 10 ms 
SCORE : 14608


 La traduction VHDL (figure 4 
SCORE : 14600


 type_conversion  
SCORE : 14578


 type_conversion  
SCORE : 14578


9- Ecriture d’un modèle comportemental séquentiel 
SCORE : 14575


 Explicit concurrency of ND 
SCORE : 14571


 Pourquoi pas le mode d’emploi 
SCORE : 14524


protocol,1,now) 
SCORE : 14510


protocol,1,now) 
SCORE : 14510


protocol,1,now) 
SCORE : 14510


protocol,1,now) 
SCORE : 14510


 Disks‘Use = 20 ms 
SCORE : 14510


 ‘Débit=Uniform(0,15) Recoit Envoi k/SéquenceOut[]‘Débit ms 
SCORE : 14509


" RelationDescription Name Name 0:1 Attributes 0:n RelationDeclarations RelationInstance EvDescription <PortInstance> ou ":" Name *Range " 
SCORE : 14492


 send (InfSequenceOut, SequenceOut, NullTime, 0, now TRUE) 
SCORE : 14483


 send (InfFifoLec, FifoLecInputAccesses, NullTime, 0 now, FALSE) 
SCORE : 14483


 MCSE HES-SO//HEIA-FR Page 22 / 22 Dominique 
SCORE : 14476


 Les attributs ‘Size et ‘Speed de Cmd sont transmis par OrderRec ou OrderRead[] 
SCORE : 14467


 MCSE HES-SO//HEIA-FR Page 14 / 22 Dominique 
SCORE : 14458


 MCSE HES-SO//HEIA-FR Page 12 / 22 Dominique 
SCORE : 14411


protocol:=DefProtocol'(priority,date,ActiveReq) 
SCORE : 14389


protocol:=DefProtocol'(priority,date,ActiveReq) 
SCORE : 14389


 MCSE HES-SO//HEIA-FR Page 11 / 22 Dominique 
SCORE : 14352


 Lt : EveObject GENERIC MAP (NbUsersInput=>1,NbUsersOutput=>1, policy=>booleen,concurrency=>1, InitValueSema=>0,WriteTime=>NullTime, ReadTime=>NullTime) PORT MAP (InputAccesses(1)=>LtIn, OutputAccesses(1)=>LtOut) 
SCORE : 14279


 Cmd : EveObject GENERIC MAP (NbUsersInput=>1,NbUsersOutput=>1, policy=>booleen,concurrency=>1, InitValueSema=>0,WriteTime=>NullTime, ReadTime=>NullTime) PORT MAP (InputAccesses(1)=>CmdIn, OutputAccesses(1)=>CmdOut) 
SCORE : 14279


 BEGIN Stop : EveObject GENERIC MAP (NbUsersInput=>1,NbUsersOutput=>1, policy=>booleen,concurrency=>1, InitValueSema=>0,WriteTime=>NullTime, ReadTime=>NullTime) PORT MAP (InputAccesses(1)=>StopIn, OutputAccesses(1)=>StopOut) 
SCORE : 14279


ch / févr 
SCORE : 14249


ch / févr 
SCORE : 14249


ch / févr 
SCORE : 14249


ch / févr 
SCORE : 14249


ch / févr 
SCORE : 14249


ch / févr 
SCORE : 14249


ch / févr 
SCORE : 14249


ch / févr 
SCORE : 14249


ch / févr 
SCORE : 14249


ch / févr 
SCORE : 14249


ch / févr 
SCORE : 14249


ch / févr 
SCORE : 14249


ch / févr 
SCORE : 14249


ch / févr 
SCORE : 14249


ch / févr 
SCORE : 14249


ch / févr 
SCORE : 14249


ch / févr 
SCORE : 14249


ch / févr 
SCORE : 14249


ch / févr 
SCORE : 14249


ch / févr 
SCORE : 14249


ch / févr 
SCORE : 14249


ch / févr 
SCORE : 14249


 A1 est une activité raffinée 
SCORE : 14238


Size LOOP receive (FifoLecOutputAccesses, InfFifoLec,NullTime 0, now, FALSE) 
SCORE : 14216


 LOOP receive (CmdCanalLec, InfCmdCanalLec, NullTime, 0, now, FALSE) 
SCORE : 14216


 En maîtriser l’usage coûte cher  
SCORE : 14177


 •Un environnement CAE pour l’électronique : HDL-Designer de Mentor-Graphics 
SCORE : 14171


 MCSE HES-SO//HEIA-FR Page 13 / 22 Dominique 
SCORE : 14158


 Il y a par exemple les modules “Read Color”, “Set Color” ou “Comparator” 
SCORE : 14157


 MCSE HES-SO//HEIA-FR Page 18 / 22 Dominique 
SCORE : 14110


 C++) MCSE HES-SO//HEIA-FR Page 16 / 22 Dominique 
SCORE : 14109


93 Ko 18 
SCORE : 14070


16- Déroulement temporel 
SCORE : 14040


 Ce principe est à rapprocher Chapitre 6 180 M 
SCORE : 14036


 Ceci est décrit plus loin 
SCORE : 14003


 Un modèle seul n'est pas suffisant 
SCORE : 13985


 Le modèle est représenté dans la dernière colonne 
SCORE : 13953


 MCSE HES-SO//HEIA-FR Page 19 / 22 Dominique 
SCORE : 13896


 Le cas Else est optionnel 
SCORE : 13886


 La syntaxe est: SaveDs(RefDs, AccessFileName) 
SCORE : 13870


 string_literal  
SCORE : 13865


 literal_string  
SCORE : 13865


 Tprod‘Time=Uniform(1, 100) ms 
SCORE : 13825


 Op‘Kind = passive ou active 
SCORE : 13810


 C’est l’équivalent d’un record 
SCORE : 13805


 Op‘Time= expression mathématique 
SCORE : 13788


 - la disponibilité des outils 
SCORE : 13772


E Le modèle UVa est présenté dans [AYLOR-92] 
SCORE : 13750


 MCSE HES-SO//HEIA-FR Page 21 / 22 Dominique 
SCORE : 13734


 - générique et paramétrable 
SCORE : 13734


 MCSE HES-SO//HEIA-FR Page 17 / 22 Dominique 
SCORE : 13733


 send (InfFifoLec, FifoLecInputAccesses, NullTime, 0, no FALSE) 
SCORE : 13731


$CmdUsager[:]}* Tcons‘Time= Réception :: { 
SCORE : 13688


7 et simple à interpréter 
SCORE : 13679


 L’assignation est définie par IdName := Value 
SCORE : 13645


12- Exemples de modules de Délai 
SCORE : 13622


 WHEN 2 => Receive(RepCanal,rep,state) 
SCORE : 13598


 GenerateFromNoOrderElementsVector Pas implanté pour l’instant 
SCORE : 13589


 CONSTANT TconsTime : TIME := 10 us 
SCORE : 13573


 ARCHITECTURE behavioral OF Processor IS BEGIN Scheduling : PROCESS Chapitre 4 94 M 
SCORE : 13476


 Pour illustrer le modèle, la figure 2 
SCORE : 13456


E probabilité et la sélection 
SCORE : 13444


Id, me, NullTime now, FALSE) 
SCORE : 13395


 expr / expr  
SCORE : 13376


 expr - expr  
SCORE : 13376


 expr * expr  
SCORE : 13376


E 17 ETUDES DE CAS 18 M 
SCORE : 13367


E 17 ETUDES DE CAS 18 M 
SCORE : 13367


 Il y a enfin les modules Délais (4) 
SCORE : 13275


 - multi-thread 
SCORE : 13217


 L’implantation est immédiate 
SCORE : 13029


 BEGIN -- procedure concurrente ReleaseSignaldriver(TaskStateVector(1)=>A1State, TaskStateVector(2)=>A11State) 
SCORE : 12869


 A2‘Time = 5 ms minimum 
SCORE : 12512


 La Méthodologie favorise cette réduction 
SCORE : 12505


 La Méthodologie favorise cette réduction 
SCORE : 12505


power/=0 
SCORE : 12451


power/=0 
SCORE : 12451


 TYPE DefDirection IS (read,write) 
SCORE : 12407


 "/" factor ::= Integer  
SCORE : 12339


2 Ko 63 s 660 Ko 23 s VhdlSyn 194 Ko 6 
SCORE : 12330


 •Qui en seront les lecteurs  
SCORE : 12308


E 167 - facile à documenter et à maintenir 
SCORE : 12203


5e+06 5e+06 5 
SCORE : 12168


 Vector VariableVector int nbWaring boolean debugFlag,historyFlag Properties generatorConfiguration  
SCORE : 12072


20- Exemple de chronogrammes 
SCORE : 12049


 Opdépot‘Time = 500 us 
SCORE : 11929


 OpRetrait‘Time = 500 us 
SCORE : 11929


 OpRetrait`Time = 500 us 
SCORE : 11929


 OpDepot`Time = 500 us 
SCORE : 11929


 CONSTANT OpdepotTime : TIME := 500 us 
SCORE : 11929


 CONSTANT OpRetraitTime : TIME := 500 us 
SCORE : 11929


 - la lisibilité et la compréhensibilité 
SCORE : 11764


 Case(GenericParameterDeclatation=Nil : Error('Generic Parameter '&ParameterName&' not defined') 
SCORE : 11742


 Case(GenericParameterDeclatation=Nil : Error('Generic Parameter '&ParameterName&' not defined') 
SCORE : 11742


$Token[:]}* Path= (Me+1) mod K 
SCORE : 11657


 qualified_expression  
SCORE : 11642


 qualified_expression  
SCORE : 11642


 - interprété et portable 
SCORE : 11593


5- Structure traditionnelle d’un compilateur 
SCORE : 11225


 ELSIF ((highestWaitingFunction/=0) AND (lowestActiveFunction/=0) AND (StateVector(lowestActiveFunction) 
SCORE : 11208


28 Ko 28 
SCORE : 11200


 Op‘Time = exp (10) s 
SCORE : 11199


 Cmd`Size = UniformInt(50,120) 
SCORE : 11034


 [5] DFT, notes du cours Electronique-Systèmes, EIA-FR/Rhm 
SCORE : 10986


 [3] VHDL, notes du cours Electronique-Systèmes, EIF/Rhm 
SCORE : 10986


 ARCHITECTURE behavioral OF X IS FOR all : PortObject USE ENTITY Library 
SCORE : 10966


 ARCHITECTURE behavioral OF Serveur IS FOR all : PortObject USE ENTITY Library 
SCORE : 10966


 D’où la déclaration: Var : [ Value  
SCORE : 10846


 D’où la déclaration: Const [ Number  
SCORE : 10846


 NumDisk=(NumDisk+1) mod P NumDisk=(NumDisk+1) mod P OpRetrait *A OpDem‘Time = 0 
SCORE : 10828


5e+06 2e+06 2 
SCORE : 10625


 function_call  
SCORE : 10569


 function_call  
SCORE : 10569


 ELSE cpt := cpt - 1 
SCORE : 10560


" 1:1 IncludeActivity OptAttributes Definition ActivityDescription InternalRelationsList ActivityUnitList Condition Chapitre 6 194 M 
SCORE : 10548


 V3‘Read =20 ms 
SCORE : 10377


E 83 - macroscopique 
SCORE : 10358


E BlocIn`Read=(262136/OrderRec[]`Speed) * 1 ms 
SCORE : 10346


 <Attributes> Tcons`Time=(262136/BlockOut[]`Speed) * 1 ms 
SCORE : 10346


 Chaque attente est signalée par ActiveReq 
SCORE : 10272


 slice_name  
SCORE : 10223


 selected_name  
SCORE : 10157


E 81 WaitEnd`Time = 30 sec 
SCORE : 9984


 Elle n’était pas portable 
SCORE : 9974


7 Ko 111 s 669 Ko 83 s VhdlPerf 176 Ko 5 
SCORE : 9970


 La divergence ET est un Fork, la convergence ET est un Join 
SCORE : 9921


 findModel findRelationElement getAttributes getLibraryPath hierarchyName includeComponent relationLinks unLinkInstance MetaGen m_generator watchDialog m_watchDialog String fileName String findText int findIndex  
SCORE : 9732


 P_send‘Size = (L_Req‘Size + 64) bits 
SCORE : 9647


 T_Req‘Size = Uniform(5, 160) bits 
SCORE : 9627


 La valeur neutre est 1 
SCORE : 9551


 Un déassembleur est livré en standard dans le JDK 
SCORE : 9382


5e+06 6e+06 6 
SCORE : 9342


 6e+06 7e+06 8e+06 9e+06 1e+07 1 
SCORE : 9231


 indexed_name  
SCORE : 9123


 <Attributes> V‘Read = 100 ns 
SCORE : 8699


 - simple et familier 
SCORE : 8649


 operator_symbol  
SCORE : 8402


 Dunod, 2002 [7] Make or buy  
SCORE : 8352


E ou importé d’une librairie (ComponentInclude) 
SCORE : 8064


 avec Unit ::=ms  
SCORE : 7995


 enumeration_literal  
SCORE : 7943


 Mais, le langage VHDL pour la Chapitre 4 86 M 
SCORE : 7907


E 165 La figure 5 
SCORE : 7846


E 203 du block Lecture 
SCORE : 7800


E 115 La figure 4 
SCORE : 7797


E du système 
SCORE : 7738


E La figure 7 
SCORE : 7735


E La figure 5 
SCORE : 7735


 Sur la figure 7 
SCORE : 7735


 Sur la figure 7 
SCORE : 7735


 Sur la figure 4 
SCORE : 7735


 Sur la figure 3 
SCORE : 7735


 Sur la figure 2 
SCORE : 7735


 Le figure 2 
SCORE : 7735


 La figure 7 
SCORE : 7735


 La figure 7 
SCORE : 7735


 La figure 6 
SCORE : 7735


 La figure 6 
SCORE : 7735


 La figure 5 
SCORE : 7735


 La figure 5 
SCORE : 7735


 La figure 4 
SCORE : 7735


 La figure 4 
SCORE : 7735


 La figure 4 
SCORE : 7735


 La figure 4 
SCORE : 7735


 La figure 4 
SCORE : 7735


 La figure 4 
SCORE : 7735


 La figure 4 
SCORE : 7735


 La figure 4 
SCORE : 7735


 La figure 4 
SCORE : 7735


 La figure 3 
SCORE : 7735


 La figure 3 
SCORE : 7735


 La figure 3 
SCORE : 7735


 La figure 3 
SCORE : 7735


 La figure 3 
SCORE : 7735


 La figure 3 
SCORE : 7735


 La figure 3 
SCORE : 7735


 La figure 3 
SCORE : 7735


 La figure 3 
SCORE : 7735


 La figure 2 
SCORE : 7735


 La figure 2 
SCORE : 7735


 La figure 2 
SCORE : 7735


 La figure 2 
SCORE : 7735


 La figure 1 
SCORE : 7735


 La figure 1 
SCORE : 7735


 La Sélection (figure 4 
SCORE : 7735


3- Raffinement de la fonction Génération 
SCORE : 7733


 -- Instanciation d’une fonction MultipleX : BLOCK PORT (X : X DefPortInVector(1 TO N)) 
SCORE : 7733


 Il peut Le Méta-Générateur MetaGen M 
SCORE : 7730


Req) Texte Structure de données Le Générateur VHDL M 
SCORE : 7728


 / ActiveReq Wait OutAccess end Waiting Waiting NbUse:=0 
SCORE : 7722


state=ExitNow) THEN Transcription du modèle de performance en VHDL M 
SCORE : 7720


Lt&Op3) A111 Le modèle de performance de MCSE M 
SCORE : 7720


E2&Op2] Op1 Op2 Op1 Op2 Attente Conditionnelle Le modèle de performance de MCSE M 
SCORE : 7720


E2&A2] ConditionalActivation Transcription du modèle de performance en VHDL M 
SCORE : 7720


 ‘Use Transcription du modèle de performance en VHDL M 
SCORE : 7720


 Transcription du modèle de performance en VHDL M 
SCORE : 7720


 Transcription du modèle de performance en VHDL M 
SCORE : 7720


 Transcription du modèle de performance en VHDL M 
SCORE : 7720


 Transcription du modèle de performance en VHDL M 
SCORE : 7720


 Transcription du modèle de performance en VHDL M 
SCORE : 7720


 Transcription du modèle de performance en VHDL M 
SCORE : 7720


 Le modèle de performance de MCSE M 
SCORE : 7720


 Le modèle de performance de MCSE M 
SCORE : 7720


 Le modèle de performance de MCSE M 
SCORE : 7720


 Le modèle de performance de MCSE M 
SCORE : 7720


 Le modèle de performance de MCSE M 
SCORE : 7720


 Le modèle de performance de MCSE M 
SCORE : 7720


 Le modèle de performance de MCSE M 
SCORE : 7720


 Le modèle de performance de MCSE M 
SCORE : 7720


 Le modèle de performance de MCSE M 
SCORE : 7720


 Le modèle de performance de MCSE M 
SCORE : 7720


 Le Transcription du modèle de performance en VHDL M 
SCORE : 7720


 Disque[] DemD[]‘Op=read RepD[] OR Transcription du modèle de performance en VHDL M 
SCORE : 7720


 - le niveau Spécification 
SCORE : 7719


 - le niveau Spécification 
SCORE : 7719


 [4] Spécification et conception des ASIC 
SCORE : 7711


 BESOIN PRODUIT SPECIFICATION CONCEPTION FONCTIONNELLE DEFINITION REALISATION MATERIELLE LOGICIELLE RECETTE CERTIFICATION TEST VALIDATION INTEGRATION REALISATION MATERIELLE REALISATION LOGICIELLE DE LA VERIFICATION TEST Spécification conception Validation Réalisation CONFORMITE VALIDATION PARTIE PARTIE 1 - PRESENTATION GENERALE DE LA METHODOLOGIE M 
SCORE : 7711


 BESOIN PRODUIT SPECIFICATION CONCEPTION FONCTIONNELLE DEFINITION REALISATION MATERIELLE LOGICIELLE RECETTE CERTIFICATION TEST VALIDATION INTEGRATION REALISATION MATERIELLE REALISATION LOGICIELLE DE LA VERIFICATION TEST Spécification conception Validation Réalisation CONFORMITE VALIDATION PARTIE PARTIE 1 - PRESENTATION GENERALE DE LA METHODOLOGIE M 
SCORE : 7711


 Il y a par exemple les “Source”, les “Sink”, les “Switch” ou les "Junction" 
SCORE : 7708


* 1 watchDialog findReplaceDialog attentionDialog 1 1 1 Thread exeThread getVariableOf getListVariable getWatchTree HashTable constantTable,variableTable, configurationTable,ruleTable Interface Utilisateur Méta-générateur Le Méta-Générateur MetaGen M 
SCORE : 7707


 -- Instanciation des fonctions MultipleEmission : BLOCK PORT (Cmd : OUT DefPortInVector(1 TO n)) 
SCORE : 7706


 /*Choix entre IN, OUT, INOUT*/ END X 
SCORE : 7702


 Variables VarName AssignOp IdName ElementaryOp Arg2 Value du type IdName VarName Champ1 ChampN Champ1 VarName Arg1 Exemple: Tmp 
SCORE : 7700


6- Démarche pour la réalisation 
SCORE : 7699


6- Démarche pour la réalisation 
SCORE : 7699


 C’est le cas pour ComponentDef 
SCORE : 7698


E transcription 
SCORE : 7690


state<=waiting 
SCORE : 7680


 Case (RangeExpression # Null : /* Null si Range=[] */ Vector:=1 
SCORE : 7666


Op2 Op[1:n] <0 
SCORE : 7663


$Pt[:] S1 Pt(1:n) OR S2 Alternative Sélection Op& 
SCORE : 7663


$Pt[:] Pt[1:n] Op Op& 
SCORE : 7663


" Req RepeatedActivity "*" Interface Activity1 Activity1Model ActivityInstance SeqActivity 1:n ActivitySequence SeqActivityList "&" Actions Op1 SeqActivity "&" " 
SCORE : 7663


" Attributes (Nil) Range ComponentInstance Attributes MCSEModelDescription (Nil) Emission <Component> ComponentDescription <EndComponent> Interface Attributes ([1:n]) Range (’Id, ‘Size, ‘Time) (Out Mess Cmd[]: 
SCORE : 7663


" Ack Proc SeqActivity 1:n ActivitySequence SeqActivityList "&" Actions Op0 SeqActivity "&" " 
SCORE : 7663


 Routing OR * Tdmux ‘Id=Uniform(1:n) 
SCORE : 7663


 Out Mess BlockOut[1:n] : DefBlockOut 
SCORE : 7663


 <Port> [1:n] OrderRead : DefOrderRead 
SCORE : 7663


 <EndComponent> <Component> [1:n] Lecture (In Var Sequences : DefSequences 
SCORE : 7663


 <EndBehavior> <EndComponent> <EndStructure> <EndComponent> Emission[1:n] Cmd[] * ‘Id=me‘Index 
SCORE : 7663


 <EndBehavior> <EndComponent> <Component> [1:n] TVset (In Mess BlockOut[]:DefBlockOut 
SCORE : 7663


 <EndBehavior> <EndComponent> <Component> [1:n] ReadMovie (In Mess OrderRead[]:DefOrderRead 
SCORE : 7663


 <EndAttributes> <Port> [1:n] BlockOut : DefBlockOut 
SCORE : 7663


 <EndAttributes> <Component> [1:n] User (Out Mess Cmd : DefCmd 
SCORE : 7663


 <Component> [1:n] Lecture (In Mess CmdCanalLec[] : DefCmdCanalLec 
SCORE : 7663


 <Component> [1:n] Enregistrement (InOut Var Sequences : DefSequences 
SCORE : 7663


 <Component> [1:n] Emission (Out Mess Cmd[] : DefCmd 
SCORE : 7663


status=ActiveAck) OR (message 
SCORE : 7653


state=ExitNow) OR (message 
SCORE : 7653


 message<=TmpPortAccess 
SCORE : 7653


 message<=TmpPortAccess 
SCORE : 7653


 message<=TmpPortAccess 
SCORE : 7653


 message<=TmpPortAccess 
SCORE : 7653


 message<=TmpPortAccess 
SCORE : 7653


 message 
SCORE : 7653


 WAIT UNTIL message 
SCORE : 7653


 WAIT UNTIL message 
SCORE : 7653


 WAIT UNTIL message 
SCORE : 7653


 WAIT UNTIL message 
SCORE : 7653


 WAIT UNTIL (message 
SCORE : 7653


 WAIT UNTIL (message 
SCORE : 7653


 WAIT UNTIL (message 
SCORE : 7653


 WAIT UNTIL (message 
SCORE : 7653


 SIGNAL message : INOUT DefPortIn 
SCORE : 7653


 SIGNAL message : INOUT DefDemDVectorOfPortInVector 
SCORE : 7653


 IF (message 
SCORE : 7653


 IF (message 
SCORE : 7653


 IF ((message 
SCORE : 7653


 IF ((message 
SCORE : 7653


 ELSE message 
SCORE : 7653


block 
SCORE : 7645


state=Waiting) THEN -- attente du C 
SCORE : 7642


 -- attente du C 
SCORE : 7642


) d’un modèle source MCSE 
SCORE : 7638


 source : IN NATURAL 
SCORE : 7638


 source : BLOCK PORT (Stop : INOUT DefSignalIn) 
SCORE : 7638


 END BLOCK source 
SCORE : 7638


 END BLOCK source 
SCORE : 7638


E 137 ComponentDescription ::= <Component> [Range] Name [GenericParameters] Parameters " 
SCORE : 7634


 Un méta-modèle est un modèle de modèle 
SCORE : 7618


 Pour une tâche Chapitre 2 46 M 
SCORE : 7598


Caractéristique de l'environnement •3 
SCORE : 7595


E d’un composant 
SCORE : 7585


Présentation du problème •2 
SCORE : 7579


 LocalVisibility::=LocalVisibility name {, name} 
SCORE : 7572


information 
SCORE : 7569


information 
SCORE : 7569


 information : OUT DefInformation 
SCORE : 7569


 TYPE DefUPortOut IS RECORD information : DefInformation 
SCORE : 7569


 TYPE DefUPortIn IS RECORD information : DefInformation 
SCORE : 7569


 ou bien DelDs(SourceDs 
SCORE : 7557


 PropReady := InputActiveReq or InputTaskBlocked 
SCORE : 7550


} "}" LocalVisibility ::= "LocalVisibility" VarName {"," VarName} " 
SCORE : 7549


FieldName} Value ::= "Nil"  
SCORE : 7549


"} VarType ::= "Value"  
SCORE : 7549


"} ConstValue ::= Integer  
SCORE : 7549


"} ")" ComponentDef ::= StructureDef  
SCORE : 7549


" While ::= "While(" Condition ":" OpDef 
SCORE : 7549


" Warning ::= "Warning(" StringDef ") 
SCORE : 7549


" UnLinkInstance ::= "UnLinkInstance(" IdName ") 
SCORE : 7549


" SetOp ::= "ForEach(" VarName ":" OpDef 
SCORE : 7549


" SaveOp ::= "SaveDs(" IdName "," StringDef ") 
SCORE : 7549


" ResetVariable ::= "ResetVariable(" VarName ") 
SCORE : 7549


" RelationLinks ::= "RelationsLinks(" IdName ") 
SCORE : 7549


" PopOp ::= "Pop(" VarName ") 
SCORE : 7549


" OpDef ::= OpName  
SCORE : 7549


" Importation ::= "ImportOp" RuleName {"," RuleName} " 
SCORE : 7549


" IdName ::= VarName { 
SCORE : 7549


" GetAttributes ::= "GetAttributes(" Idname "," VarName ") 
SCORE : 7549


" ExecOp ::= "Exec(" String ") 
SCORE : 7549


" Error ::= "Error(" StringDef ") 
SCORE : 7549


" DelNode ::= "DelNode(" IdName ") 
SCORE : 7549


" Constants ::= "Constants" ConstName ":" ConstValue " 
SCORE : 7549


" Condition ::= IdName ComparisonOp  
SCORE : 7549


" CaseOp ::= "Case(" Condition ":" OpDef 
SCORE : 7549


" AssignOp ::= IdName ":=" Value " 
SCORE : 7549


" AddLast ::= "AddLast(" IdName "," DataStructure ") 
SCORE : 7549


" AddFirst ::= "AddFirst(" IdName "," DataStructure ") 
SCORE : 7549


" AddAfter ::= "AddAfter(" IdName "," DataStructure ") 
SCORE : 7549


 String Variables ::= "Variables" VarName ":" VarType " 
SCORE : 7549


 Record n AB Y ::= A  
SCORE : 7549


 LogicalExpression ComparisonOp ::= "="  
SCORE : 7549


 Expression StringDef ::= "LabelOf(" IdName ")"  
SCORE : 7549


 Display ::= "Display(" StringDef ") 
SCORE : 7549


 - Y ::= A  
SCORE : 7549


 "XOR" PushOp ::= "Push(" VarName ") 
SCORE : 7549


 "ReplaceCharAt(" StringDef "," Expression "," StringDef ")" DataStructure ::= IdName  
SCORE : 7549


 "LengthOf(" IdName ")" DelDs ::= "DelDs(" IdName ") 
SCORE : 7549


 "FindActivityDescription(" IdName ")" Expression ::= BinaryExpression  
SCORE : 7549


 (interfaces 
SCORE : 7547


 VarTemplateDs := LoadDs(’template’, VhdlGrammar,1) 
SCORE : 7519


 • Modèle graphique 
SCORE : 7513


10- Opération LoadDs 
SCORE : 7509


10 
SCORE : 7509


10 
SCORE : 7509


10 
SCORE : 7509


 Chapitre 1 10 M 
SCORE : 7509


" *GuardedCondition "&" Activity 0:n Activity "><" ActivityName NestedActivity "(" *ActivityDef ")" Behavior " 
SCORE : 7490


 SignalOpStatus SignalProtocolVector SignalStates SignalStatesMonitoring SignalNbActiveTask SignalProcessorRate OptionalBlock DeclarativePart 0:n Scheduler StatesMonitor RateMonitor ProtocolVector GenericProcess Process Statem 
SCORE : 7490


 0:n OptionalBlock StatementPart MultipleBlock Generate Statem 
SCORE : 7490


 Séquence Simultanéité Parallélisme multiple Alternative Répétition & & Op Op1&Op2 Op1 
SCORE : 7483


" ElementName "(" ElementName 1:1 OutputChoiceList ")" InputElementNameList Name ElementName Range Chapitre 6 196 M 
SCORE : 7451


Stop# Op2 Op3 Stop A1 A11 A11 :: (A111& 
SCORE : 7445


Req&{Activity1}* Activity1 :: ( 
SCORE : 7445


 } Load :: { VarMcseDs :=LoadDs(’McseDescription’, McseGrammar,0) 
SCORE : 7445


 } DeleteMultipleBlock :: { Tmp2:=Tmp1Ds 
SCORE : 7445


 } CreateRelations :: { VarMcseDs:=McseDs 
SCORE : 7445


 } CreateEntity :: { OutputDs:=CopyDs(TemplateDs) 
SCORE : 7445


 } CreateBlocks :: { VarMcseDS:=McseDs 
SCORE : 7445


 } CreateBlock :: { Tmp1Ds:=copyDs(VarTemplateDs) 
SCORE : 7445


 Usagers :: Envoi  
SCORE : 7445


 TokenManagement :: {[ 
SCORE : 7445


 Routing :: { 
SCORE : 7445


 RepCanal[] Commande :: (<Proba>OpEnr& 
SCORE : 7445


 Recoit :: { 
SCORE : 7445


 ReceptionMess :: { 
SCORE : 7445


 Operations VHDLGenerate :: { Load 
SCORE : 7445


 Lire :: ({ 
SCORE : 7445


 Lecture :: { 
SCORE : 7445


 F :: Op0& 
SCORE : 7445


 Envoi :: {Tcu& 
SCORE : 7445


 Enregistre :: ({ 
SCORE : 7445


 EmissionMess :: { 
SCORE : 7445


 Emission :: {Tprod& 
SCORE : 7445


 Dmux :: { 
SCORE : 7445


 Cons :: { 
SCORE : 7445


 CmdUsager[] SupervisionUsager :: {[( 
SCORE : 7445


 CmdCanalEnr[] Enregistrement :: { 
SCORE : 7445


 AnalyzeInputOutputName :: { TmpType:=TypeOf(ElementName 
SCORE : 7445


 AnalyzeGenericParameters :: { GenericParameterDeclatationList:=McseDs 
SCORE : 7445


 AnalyzeComponentModelOrInstance :: { LocalVisibility NbTask 
SCORE : 7445


 AnalyzeActivityName :: { ElementName:=Activity 
SCORE : 7445


 & Op1 Lt:DefLt Cmd A1 :: A11/ 
SCORE : 7445


) et la sélection ($) 
SCORE : 7435


protocol) 
SCORE : 7434


protocol) 
SCORE : 7434


protocol) 
SCORE : 7434


protocol) 
SCORE : 7434


protocol 
SCORE : 7434


protocol 
SCORE : 7434


protocol 
SCORE : 7434


protocol 
SCORE : 7434


protocol 
SCORE : 7434


protocol 
SCORE : 7434


protocol 
SCORE : 7434


protocol 
SCORE : 7434


protocol 
SCORE : 7434


protocol 
SCORE : 7434


protocol 
SCORE : 7434


protocol 
SCORE : 7434


protocol 
SCORE : 7434


protocol 
SCORE : 7434


protocol 
SCORE : 7434


protocol 
SCORE : 7434


protocol 
SCORE : 7434


protocol 
SCORE : 7434


protocol 
SCORE : 7434


protocol 
SCORE : 7434


protocol 
SCORE : 7434


protocol 
SCORE : 7434


protocol 
SCORE : 7434


protocol 
SCORE : 7434


protocol 
SCORE : 7434


protocol 
SCORE : 7434


protocol 
SCORE : 7434


protocol 
SCORE : 7434


protocol 
SCORE : 7434


 protocol : DefProtocol 
SCORE : 7434


 protocol : DefProtocol 
SCORE : 7434


 protocol : DefProtocol 
SCORE : 7434


 PROCEDURE InitConditionalActivation(SIGNAL protocol : INOUT DefProtocol 
SCORE : 7434


 Dans le projet TOSCA [ANTONIA 
SCORE : 7428


 •C’est un document  
SCORE : 7412


 •C’est un document 
SCORE : 7412


20 
SCORE : 7411


20 
SCORE : 7411


15-b) 
SCORE : 7410


15- Opération AddLast 
SCORE : 7410


15 Mbits/s 
SCORE : 7410


15 0 
SCORE : 7410


15 0 
SCORE : 7410


15 0 
SCORE : 7410


15 
SCORE : 7410


 send(CmdUser,OrderRec,SupervisionState) 
SCORE : 7407


 send(CmdUser,OrderRead,CmdUser 
SCORE : 7407


 send (InfRepCanal, RepCanal, InfRepCanal 
SCORE : 7407


 END send 
SCORE : 7407


 END send 
SCORE : 7407


 McseModel McseDs McseModel MCSEGrammarDs + Table des symboles Affichage Selection Load Save Edit Chapitre 5 144 M 
SCORE : 7397


state<=NoDriver 
SCORE : 7388


state/=Waiting) THEN TmpTaskState:=TaskState 
SCORE : 7388


state/=ExitNow)) THEN IF (TaskState 
SCORE : 7388


state/=ExitNow)) THEN --IF NOT(RendezVous) THEN BlockingTask(TaskState) 
SCORE : 7388


state/=ExitNow)) THEN --BlockingTask(TaskState) 
SCORE : 7388


state/=ExitNow)) THEN --BlockingTask(TaskState) 
SCORE : 7388


state/=ExitNow) THEN TmpPortAccess 
SCORE : 7388


state/=ExitNow) LOOP TaskBlocking:=TRUE 
SCORE : 7388


state/=Blocked)) THEN BlockingTask(TaskState) 
SCORE : 7388


state/=Active) FOR RemainTime 
SCORE : 7388


state/=Active) FOR RemainTime 
SCORE : 7388


state/=Active) AND (TaskState 
SCORE : 7388


 WaitConditionalActivation(ProtocolVector, BranchNumber, state) 
SCORE : 7388


 WaitConditionalActivation(ProtocolVector, BranchNumber, state) 
SCORE : 7388


 WHEN 2 => WaitEv(E2,state) 
SCORE : 7388


 TYPE DefUState IS RECORD state : DefUTaskState 
SCORE : 7388


 TYPE DefUState IS RECORD state : DefTaskState 
SCORE : 7388


 CASE BranchNumber IS WHEN 1 => WaitEv(E1,state) 
SCORE : 7388


 M[]‘Read =1000 ms 
SCORE : 7376


 CONSTANT Op1Time : TIME :=1 ms 
SCORE : 7372


 WaitUser`Time = UniformTime(1000,5000,ms) 
SCORE : 7368


 InstantiationPortDemD : FOR i IN 1 TO P generate PortDemD : PortObject GENERIC MAP (NbUsersInput=>DeuxN,NbUsersOutput=>1,  
SCORE : 7367


 BEGIN MultipleInstanciation: FOR i IN 1 TO n generate User : BLOCK PORT (Cmd : INOUT DefPortIn) 
SCORE : 7367


 BEGIN MultipleInstanciation: FOR i IN 1 TO n generate TV : BLOCK PORT (BlockOut : INOUT DefPortOut) 
SCORE : 7367


 BEGIN MultipleInstanciation: FOR i IN 1 TO n generate Lecture : BLOCK PORT (Sequences : INOUT DefDataAccess 
SCORE : 7367


 BEGIN MultipleInstanciation: FOR i IN 1 TO n generate Lecture : BLOCK PORT (DemD : INOUT DefDemDVectorOfPortInVector(1 TO P) 
SCORE : 7367


 BEGIN MultipleInstanciation: FOR i IN 1 TO n generate Enregistrement : BLOCK PORT (Sequences : INOUT DefDataAccess 
SCORE : 7367


 BEGIN MultipleInstanciation: FOR i IN 1 TO n generate Enregistrement : BLOCK PORT (DemD : INOUT DefDemDVectorOfPortInVector(1 TO P) 
SCORE : 7367


 BEGIN MultipleInstanciation: FOR i IN 1 TO P generate Disques : BLOCK PORT (DemD : INOUT DefPortOut 
SCORE : 7367


" dans la construction "IF 
SCORE : 7364


" dans la construction "IF 
SCORE : 7364


 GenerateInfiniteLoop Génération de la construction "LOOP 
SCORE : 7364


 La MCSEGrammarDs et la table Chapitre 5 142 M 
SCORE : 7347


E 143 les classes MCSEGrammarDs et MCSE-Parser 
SCORE : 7333


 DataNode: String GrammarDs SourceDs:Ds Toto SubDs RefDs:Ds Descript Range = nil Name SourceDs 
SCORE : 7333


 DataNode: String GrammarDs SourceDs:Ds Toto Set Range = nil Name Name Name Father Father NextFriend Nil VarDs:Ds AddLast(SourceDs 
SCORE : 7333


2- Enchaînement des étapes pour MCSE 
SCORE : 7324


2- Enchaînement des étapes pour MCSE 
SCORE : 7324


 Babonneau) et l’équipe de J 
SCORE : 7323


 Babonneau) et l’équipe de J 
SCORE : 7323


 WHILE NOT(activation) AND (TaskState 
SCORE : 7291


 VARIABLE activation,TaskBlocking : BOOLEAN := FALSE 
SCORE : 7291


 IF activation THEN BranchNumber:=i 
SCORE : 7291


 IF NOT(activation) THEN IF (TaskBlocking AND (TaskState 
SCORE : 7291


 Le symbole  
SCORE : 7287


 Le symbole  
SCORE : 7287


E 95 4 
SCORE : 7272


-95] 
SCORE : 7272


 au besoin 
SCORE : 7239


E HES-SO//HEIA-FR Page 1 / 22 Dominique 
SCORE : 7238


22 
SCORE : 7238


) MCSE HES-SO//HEIA-FR Page 9 / 22 Dominique 
SCORE : 7238


 MCSE HES-SO//HEIA-FR Page 8 / 22 Dominique 
SCORE : 7238


 MCSE HES-SO//HEIA-FR Page 7 / 22 Dominique 
SCORE : 7238


 MCSE HES-SO//HEIA-FR Page 6 / 22 Dominique 
SCORE : 7238


 MCSE HES-SO//HEIA-FR Page 5 / 22 Dominique 
SCORE : 7238


 MCSE HES-SO//HEIA-FR Page 4 / 22 Dominique 
SCORE : 7238


 MCSE HES-SO//HEIA-FR Page 3 / 22 Dominique 
SCORE : 7238


 <Port> [1:k] Cmd : DefCmd 
SCORE : 7237


 <Component> [1:k] F1 Generic n, k ( E 
SCORE : 7237


--procedure blocante 
SCORE : 7231


 date : TIME 
SCORE : 7224


 date : TIME 
SCORE : 7224


 date : IN TIME) IS VARIABLE TmpPortAccess : DefUPortIn 
SCORE : 7224


 date : IN TIME 
SCORE : 7224


 date : IN TIME 
SCORE : 7224


 date : IN TIME 
SCORE : 7224


25 0 
SCORE : 7221


25 0 
SCORE : 7221


25 0 
SCORE : 7221


25 0 
SCORE : 7221


14-c) 
SCORE : 7220


14-a) 
SCORE : 7220


14- Opération ModifField 
SCORE : 7220


14 
SCORE : 7220


status<=InactiveAck 
SCORE : 7216


status<=InactiveAck 
SCORE : 7216


status<=InactiveAck 
SCORE : 7216


status/=ActiveAck)) THEN TmpPortAccess 
SCORE : 7216


 status : DefHandshake 
SCORE : 7216


 status : DefHandshake 
SCORE : 7216


E 93 PROCEDURE Delay( CONSTANT WaitTime : IN TIME 
SCORE : 7198


12-b) 
SCORE : 7173


12- Opération CopyNode 
SCORE : 7173


12 0 
SCORE : 7173


12 
SCORE : 7173


 Chapitre 1 12 M 
SCORE : 7173


priority< StateVector(highestWaitingFunction) 
SCORE : 7165


 priority : NATURAL 
SCORE : 7165


 priority : NATURAL 
SCORE : 7165


 priority : IN NATURAL 
SCORE : 7165


 priority : IN NATURAL 
SCORE : 7165


 priority : IN NATURAL 
SCORE : 7165


 priority : IN NATURAL 
SCORE : 7165


 priority : IN INTEGER 
SCORE : 7165


 TYPE DefProtocol IS RECORD priority : NATURAL 
SCORE : 7165


 TYPE DefProtocol IS RECORD priority : NATURAL 
SCORE : 7165


) [MULLER-96] 
SCORE : 7150


 Hudson [HUDSON-96] 
SCORE : 7150


 BEGIN Chapitre 4 96 M 
SCORE : 7150


 END receive 
SCORE : 7140


 BEGIN LOOP receive(Cmd,CmdUser,SupervisionState) 
SCORE : 7140


 - plein de vitalité 
SCORE : 7122


E 11 -Figure 1 
SCORE : 7114


E 11 -Figure 1 
SCORE : 7114


11- Opération CopyDs 
SCORE : 7114


11 0 
SCORE : 7114


11 
SCORE : 7114


11 
SCORE : 7114


11 
SCORE : 7114


11 
SCORE : 7114


Lind}* Trecept ‘Write= 0 ms 
SCORE : 7099


E A1‘Time = 5 ms 
SCORE : 7099


5 ms 
SCORE : 7099


5 ms 
SCORE : 7099


5 ms 
SCORE : 7099


5 ms 
SCORE : 7099


5 ms 
SCORE : 7099


5 ms 
SCORE : 7099


5 ms 
SCORE : 7099


5 ms 
SCORE : 7099


5 Mbits/s, TaccDiskMoy=30 ms et TailleFragment=32767x8 
SCORE : 7099


1 ms 
SCORE : 7099


1 ms 
SCORE : 7099


$CmdCanalLec[:]) OpLec‘Time = 1 ms 
SCORE : 7099


 ‘Write = 0,5 ms ‘Capacity = A+1 
SCORE : 7099


 `Write=1 ms 
SCORE : 7099


 `Use=20 ms 
SCORE : 7099


 `Read=1 ms 
SCORE : 7099


 T_Req‘Write = (K + 0,5 x T_Req‘Size) ms 
SCORE : 7099


 OpWr`Time=1 ms 
SCORE : 7099


 OpWrB‘Time=1 ms 
SCORE : 7099


 OpWrB`Time=1 ms 
SCORE : 7099


 OpRec‘Time = 1 ms 
SCORE : 7099


 OpRec‘Time = 1 ms 
SCORE : 7099


 OpRec`Time=1 ms 
SCORE : 7099


 OpRead‘Time = 1 ms 
SCORE : 7099


 OpRead‘Time = 1 ms 
SCORE : 7099


 OpRead`Time=1 ms 
SCORE : 7099


 OpEnr‘Time = 1 ms 
SCORE : 7099


 Disks‘Write = 1 ms 
SCORE : 7099


 Disks‘Read = 1 ms 
SCORE : 7099


 CONSTANT Op5Time : TIME := 2 ms 
SCORE : 7099


 CONSTANT Op4Time : TIME := 1 ms 
SCORE : 7099


 CONSTANT Op3Time : TIME := 3 ms 
SCORE : 7099


 CONSTANT Op2Time : TIME := 2 ms 
SCORE : 7099


 Buffer‘Write=2 ms 
SCORE : 7099


 Buffer‘Read=2 ms 
SCORE : 7099


 Buffer OrderRec OpWr * OrderRec‘Size BlockIn Disks OpWr‘Time=1 ms 
SCORE : 7099


 Buf`Write=2 ms 
SCORE : 7099


 Buf`Read=2 ms 
SCORE : 7099


 Blockout[] * Tcons Tcons‘Time = k/BlockOut[]‘Speed ms 
SCORE : 7099


 BlockOut‘Write=5 ms 
SCORE : 7099


 BEGIN SourceBehavior : PROCESS CONSTANT TSourceTime : TIME := 2 ms 
SCORE : 7099


 BEGIN DestinationBehavior : PROCESS CONSTANT TDestinationTime : TIME := 2 ms 
SCORE : 7099


 <Attributes> BlockOut`Write=5 ms 
SCORE : 7099


 *A & c) *OrderRead[]‘Size Disks‘Use=20 ms 
SCORE : 7099


 Texte LoadDs(Texte,Grammaire,mode) Grammaire GrammaireDs TexteDs RefDs:Ds Le Méta-Générateur MetaGen M 
SCORE : 7097


" [WOLF-94] 
SCORE : 7087


Size - A LOOP WaitEv (FinEmisOutputAccesses, NullTime, 0, now) 
SCORE : 7076


 SignalEv (FinEmisInputAccesses, NullTime, 0, now) 
SCORE : 7076


 Send (X, InfoX, NullTime, 0, now) 
SCORE : 7076


 Send (Cmd, InfoCmd, NullTime, 0, now) 
SCORE : 7076


 ReadSharVar (Sequences, InfSequences, NullTime, NullTim 0, now) 
SCORE : 7076


 FOR j_1 IN 1 TO A LOOP ReadSharVar (Sequences, InfSequences, NullTime, NullTime, 0, now) 
SCORE : 7076


 ELSE RemainTime:=RemainTime-(now-GlobalTime) 
SCORE : 7076


 ELSE RemainTime:=RemainTime-(now-GlobalTime) 
SCORE : 7076


 GenerateFromLastCondActivity Rajout d’une branche "ELSE 
SCORE : 7006


 (voir FIGURE 2 
SCORE : 6964


 use VideoServerLibrary 
SCORE : 6961


) - la simultanéité, ( 
SCORE : 6953


 Cmd`Speed = UniformInt(100,4000) 
SCORE : 6933


13- Opération DelDs 
SCORE : 6920


13 0 
SCORE : 6920


13 
SCORE : 6920


13 
SCORE : 6920


state=ExitNow)) THEN exit 
SCORE : 6887


state=Active) THEN exit 
SCORE : 6887


18 
SCORE : 6872


18 
SCORE : 6872


16 
SCORE : 6871


 - la traçabilité 
SCORE : 6867


power) 
SCORE : 6847


power 
SCORE : 6847


power 
SCORE : 6847


 power : REAL 
SCORE : 6847


 power : REAL 
SCORE : 6847


 power : REAL 
SCORE : 6847


 Chapitre 4 90 M 
SCORE : 6800


 literal  
SCORE : 6760


 Chapitre 4 100 M 
SCORE : 6726


 Recording a) Supervision b) SendBlocks k est une constante BlockOut[] ReadMovie‘Priority=OrderRead[]‘Speed 
SCORE : 6675


19-b 
SCORE : 6658


19) 
SCORE : 6658


19 
SCORE : 6658


 FUNCTION ResolProtocol (Input: DefUPortOutVector) return DefUPortOut 
SCORE : 6641


 FUNCTION ResolProtocol (Input: DefUPortInVector) return DefUPortIn 
SCORE : 6641


 FUNCTION ResolProtocol (Input: DefUDataAccessVector) return DefUDataAccess 
SCORE : 6641


) est disponible 
SCORE : 6603


 TYPE DefUDataAccess IS RECORD data : DefBlock 
SCORE : 6598


state=ExitNow) OR (eve 
SCORE : 6528


 eve<=TmpEve 
SCORE : 6528


 eve 
SCORE : 6528


 WAIT UNTIL eve 
SCORE : 6528


 WAIT UNTIL (eve 
SCORE : 6528


 WAIT UNTIL (eve 
SCORE : 6528


 IF (eve 
SCORE : 6528


 IF ((eve 
SCORE : 6528


 Chapitre 2 50 M 
SCORE : 6497


 * Cmd ‘Size=random(50, NbFmax) 
SCORE : 6497


6 Ko 21 
SCORE : 6496


21 
SCORE : 6496


21 
SCORE : 6496


17 
SCORE : 6495


 Wait (passive) UseTime NbUse-- 
SCORE : 6461


 (passive) MValue:=Value 
SCORE : 6461


PortObject (behavioral) 
SCORE : 6389


PortObject (behavioral) 
SCORE : 6389


EveObject(behavioral) 
SCORE : 6389


 END behavioral 
SCORE : 6389


 END behavioral 
SCORE : 6389


 END behavioral 
SCORE : 6389


 END behavioral 
SCORE : 6389


Id := me 
SCORE : 6319


 CONSTANT me : INTEGER := n + i 
SCORE : 6319


 CONSTANT me : INTEGER := i 
SCORE : 6319


 CONSTANT me : INTEGER := i 
SCORE : 6319


 CONSTANT me : INTEGER := i 
SCORE : 6319


 <Attributes> Cmd`Id = me 
SCORE : 6319


 [2] Codesign, collectif, éd 
SCORE : 6312


5e+06 4e+06 4 
SCORE : 6305


5e+06 3e+06 3 
SCORE : 6290


SéquenceIn[]}* RepUsager[:] ‘Path=‘Id 
SCORE : 6243


RepUsager[])]}* (OpLec& 
SCORE : 6243


Disks}*OrderRec`Size)}* 
SCORE : 6243


Cmd[]}* 
SCORE : 6243


<*>LReq)}* Lind OR Tdmux‘Time=0 
SCORE : 6243


$Tcons[:]}* Tcons[] * SToken TokenManagement Token[] ReqEmis EndEmis OkToken Token[:] SToken‘Time=1 μs 
SCORE : 6243


$RepCanal[:]}* 
SCORE : 6243


$RepCanal[:]}* 
SCORE : 6243


$RepCanal[:]}* 
SCORE : 6243


$OrderRead[:]))}* 
SCORE : 6243


 VARIABLE rep : DefRepCanal 
SCORE : 6210


 • Modèle paramétrable 
SCORE : 6192


 - modèle paramétrable 
SCORE : 6192


E 97 4 
SCORE : 6085


45 0 
SCORE : 6083


45 0 
SCORE : 6083


45 0 
SCORE : 6083


 Chapitre 2 40 M 
SCORE : 6082


35 0 
SCORE : 6081


35 0 
SCORE : 6081


 - riche 
SCORE : 6028


 <EndGenericParameters> <FunctionalStructure> <Component> ServeurVideoSimple Generic n,nd,A () 
SCORE : 5985


 direction : DefDirection 
SCORE : 5920


 Par conséquent 
SCORE : 5903


 Chapitre 3 60 M 
SCORE : 5866


 Uniform(rnd) 
SCORE : 5806


 IF rnd <= Proba THEN Delay(OpRecTime,SupervisionState) 
SCORE : 5806


 destination : BLOCK PORT (Cmd : INOUT DefSignalOut) 
SCORE : 5658


 END BLOCK destination 
SCORE : 5658


 deadline : TIME 
SCORE : 5650


 deadline : TIME 
SCORE : 5650


 deadline : TIME 
SCORE : 5650


 IF ((CurrentConcurrency<Concurrency) AND (highestWaitingFunction/=0)) THEN ActiveFunction(StateVector,highestWaitingFunction, OverHeadProcessor,ProcessorState) 
SCORE : 5604


7 [CALVEZ-96d] 
SCORE : 5603


A12) *N Op0 S A1 Op2 Op3 A11 M[:] Chapitre 3 70 M 
SCORE : 5602


 Analyse Lexicale (Scanner) Analyse Syntaxique (Parser) Analyse Sémantique Structure de Donnée Interne (Parse Tree) Optimisation de Code Génération de Code Langage Source Langage Cible Analyse Synthèse (Back-End) (Front-End) Interpréteur Chapitre 2 32 M 
SCORE : 5601


 Chapitre 2 28 M 
SCORE : 5600


23 Ko 3 
SCORE : 5599


1e+06 1 
SCORE : 5598


1e+06 1 
SCORE : 5598


 Calvez, éd 
SCORE : 5581


 Calvez, éd 
SCORE : 5581


 (ex 
SCORE : 5334


E 159 USE work 
SCORE : 5268


 Get(buff, OutValue) 
SCORE : 5237


7 s) n’est pas atteint 
SCORE : 5224


65 0 
SCORE : 5195


65 0 
SCORE : 5195


65 0 
SCORE : 5195


55 0 
SCORE : 5194


55 0 
SCORE : 5194


55 0 
SCORE : 5194


 Chapitre 6 200 M 
SCORE : 5192


1e+07 1 
SCORE : 5191


 Chapitre 5 150 M 
SCORE : 5188


05 0 
SCORE : 5187


05 0 
SCORE : 5187


05 0 
SCORE : 5187


05 0 
SCORE : 5187


 END_NO_PARSE_TEXT LIBRARY work 
SCORE : 5162


state=waiting THEN TaskIsWaiting:=TRUE 
SCORE : 5083


 VARIABLE result : STD_ULOGIC 
SCORE : 5040


 RETURN result 
SCORE : 5040


7- Exemple de modèle MCSE partiel 
SCORE : 4965


" et "Warning(msg) 
SCORE : 4916


E 33 [CALVEZ-98b] 
SCORE : 4812


 -- entite TVSet TVSet : BLOCK PORT (BlockOut : INOUT DefPortOutVector(1 TO n)) 
SCORE : 4756


 While TmpDs # Nil do TmpDs := TmpDs 
SCORE : 4722


 dest : IN NATURAL 
SCORE : 4715


all 
SCORE : 4577


all 
SCORE : 4577


all 
SCORE : 4577


all 
SCORE : 4577


all 
SCORE : 4577


all 
SCORE : 4577


all 
SCORE : 4577


all 
SCORE : 4577


all 
SCORE : 4577


all 
SCORE : 4577


E 91 -Figure 4 
SCORE : 4551


 ‘Read= w/OrderRec[]‘Speed - 3 Chapitre 3 80 M 
SCORE : 4548


5e+07 0 0 
SCORE : 4547


4e+07 1 
SCORE : 4546


3e+07 1 
SCORE : 4545


33 Ko 2 
SCORE : 4544


2e+07 1 
SCORE : 4542


 Prod * Tprod ‘Size=4+Uniform(250) bytes 
SCORE : 4539


 Masson 1992 
SCORE : 4538


 ‘Size=Uniform(1,120) 
SCORE : 4537


 Chapitre 4 120 M 
SCORE : 4537


STD_LOGIC_1164 
SCORE : 4536


STD_LOGIC_1164 
SCORE : 4536


STD_LOGIC_1164 
SCORE : 4536


 min - VarValue := GetFreeMemory() 
SCORE : 3959


 • Modèle d’interdépendance 
SCORE : 3863


 - modèle d’interdépendance 
SCORE : 3863


 - fiable 
SCORE : 3715


5 sont à considérer: N ->1, 1 -> N, N -> N, N -> M 
SCORE : 3492


6 Ko 462 s 228 s ServeurVideo 5 
SCORE : 3459


 allocator  
SCORE : 3321


 allocator  
SCORE : 3321


 aggregate  
SCORE : 3314


 aggregate  
SCORE : 3314


 Chapitre 4 88 M 
SCORE : 3263


 F2 Pt[1:N] N ---> N ---> 1 N ---> 1 ---> 1 F1[1:N] F2 Pt F1[1:N] a) Case N ---> 1 F1 Pt[1:N] 1 ---> N ---> N 1 ---> 1 ---> N F1 Pt b) Case 1 ---> N Pt[1:K] M ---> K ---> N 1 ---> K ---> N F1[1:M] c) Case M ---> N F2[1:N] F2[1:N] FF22[1[1:N:N] ] Pt[1:K] F1 FF22[1[1:N:N] ] Chapitre 3 64 M 
SCORE : 3257


E 63 3 
SCORE : 3256


 Masson 1993 
SCORE : 3240


 Chapitre 5 160 M 
SCORE : 3237


15e+06 1 
SCORE : 3236


15e+06 1 
SCORE : 3236


 Chapitre 4 110 M 
SCORE : 3232


05e+06 1 
SCORE : 3230


05e+06 1 
SCORE : 3230


 /* X vaut IN, OUT, INOUT*/ PORT MAP (X => X) 
SCORE : 2985


 - sécurisé 
SCORE : 2774


 sec  
SCORE : 2582


 - lacomplétude 
SCORE : 1703


 putRoot getRoot delete getPathName removeAll  
SCORE : 971


cdcDocument"contractuel" FIGURE 2 
SCORE : 860


 WHEN OTHERS => REPORT "Chercher la bug" SEVERITY FAILURE 
SCORE : 649


 FOR i IN ProtocolVector'RANGE LOOP activation:=activation OR (ProtocolVector(i) 
SCORE : 374


 Chapitre 4 98 M 
SCORE : 267


 Chapitre 3 84 M 
SCORE : 256


 <Attributes> Chapitre 3 82 M 
SCORE : 254


 Chapitre 3 78 M 
SCORE : 250


 Chapitre 3 76 M 
SCORE : 248


5 * Chapitre 3 74 M 
SCORE : 246


 Chapitre 3 72 M 
SCORE : 244


E 69 -Figure 3 
SCORE : 240


 ‘Write ‘Use Write ‘Read ‘Use Read ‘Write ‘Use Alloc ‘Read Release Resource Data Chapitre 3 66 M 
SCORE : 235


 Chapitre 3 62 M 
SCORE : 233


E 57 -Figure 3 
SCORE : 228


 Chapitre 3 54 M 
SCORE : 226


 Chapitre 2 48 M 
SCORE : 217


E 47 2 
SCORE : 216


43*x+1 
SCORE : 211


E 29 2 
SCORE : 195


 Chapitre 2 26 M 
SCORE : 194


 Chapitre 7 234 M 
SCORE : 185


 Chapitre 7 226 M 
SCORE : 178


E 221 -Figure 7 
SCORE : 173


 OpRetrait Chapitre 7 220 M 
SCORE : 172


 Chapitre 7 216 M 
SCORE : 168


 Chapitre 7 214 M 
SCORE : 166


 Chapitre 7 210 M 
SCORE : 162


 Chapitre 6 206 M 
SCORE : 158


E 201 6 
SCORE : 153


 Masson 1998 
SCORE : 149


E 197 ) 
SCORE : 143


E 195 FileInclude:=IncludeOp(FileName,1) 
SCORE : 141


 Chapitre 6 192 M 
SCORE : 139


E 191 6 
SCORE : 138


" Name <VarInstance> ou <NodeInstance> ou Interface <EvInstance> OptAttributes Chapitre 6 190 M 
SCORE : 137


E 189 ParameterType:=TypeOf(InputOutput 
SCORE : 135


E 187 NameList:=OptGenericParameters 
SCORE : 133


 } F F1 F12 F F1 F11 F F1 F F2 F F1 F F Chapitre 6 186 M 
SCORE : 132


E 185 TopDownAnalyzeStructuralDescription 
SCORE : 131


 Chapitre 6 182 M 
SCORE : 128


E 175 6 
SCORE : 121


 Chapitre 6 174 M 
SCORE : 120


 Chapitre 5 170 M 
SCORE : 116


 Chapitre 5 168 M 
SCORE : 114


 Chapitre 5 166 M 
SCORE : 112


 Chapitre 5 164 M 
SCORE : 110


 Chapitre 5 162 M 
SCORE : 108


E 161 5 
SCORE : 107


 Chapitre 5 156 M 
SCORE : 103


 CopyDs(SourceDs) Ds NewDs:Ds GrammarDs Ds SourceDs:Ds CopyNode(SourceDs) Node NewNode:Ds GrammarDs Ds SourceDs:Ds Chapitre 5 154 M 
SCORE : 101


 Chapitre 5 148 M 
SCORE : 96


E 147 PORT (SIGNAL X: X X 
SCORE : 95


 BEGIN MultipleInstantiationEmission : Chapitre 5 146 M 
SCORE : 94


 "<Structure>" ComponentDescription Chapitre 5 140 M 
SCORE : 88


" Chapitre 5 138 M 
SCORE : 86


 Cette Chapitre 5 134 M 
SCORE : 83


 Chapitre 4 130 M 
SCORE : 79


13*x+1 
SCORE : 78


 Chapitre 4 128 M 
SCORE : 74


E 127 4 
SCORE : 73


E 123 4 
SCORE : 69


 Chapitre 4 122 M 
SCORE : 68


E 121 LOOP WaitFork(A1Status) 
SCORE : 67


E 119 FOR i IN TaskStateVector’RANGE LOOP KillingTask(TaskStateVector(i)) 
SCORE : 66


 Chapitre 4 118 M 
SCORE : 65


 Chapitre 4 114 M 
SCORE : 61


 Chapitre 4 112 M 
SCORE : 59


 Chapitre 4 104 M 
SCORE : 52


 Chapitre 4 102 M 
SCORE : 49


09 0 
SCORE : 46


08 0 
SCORE : 45


07 0 
SCORE : 44


06 0 
SCORE : 43


04 0 
SCORE : 42


03 0 
SCORE : 41


00001>(OpRec& 
SCORE : 39


﻿M 
SCORE : 0


” 
SCORE : 0


}} [" 
SCORE : 0


}] ") 
SCORE : 0


}:( 
SCORE : 0


} {" 
SCORE : 0


} ") 
SCORE : 0


} ") 
SCORE : 0


superFather 
SCORE : 0


superFather 
SCORE : 0


superFather 
SCORE : 0


superFather 
SCORE : 0


status=TaskBlocked) OR (TaskState 
SCORE : 0


status=TaskBlocked) AND (TaskState 
SCORE : 0


status=TaskBlocked) AND (TaskState 
SCORE : 0


status=TaskBlocked) AND (TaskState 
SCORE : 0


status=TaskBlocked) 
SCORE : 0


status=TaskBlocked) 
SCORE : 0


status=TaskBlocked) 
SCORE : 0


status=InactiveReq 
SCORE : 0


status=InactiveReq 
SCORE : 0


status=InactiveReq 
SCORE : 0


status=InactiveAck 
SCORE : 0


status=InactiveAck 
SCORE : 0


status=ActiveAck) THEN TmpPortAccess:=message 
SCORE : 0


status=ActiveAck) THEN TmpPortAccess:=message 
SCORE : 0


status=ActiveAck) THEN TmpEve:=eve 
SCORE : 0


status=ActiveAck) OR (TaskState 
SCORE : 0


status=ActiveAck) OR (TaskState 
SCORE : 0


status=ActiveAck) OR (TaskState 
SCORE : 0


status=ActiveAck) OR (TaskState 
SCORE : 0


status=ActiveAck) OR (TaskState 
SCORE : 0


status=ActiveAck) 
SCORE : 0


status:=InactiveReq 
SCORE : 0


status:=InactiveReq 
SCORE : 0


status:=InactiveReq 
SCORE : 0


status:=InactiveAck 
SCORE : 0


state=Waiting) OR (TaskState 
SCORE : 0


state=Nodriver) THEN TmpTaskState:=TaskState 
SCORE : 0


state=Inactive) 
SCORE : 0


state=ExitNow) OR (TaskState 
SCORE : 0


state=ExitNow) 
SCORE : 0


state=ExitNow) 
SCORE : 0


state=ExitNow) 
SCORE : 0


state=ExitNow) 
SCORE : 0


state=ExitNow) 
SCORE : 0


state=ExitNow) 
SCORE : 0


state=ExitNow) 
SCORE : 0


state=ExitNow) 
SCORE : 0


state=ExitNow) 
SCORE : 0


state=Blocked) OR (TaskState 
SCORE : 0


state=Active) THEN WAIT UNTIL (TaskState 
SCORE : 0


state=Active) OR (TaskState 
SCORE : 0


state=Active) OR (TaskState 
SCORE : 0


state=Active) OR (TaskState 
SCORE : 0


state=Active) OR (TaskState 
SCORE : 0


state=Active) 
SCORE : 0


state=Active) 
SCORE : 0


state=Active THEN StateVector(i) 
SCORE : 0


state:=Waiting 
SCORE : 0


state:=Nodriver 
SCORE : 0


state:=Nodriver 
SCORE : 0


state:=ExitNow 
SCORE : 0


state:=Blocked 
SCORE : 0


protocol&RepCanal 
SCORE : 0


priority=NATURAL'LOW THEN TmpTaskState 
SCORE : 0


priority=NATURAL'LOW THEN TmpTaskState 
SCORE : 0


priority=NATURAL'LOW THEN TmpTaskState 
SCORE : 0


priority=NATURAL'LOW THEN TmpTaskState 
SCORE : 0


priority:=1 
SCORE : 0


priority:=1 
SCORE : 0


priority:=1 
SCORE : 0


priority:=1 
SCORE : 0


nextFriend 
SCORE : 0


nextFriend 
SCORE : 0


nextFriend 
SCORE : 0


nextFriend 
SCORE : 0


linkUp 
SCORE : 0


linkUp 
SCORE : 0


linkUp 
SCORE : 0


information:=information 
SCORE : 0


alue  
SCORE : 0


XDeclaration 
SCORE : 0


X := X 
SCORE : 0


WriteTime:=LinkWriteTime 
SCORE : 0


WriteTime:=LinkWriteTime 
SCORE : 0


WriteTime/=NullTime) THEN Delay(TmpPortAccess 
SCORE : 0


WriteTime/=NullTime) THEN Delay(TmpEve 
SCORE : 0


WriteTime)--,TaskState) 
SCORE : 0


WriteTime) 
SCORE : 0


VideoServerDeclaration 
SCORE : 0


VarDescription 
SCORE : 0


UntypedParameter 
SCORE : 0


UntypedParameter 
SCORE : 0


UntypedParameter 
SCORE : 0


UntypedParameter 
SCORE : 0


UntypedParameter 
SCORE : 0


UntypedParameter 
SCORE : 0


U 
SCORE : 0


U 
SCORE : 0


U 
SCORE : 0


TypedRelationDef: = CurrentRelation 
SCORE : 0


TypedRelationDef 
SCORE : 0


TypedRelationDef 
SCORE : 0


TypedRelationDef 
SCORE : 0


TypedRelationDef 
SCORE : 0


TypedRelationDef 
SCORE : 0


TypedParameter 
SCORE : 0


TypedParameter 
SCORE : 0


TypedParameter 
SCORE : 0


TypedParameter 
SCORE : 0


TypedParameter 
SCORE : 0


TypedParameter 
SCORE : 0


TypedParameter 
SCORE : 0


TypedParameter 
SCORE : 0


TypedParameter 
SCORE : 0


TypeRelation) 
SCORE : 0


TypeRelation) 
SCORE : 0


Treq[:]&Trouting&  
SCORE : 0


Token[]& 
SCORE : 0


Token[] 
SCORE : 0


TimeUnit:=Nil 
SCORE : 0


Tcons[]&Ttcons}* Prod Cons Trouting Lcons Treq[:] ‘Size=Treq[]‘Size 
SCORE : 0


TEXTIO 
SCORE : 0


TEXTIO 
SCORE : 0


TEXTIO 
SCORE : 0


TB[]&Trecept& 
SCORE : 0


Séquences}*CmdCanalEnr[]‘Size) 
SCORE : 0


Séquences&OpDépot& 
SCORE : 0


Séquences&OpDépot& 
SCORE : 0


SéquenceOut[]&Tcons}* CmdUsager[:] & OR Tprod Tcons Emission Réception * Tcu S Tru‘Time = 0 
SCORE : 0


SéquenceOut[]& 
SCORE : 0


SéquenceIn[]&OpDépot& 
SCORE : 0


SubOrderList 
SCORE : 0


SubNoOrderList 
SCORE : 0


StructureDescription 
SCORE : 0


StructureDescription 
SCORE : 0


StructureDescription 
SCORE : 0


StructureDef 
SCORE : 0


StructureDef 
SCORE : 0


StructureDef 
SCORE : 0


StructureDef 
SCORE : 0


StructureDef 
SCORE : 0


StructureDef 
SCORE : 0


StructureDef 
SCORE : 0


StructureDef 
SCORE : 0


StructureDef 
SCORE : 0


SpécificationDéveloppementValidationValidationDocument 
SCORE : 0


Spéc 
SCORE : 0


Spéc 
SCORE : 0


Spéc 
SCORE : 0


Source 
SCORE : 0


Size := 8 
SCORE : 0


Size := 5 
SCORE : 0


Set,VarDs) 
SCORE : 0


Set 
SCORE : 0


ServeurDeclaration 
SCORE : 0


Sequences&OpDepot& 
SCORE : 0


Sequences&OpDepot& 
SCORE : 0


SequenceOut[]&  
SCORE : 0


SelectName 
SCORE : 0


SecondName 
SCORE : 0


SecondName 
SCORE : 0


S2) Simultanéité Op& 
SCORE : 0


S2) Simultanéité Op& 
SCORE : 0


S Op S S1 OR S2 Séquence Alternative Sélection Op& 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


S 
SCORE : 0


Rheme@hefr 
SCORE : 0


Rheme@hefr 
SCORE : 0


Rheme@hefr 
SCORE : 0


Rheme@hefr 
SCORE : 0


Rheme@hefr 
SCORE : 0


Rheme@hefr 
SCORE : 0


Rheme@hefr 
SCORE : 0


Rheme@hefr 
SCORE : 0


Rheme@hefr 
SCORE : 0


Rheme@hefr 
SCORE : 0


Rheme@hefr 
SCORE : 0


Rheme@hefr 
SCORE : 0


Rheme@hefr 
SCORE : 0


Rheme@hefr 
SCORE : 0


Rheme@hefr 
SCORE : 0


Rheme@hefr 
SCORE : 0


Rheme@hefr 
SCORE : 0


Rheme@hefr 
SCORE : 0


Rheme@hefr 
SCORE : 0


Rheme@hefr 
SCORE : 0


Rheme@hefr 
SCORE : 0


Rheme@hefr 
SCORE : 0


ReqEmis&  
SCORE : 0


ReqEmis& 
SCORE : 0


RepUsager[:]&Tru}* ‘Id=Uniform(1,k) 
SCORE : 0


RepCanal[]&OpRep& 
SCORE : 0


RelationDef 
SCORE : 0


RelationDef 
SCORE : 0


RelationDef 
SCORE : 0


RelationDeclarations 
SCORE : 0


RelationDeclarations 
SCORE : 0


RelationDeclarations 
SCORE : 0


RelationDeclarations 
SCORE : 0


RelationDeclarations 
SCORE : 0


Ready)  
SCORE : 0


Ready& 
SCORE : 0


ReadTime:=LinkReadTime 
SCORE : 0


ReadTime/=NullTime) THEN Delay(TmpPortAccess 
SCORE : 0


ReadTime)--,TaskState) 
SCORE : 0


Range:=TypedRelationDef 
SCORE : 0


Range:=CurrentRelation 
SCORE : 0


Range) 
SCORE : 0


Range = Nil : DeleteMultipleBlock) 
SCORE : 0


Range := Nil 
SCORE : 0


Range 
SCORE : 0


Range 
SCORE : 0


Range 
SCORE : 0


Range 
SCORE : 0


Range 
SCORE : 0


Range 
SCORE : 0


Range 
SCORE : 0


Range 
SCORE : 0


Range 
SCORE : 0


Range 
SCORE : 0


Range 
SCORE : 0


Range 
SCORE : 0


Range 
SCORE : 0


Range 
SCORE : 0


Range 
SCORE : 0


Push(PathLevel) 
SCORE : 0


Push(CompnentInstance) 
SCORE : 0


PortDescription 
SCORE : 0


PortDescription 
SCORE : 0


Pop(PathLevel) 
SCORE : 0


Pop(ComponentInstance) 
SCORE : 0


ParameterDef) 
SCORE : 0


ParameterDef) 
SCORE : 0


ParameterDef 
SCORE : 0


ParameterDef 
SCORE : 0


ParameterDef 
SCORE : 0


ParameterDef 
SCORE : 0


ParameterDef 
SCORE : 0


ParameterDef 
SCORE : 0


ParameterDef 
SCORE : 0


ParameterDef 
SCORE : 0


ParameterDef 
SCORE : 0


ParameterDef 
SCORE : 0


ParameterDef 
SCORE : 0


ParameterDef 
SCORE : 0


ParameterDef 
SCORE : 0


ParameterDef 
SCORE : 0


ParameterDef 
SCORE : 0


ParActivityList,ParActivity) 
SCORE : 0


ParActivityList 
SCORE : 0


P 
SCORE : 0


P 
SCORE : 0


P 
SCORE : 0


OutputChoiceList 
SCORE : 0


OutputChoiceList 
SCORE : 0


OrderRec&({ 
SCORE : 0


OrderRead[]&({ 
SCORE : 0


OrderElements 
SCORE : 0


OptTimeUnit) 
SCORE : 0


OptGenericParameters 
SCORE : 0


OptElementName 
SCORE : 0


OptAttributes 
SCORE : 0


OptAttributes 
SCORE : 0


OptAttributes 
SCORE : 0


OkToken&  
SCORE : 0


OkToken& 
SCORE : 0


NoOrderElements 
SCORE : 0


NoBloc], RepD[DemD[] 
SCORE : 0


NextFriend := VarDs 
SCORE : 0


NextFriend := Nil 
SCORE : 0


NextFriend 
SCORE : 0


NbFreeSpace:=Capacity 
SCORE : 0


NameList 
SCORE : 0


Name=Name): Expression:=AttributeValue 
SCORE : 0


Name:=TypedRelationDef 
SCORE : 0


Name:=McseDs 
SCORE : 0


Name = ParameterName : GenericParameterDeclatation:= GenericParameterDeclatationList 
SCORE : 0


Name := ’Toto’ 
SCORE : 0


Name 
SCORE : 0


Name 
SCORE : 0


Name 
SCORE : 0


Name 
SCORE : 0


Name 
SCORE : 0


Name 
SCORE : 0


Name 
SCORE : 0


Name 
SCORE : 0


Name 
SCORE : 0


Name 
SCORE : 0


Name 
SCORE : 0


Name 
SCORE : 0


Name 
SCORE : 0


Name 
SCORE : 0


Name 
SCORE : 0


Name 
SCORE : 0


Name 
SCORE : 0


Name 
SCORE : 0


Name 
SCORE : 0


Name 
SCORE : 0


Name 
SCORE : 0


Name 
SCORE : 0


MnMess:=0 
SCORE : 0


M Bergé du CNET de Meylan 
SCORE : 0


Lt&Op2) 
SCORE : 0


Lt&Op2) 
SCORE : 0


Lreq& 
SCORE : 0


ListAttributeValue 
SCORE : 0


Lind)&Tdmux&  
SCORE : 0


InternalRelationsList 
SCORE : 0


InternalRelationsList 
SCORE : 0


InternalRelationsList 
SCORE : 0


InternalRelations 
SCORE : 0


InternalInfoDeclaration  
SCORE : 0


InternalEvDeclaration 
SCORE : 0


InternalEvDeclaration 
SCORE : 0


InternalDataDeclaration 
SCORE : 0


Interface 
SCORE : 0


Interface 
SCORE : 0


Interface 
SCORE : 0


IntegerOrReal 
SCORE : 0


IntegerOrReal 
SCORE : 0


InputOutputList 
SCORE : 0


InputOutputList 
SCORE : 0


InputOutput) 
SCORE : 0


InputOutput 
SCORE : 0


InputElementNameList 
SCORE : 0


InputElementNameList 
SCORE : 0


InputElementNameList 
SCORE : 0


InputChoiceList 
SCORE : 0


InfDemD:=information 
SCORE : 0


Id,SupervisionState) 
SCORE : 0


Id) 
SCORE : 0


Id := InfCmdCanalLec 
SCORE : 0


IOType) 
SCORE : 0


GuardedConditionList,NextGuardedCondition) 
SCORE : 0


GuardedCondition:=GuardedCondition 
SCORE : 0


GuardedCondition:=CopyDs(GuardedCondition) 
SCORE : 0


GuardedCondition 
SCORE : 0


GenericParametersDeclaration 
SCORE : 0


FunctionalDescription 
SCORE : 0


FloatOrInteger) 
SCORE : 0


FloatOrInteger) 
SCORE : 0


FinEmis}*CmdCanalLec[]‘Size)) 
SCORE : 0


FinEmis}*CmdCanalLec[]`Size)) 
SCORE : 0


FinEmis& 
SCORE : 0


FifoLec}*CmdCanalLec[]‘Size-A)  
SCORE : 0


FifoLec}*A)& (({ 
SCORE : 0


FifoLec}*A) & Lecture CmdCanalLec[] * Lire Opdépot & FifoLec OpRetrait SéquenceOut[] Séquences *CmdCanalLec[]‘Size - A RepCanal[:] S *CmdCanalLec[]‘Size Opdépot FifoLec: Frag 
SCORE : 0


FifoLec} *CmdCanalLec[]`Size - A) 
SCORE : 0


FifoLec&OpRetrait& 
SCORE : 0


FifoLec&OpRetrait& 
SCORE : 0


FifoEnr}*CmdCanalEnr[]‘Size)  
SCORE : 0


FifoEnr&OpRetrait& 
SCORE : 0


FifoEmis 
SCORE : 0


Field,VarDs) 
SCORE : 0


Field) 
SCORE : 0


Field := [ Ds  
SCORE : 0


Father := SourceDs 
SCORE : 0


FM STRUCTURE CONSEILLÉE DU DOCUMENT •1 
SCORE : 0


FM LA DÉMARCHE DE CONCEPTION RéalisationValidationConceptionSpécificationTESTVERIFICATIONVALIDATIONCONFORMITEPRODUITBESOINRECETTECERTIFICATIONTESTVALIDATIONINTEGRATIONREALISATIONLOGICIELLEREALISATIONMATERIELLEPARTIELOGICIELLEPARTIEMATERIELLEDEFINITIONDE LA REALISATIONSPECI-FICATIONCONCEPTIONFONCTIONNELLE FIGURE 1 
SCORE : 0


FM IMPORTANCE DU DOCUMENT ProduitBesoinTravail de 
SCORE : 0


FM D ÉVELOPPER OU ACHETER  
SCORE : 0


FM D ÉVELOPPER OU ACHETER  
SCORE : 0


Expression 
SCORE : 0


EvDescription 
SCORE : 0


EvDescription 
SCORE : 0


EvDescription 
SCORE : 0


Ev=0 
SCORE : 0


Ev) 
SCORE : 0


Ev& 
SCORE : 0


EndEmis}* Temis ‘Write= A*Lreq‘Size 
SCORE : 0


EndEmis]& SToken& 
SCORE : 0


Else 
SCORE : 0


ElementName:=ElementName 
SCORE : 0


ElementName:=ElementName 
SCORE : 0


ElementName:=CopyDs(ElementName) 
SCORE : 0


ElementName:=CopyDs(ElementName) 
SCORE : 0


ElementName 
SCORE : 0


ElementName 
SCORE : 0


ElementName 
SCORE : 0


ElementName 
SCORE : 0


ElementName 
SCORE : 0


ElementName 
SCORE : 0


ElementName 
SCORE : 0


ElementName 
SCORE : 0


ElementName 
SCORE : 0


ElementName 
SCORE : 0


ElementName 
SCORE : 0


ElementName 
SCORE : 0


ElementName 
SCORE : 0


ElementName 
SCORE : 0


ElementName 
SCORE : 0


ElementName 
SCORE : 0


ElementName 
SCORE : 0


ElementName 
SCORE : 0


ElementName 
SCORE : 0


ElementName 
SCORE : 0


ElementName 
SCORE : 0


ElementName 
SCORE : 0


E2)&A1 Op1& 
SCORE : 0


E2)&A1 Op1& 
SCORE : 0


E2&A2)] E2 A2 ou Op&[ 
SCORE : 0


E1&Op1 
SCORE : 0


E1&A1) 
SCORE : 0


E1&A1 
SCORE : 0


E&A2 a) b) c) A1 E E A1 E1 E2 Op1& 
SCORE : 0


E VarDs 
SCORE : 0


E VARIABLE CurrentConcurrency,i, highestWaitingFunction, lowestActiveFunction : NATURAL 
SCORE : 0


E RendezVous : IN BOOLEAN) IS VARIABLE TmpPortAccess : DefUPortIn 
SCORE : 0


E OutputDs 
SCORE : 0


E OptRelationDescriptions:=ComponentModel 
SCORE : 0


E M 
SCORE : 0


E FUNCTION InitForkJoinStatus RETURN DefForkJoinStatus IS BEGIN RETURN '0' 
SCORE : 0


E FOR i IN 1 TO n GENERATE Emission : BLOCK PORT (Cmd : OUT DefPortIn) 
SCORE : 0


E END RECORD 
SCORE : 0


E END PROCESS DestinationBehavior 
SCORE : 0


E END IF 
SCORE : 0


E 7 
SCORE : 0


E 7 
SCORE : 0


E 7 
SCORE : 0


E 6 
SCORE : 0


E 5 -Figure 1 
SCORE : 0


E 5 -Figure 1 
SCORE : 0


E 5 
SCORE : 0


E 5 
SCORE : 0


E 3 
SCORE : 0


E 3 
SCORE : 0


E 3 
SCORE : 0


E 2 
SCORE : 0


E 2 
SCORE : 0


E 2 
SCORE : 0


E 1 
SCORE : 0


E 1 
SCORE : 0


E -Figure 7 
SCORE : 0


E -Figure 6 
SCORE : 0


E -Figure 6 
SCORE : 0


E -Figure 4 
SCORE : 0


E -Figure 4 
SCORE : 0


E -Figure 4 
SCORE : 0


E -Figure 4 
SCORE : 0


E -Figure 3 
SCORE : 0


E -Figure 1 
SCORE : 0


E -Figure 1 
SCORE : 0


E  M 
SCORE : 0


E  M 
SCORE : 0


E  M 
SCORE : 0


E  M 
SCORE : 0


Disks&OpWrB& 
SCORE : 0


Disks&OpWrB& 
SCORE : 0


Dest]) 
SCORE : 0


Descript := RefDs 
SCORE : 0


Declaration 
SCORE : 0


Debit := InfCmdCanalLec 
SCORE : 0


Debit 
SCORE : 0


ConditionalActivity:=ConditionalActivity 
SCORE : 0


ConditionalActivity:=ConditionalActivity 
SCORE : 0


ComponentInstanceDeclaration 
SCORE : 0


ComponentInstanceDeclaration 
SCORE : 0


ComponentInstanceDeclaration 
SCORE : 0


ComponentIncludel) 
SCORE : 0


ComponentInclude) 
SCORE : 0


ComponentDescription 
SCORE : 0


ComponentDescription 
SCORE : 0


ComponentDescription 
SCORE : 0


ComponentDescription 
SCORE : 0


ComponentDefList 
SCORE : 0


ComponentDefList 
SCORE : 0


ComponentDefList 
SCORE : 0


ComponentDefList 
SCORE : 0


ComponentDefList 
SCORE : 0


CmdUsager[]&Commande)  
SCORE : 0


CmdCanalLec[]&Lire& 
SCORE : 0


CmdCanalLec[]&Lire& 
SCORE : 0


CmdCanalEnr[]&Enregistre& 
SCORE : 0


Cmd&WaitEnd}* 
SCORE : 0


Cmd&(<0 
SCORE : 0


Cmd& 
SCORE : 0


ChoiceElementsList 
SCORE : 0


ChoiceElements 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


C 
SCORE : 0


Buf}*A)&SendBlocks}* 
SCORE : 0


Buf)  
SCORE : 0


Buf& 
SCORE : 0


BlockOut[])}*OrderRead[]`Size 
SCORE : 0


BlockOut[]&Tcons}* 
SCORE : 0


BlockIn}* 
SCORE : 0


BlockIn&OpWr& 
SCORE : 0


BlockDef:=Tmp2 
SCORE : 0


BlockDef 
SCORE : 0


BlockDef 
SCORE : 0


BlockDef 
SCORE : 0


BlockDef 
SCORE : 0


Block:=V 
SCORE : 0


Block 
SCORE : 0


BehaviorDefinition 
SCORE : 0


BehaviorDefinition 
SCORE : 0


BehaviorDefinition 
SCORE : 0


BehaviorDef) 
SCORE : 0


BehaviorDef 
SCORE : 0


BehaviorDef 
SCORE : 0


BehaviorDef 
SCORE : 0


BehaviorDef 
SCORE : 0


BehaviorDef 
SCORE : 0


BehaviorDef 
SCORE : 0


BehaviorDef 
SCORE : 0


BehaviorCondition 
SCORE : 0


BehaviorCondition 
SCORE : 0


BehaviorCondition 
SCORE : 0


BehaviorCondition 
SCORE : 0


AttributeName 
SCORE : 0


AttributeName 
SCORE : 0


AttributeDesignator 
SCORE : 0


AssignOp  
SCORE : 0


ActivityName) 
SCORE : 0


ActivityName 
SCORE : 0


ActivityDescription 
SCORE : 0


Activity 
SCORE : 0


Activity 
SCORE : 0


Activity 
SCORE : 0


Activity 
SCORE : 0


Ack&Op2& 
SCORE : 0


<*>S2) ^ pour Simultanéité Op& 
SCORE : 0


<*>Op2 0 
SCORE : 0


9) 
SCORE : 0


9 
SCORE : 0


9 
SCORE : 0


9 
SCORE : 0


9 
SCORE : 0


9 
SCORE : 0


9 
SCORE : 0


9 
SCORE : 0


9 
SCORE : 0


9 
SCORE : 0


9 
SCORE : 0


8 2 2 
SCORE : 0


8 
SCORE : 0


8 
SCORE : 0


8 
SCORE : 0


8 
SCORE : 0


8 
SCORE : 0


7-b 
SCORE : 0


7) 
SCORE : 0


7 s 
SCORE : 0


7 
SCORE : 0


7 
SCORE : 0


7 
SCORE : 0


7 
SCORE : 0


7 
SCORE : 0


7 
SCORE : 0


7 
SCORE : 0


7 
SCORE : 0


7 
SCORE : 0


7 
SCORE : 0


6-c) 
SCORE : 0


6-b 
SCORE : 0


6 2 
SCORE : 0


6 1 
SCORE : 0


6 0 
SCORE : 0


6 0 
SCORE : 0


6 0 
SCORE : 0


6 0 
SCORE : 0


6 
SCORE : 0


6 
SCORE : 0


6 
SCORE : 0


6 
SCORE : 0


6 
SCORE : 0


6 
SCORE : 0


6 
SCORE : 0


6 
SCORE : 0


6 
SCORE : 0


6 
SCORE : 0


6 
SCORE : 0


6 
SCORE : 0


6 
SCORE : 0


6 
SCORE : 0


6 
SCORE : 0


6 
SCORE : 0


6 
SCORE : 0


6 
SCORE : 0


6 
SCORE : 0


6 
SCORE : 0


6 
SCORE : 0


5>S1 
SCORE : 0


5>Op1 
SCORE : 0


5)Lcons 
SCORE : 0


5) 
SCORE : 0


5 TRouting‘Time=0 
SCORE : 0


5 0 
SCORE : 0


5 0 
SCORE : 0


5 0 
SCORE : 0


5 * OR Op *N {Op}*N Op1 Op2 Op1 Op2 E1 E2 [ 
SCORE : 0


5 
SCORE : 0


5 
SCORE : 0


5 
SCORE : 0


5 
SCORE : 0


5 
SCORE : 0


5 
SCORE : 0


5 
SCORE : 0


5 
SCORE : 0


5 
SCORE : 0


5 
SCORE : 0


5 
SCORE : 0


5 
SCORE : 0


5 
SCORE : 0


5 
SCORE : 0


5 
SCORE : 0


5 
SCORE : 0


4-d) 
SCORE : 0


4-b 
SCORE : 0


4 Mbits/s (8/0 
SCORE : 0


4 2 
SCORE : 0


4 1 
SCORE : 0


4 0 
SCORE : 0


4 0 
SCORE : 0


4 0 
SCORE : 0


4 0 
SCORE : 0


4 
SCORE : 0


4 
SCORE : 0


4 
SCORE : 0


4 
SCORE : 0


4 
SCORE : 0


4 
SCORE : 0


4 
SCORE : 0


4 
SCORE : 0


4 
SCORE : 0


4 
SCORE : 0


4 
SCORE : 0


4 
SCORE : 0


4 
SCORE : 0


3) 
SCORE : 0


3 0 
SCORE : 0


3 0 
SCORE : 0


3 0 
SCORE : 0


3 
SCORE : 0


3 
SCORE : 0


3 
SCORE : 0


3 
SCORE : 0


3 
SCORE : 0


3 
SCORE : 0


3 
SCORE : 0


3 
SCORE : 0


3 
SCORE : 0


3 
SCORE : 0


3 
SCORE : 0


3 
SCORE : 0


3 
SCORE : 0


3 
SCORE : 0


3 
SCORE : 0


3 
SCORE : 0


3 
SCORE : 0


3 
SCORE : 0


2 2 
SCORE : 0


2 1 
SCORE : 0


2 0 
SCORE : 0


2 0 
SCORE : 0


2 0 
SCORE : 0


2 0 
SCORE : 0


2 0 
SCORE : 0


2 0 
SCORE : 0


2 
SCORE : 0


2 
SCORE : 0


2 
SCORE : 0


2 
SCORE : 0


2 
SCORE : 0


2 
SCORE : 0


2 
SCORE : 0


2 
SCORE : 0


2 
SCORE : 0


2 
SCORE : 0


2 
SCORE : 0


2 
SCORE : 0


2 
SCORE : 0


2 
SCORE : 0


2 
SCORE : 0


2 
SCORE : 0


2 
SCORE : 0


2 
SCORE : 0


2 
SCORE : 0


2 
SCORE : 0


2 
SCORE : 0


2 
SCORE : 0


2 
SCORE : 0


2 
SCORE : 0


2 
SCORE : 0


2 
SCORE : 0


2 
SCORE : 0


2 
SCORE : 0


2 
SCORE : 0


1) 
SCORE : 0


1) 
SCORE : 0


1 LES PERFORMANCES 3 
SCORE : 0


1 0 
SCORE : 0


1 0 
SCORE : 0


1 0 
SCORE : 0


1 0 
SCORE : 0


1 
SCORE : 0


1 
SCORE : 0


1 
SCORE : 0


1 
SCORE : 0


1 
SCORE : 0


1 
SCORE : 0


1 
SCORE : 0


1 
SCORE : 0


1 
SCORE : 0


1 
SCORE : 0


1 
SCORE : 0


1 
SCORE : 0


1 
SCORE : 0


1 
SCORE : 0


1 
SCORE : 0


1 
SCORE : 0


1 
SCORE : 0


1 
SCORE : 0


1 
SCORE : 0


1 
SCORE : 0


1 
SCORE : 0


1 
SCORE : 0


1 
SCORE : 0


1 
SCORE : 0


1 
SCORE : 0


1 
SCORE : 0


0) THEN RemainTime:=WaitTime/TaskState 
SCORE : 0


0) THEN RemainTime:=WaitTime/TaskState 
SCORE : 0


0 
SCORE : 0


------------------ 
SCORE : 0


--------------- 
SCORE : 0


-------------- 
SCORE : 0


-------------- 
SCORE : 0


------------- 
SCORE : 0


------------- 
SCORE : 0


------------- 
SCORE : 0


------------- 
SCORE : 0


------------- 
SCORE : 0


------------- 
SCORE : 0


----------- 
SCORE : 0


----------- 
SCORE : 0


----------- 
SCORE : 0


----------- 
SCORE : 0


----------- 
SCORE : 0


----------- 
SCORE : 0


----------- 
SCORE : 0


----------- 
SCORE : 0


----------- 
SCORE : 0


----------- 
SCORE : 0


---------- 
SCORE : 0


---------- 
SCORE : 0


---------- 
SCORE : 0


---------- 
SCORE : 0


---------- 
SCORE : 0


---------- 
SCORE : 0


--------- 
SCORE : 0


--------- 
SCORE : 0


--------- 
SCORE : 0


--------- 
SCORE : 0


--------- 
SCORE : 0


--------- 
SCORE : 0


-------- 
SCORE : 0


-------- 
SCORE : 0


--,TaskState) 
SCORE : 0


-&-]) 
SCORE : 0


-&-  
SCORE : 0


* GeneratorAll MetaGen gscriptDs NodeDs LoadSaveManager VariableScript McseDs VHDLDs GrammarCDs 0 
SCORE : 0


* 0 
SCORE : 0


* 0 
SCORE : 0


) PORT MAP (InputAccesses=>LectureEnregistrementDemD(i), OutputAccesses(1)=>DisquesDemD(i),  
SCORE : 0


) PORT MAP (Accesses=>LectureEnregistrementSequences,  
SCORE : 0


) <Structure> Modele1 
SCORE : 0


) <Structure>  
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


) 
SCORE : 0


(S1^S2) ‘Path S1 & S2 Op& 
SCORE : 0


(S1^S2) ‘Path 0 
SCORE : 0


(S1^S2) & S1 S2 S1 S2 OR Le Générateur VHDL M 
SCORE : 0


(S1&S2) S Op& 
SCORE : 0


(S1 
SCORE : 0


(S1 
SCORE : 0


(Op1& 
SCORE : 0


(Lcons 
SCORE : 0


(E1^E2)&A1 E1 E2 Op1& 
SCORE : 0


(E1^E2)&A1 E1 E2 Op1& 
SCORE : 0


(E1&E2)&A1 E1 E2 Op1& 
SCORE : 0


(E1&E2)&A1 E1 E2 Op1& 
SCORE : 0


(E1 
SCORE : 0


(E1 
SCORE : 0


(<0 
SCORE : 0


(<0 
SCORE : 0


( 
SCORE : 0


& VarStringN 
SCORE : 0


$TB[:]&Temis& 
SCORE : 0


$OrderRec) <*>(OpRead& 
SCORE : 0


$M[:]&((A1& 
SCORE : 0


$CmdCanalEnr[:])  
SCORE : 0


"(HOW) 
SCORE : 0


" {VarName ":" VarType " 
SCORE : 0


" {ConstName ":" ConstValue " 
SCORE : 0


" Req Actions " 
SCORE : 0


" RelationDescription Cmd (Nil) (Nil) <Port> Rep " 
SCORE : 0


" Ready " 
SCORE : 0


" Range OptAttributes " 
SCORE : 0


" Range ComponentInstance Range Interface OptAttributes ComponentDefList OptComponentModels Component- DeclarationList BehaviorDef <From> ComponentDeclaration ComponentInclude <IncludeComponent> Name " 
SCORE : 0


" OptAttributes Relations " 
SCORE : 0


" Op2 SeqActivity "&" " 
SCORE : 0


" ElementName "<" ">" ConditionExpression S1 ^ S2 S1 OR S2 Alternative Op& 
SCORE : 0


" Condition ":" OpDef 
SCORE : 0


" ActivityDef " 
SCORE : 0


" <EndBehavior> Modele2 " 
SCORE : 0


" (WHY) 
SCORE : 0


" (WHAT) 
SCORE : 0


" " 
SCORE : 0


" 
SCORE : 0


" 
SCORE : 0


" 
SCORE : 0


" 
SCORE : 0


 • Traçabilité 
SCORE : 0


 ’String’] 
SCORE : 0


 ’Size=8 
SCORE : 0


 ’Size=8 
SCORE : 0


 ’Débit=CmdCanalLec[]‘Débit 
SCORE : 0


 ‘Use=TaccDisk 
SCORE : 0


 ‘Speed=random(0, 4) Mb/s 
SCORE : 0


 ‘Speed=Cmd‘Speed 
SCORE : 0


 ‘Speed=Cmd‘Speed 
SCORE : 0


 ‘Speed=Cmd‘Speed 
SCORE : 0


 ‘Speed=Cmd‘Speed 
SCORE : 0


 ‘Source=CmdUsager[]’Id 
SCORE : 0


 ‘Source=CmdUsager[]’Id 
SCORE : 0


 ‘Size=NbB bytes 
SCORE : 0


 ‘Size=Cmd‘Size 
SCORE : 0


 ‘Size=Cmd‘Size 
SCORE : 0


 ‘Size=CmdUsager[]‘Size 
SCORE : 0


 ‘Size=CmdUsager[]‘Size 
SCORE : 0


 ‘Size=5 
SCORE : 0


 ‘Read=k/CmdCanalEnr[]‘Débit 
SCORE : 0


 ‘Proba OR S OrderRec OrderRead[:] ‘Size=Cmd‘Size 
SCORE : 0


 ‘Proba OR S OrderRec OrderRead[:] ‘Size=Cmd‘Size 
SCORE : 0


 ‘Power=1 
SCORE : 0


 ‘Id=Uniform(1,K) 
SCORE : 0


 ‘Id=Me 
SCORE : 0


 ‘Id=Cmd‘Id 
SCORE : 0


 ‘Id=Cmd‘Id 
SCORE : 0


 ‘Id=CmdUsager[]‘Canal 
SCORE : 0


 ‘Id=CmdCanalLec[]‘Source 
SCORE : 0


 ‘Débit=CmdUsager[]‘Débit 
SCORE : 0


 ‘Débit=CmdUsager[]‘Débit 
SCORE : 0


 ‘Concurrency=2 
SCORE : 0


 ‘Capacity=5 
SCORE : 0


 ‘Capacity=0 
SCORE : 0


 ‘Capacity=0 
SCORE : 0


 ‘Capacity = 0 
SCORE : 0


 ‘Capacity = 0 
SCORE : 0


 ‘Capacity = * 
SCORE : 0


 ‘Canal=AttributionCanal(CanauxLibres) 
SCORE : 0


 } 5 
SCORE : 0


 {OpDef 
SCORE : 0


 {OpDef 
SCORE : 0


 {OpDef 
SCORE : 0


 {OpDef 
SCORE : 0


 {OpDef 
SCORE : 0


 {OpDef 
SCORE : 0


 k : INTEGER := 1) 
SCORE : 0


 information:=TmpPortAccess 
SCORE : 0


 et Pop(Var) 
SCORE : 0


 et  
SCORE : 0


 copyNode copyDs typeOf addAfter addFirst addLast createNode delDs delNode loadAscii loadBin Vector linkUp Vector linkDown  
SCORE : 0


 a) b) c) OP: PROCESS  
SCORE : 0


 [  
SCORE : 0


 Write‘Time = TaccDisk 
SCORE : 0


 WriteTime: TIME 
SCORE : 0


 WriteTime: TIME 
SCORE : 0


 WriteTime: TIME 
SCORE : 0


 WriteTime : TIME 
SCORE : 0


 WriteTime : TIME 
SCORE : 0


 WhileOp  
SCORE : 0


 While ((GenericParameterDeclatationList # Nil AND GenericParameterDeclatation=Nil) : Case(GenericParameterDeclatationList 
SCORE : 0


 While ((AttributeValue#Nil AND Expression=Nil) : AttributeDesignator:=AttributeValue 
SCORE : 0


 Warning  
SCORE : 0


 WaitingTask(ProcessorState) 
SCORE : 0


 WaitingTask(OpState)  
SCORE : 0


 WaitingTask(OpState)  
SCORE : 0


 WaitingTask(Op1State) 
SCORE : 0


 WaitingTask(E1AndWithoutOrderState) 
SCORE : 0


 WaitingTask(A11State) 
SCORE : 0


 WaitingTask(A112State) 
SCORE : 0


 WaitingTask(A111State) 
SCORE : 0


 Waiting  
SCORE : 0


 Waiting  
SCORE : 0


 Waiting  
SCORE : 0


 Waiting  
SCORE : 0


 WaitUser WaitEnd * BlockIn Source Wait‘Time=0 s 
SCORE : 0


 WaitJoin(OpStatus) 
SCORE : 0


 WaitJoin(OpStatus) 
SCORE : 0


 WaitJoin(A1Status) 
SCORE : 0


 WaitJoin(A11Status) 
SCORE : 0


 WaitJoin (OpStatus_1) 
SCORE : 0


 WaitEv(Stop,NullTime,A1State) 
SCORE : 0


 WaitEv(LtOut,NullTime,A112State) 
SCORE : 0


 WaitEv(E2,OpState) 
SCORE : 0


 WaitEv(E1,OpState) 
SCORE : 0


 WaitEv(E1,E1AndWithoutOrderState) 
SCORE : 0


 Wait Contrainte T<=Tcons‘Time OrderRead[] ReadMovie OpWrB Disks OpWrB Buffer: Block 
SCORE : 0


 WHEN OTHERS=> -- Blocked, Waiting, ExitNow, NoDriver FOR i IN StateVector’RANGE LOOP IF StateVector(i) 
SCORE : 0


 WAIT UNTIL JoinStatus='0' 
SCORE : 0


 WAIT UNTIL JoinStatus='0' 
SCORE : 0


 WAIT UNTIL ForkStatus='1' 
SCORE : 0


 WAIT UNTIL ForkStatus='1' 
SCORE : 0


 WAIT UNTIL (TaskState 
SCORE : 0


 WAIT UNTIL (TaskState 
SCORE : 0


 WAIT UNTIL (TaskState 
SCORE : 0


 WAIT UNTIL (TaskState 
SCORE : 0


 WAIT UNTIL (TaskState 
SCORE : 0


 WAIT UNTIL (ProtocolVector'EVENT) OR (TaskState 
SCORE : 0


 VectorExpression:=RangeExpression 
SCORE : 0


 Vector:=1 
SCORE : 0


 Vector:=0 
SCORE : 0


 VarTemplateDs:=TemplateDs 
SCORE : 0


 VarTemplateDs:=TemplateDs 
SCORE : 0


 VarTemplateDs: VhdlGrammar 
SCORE : 0


 VarOutputDs:=OutputDs 
SCORE : 0


 VarOutputDs:=OutputDs 
SCORE : 0


 VarOutputDs: VhdlGrammar 
SCORE : 0


 VarDs := SourceDs 
SCORE : 0


 VarDs 
SCORE : 0


 Var:=NewElement 
SCORE : 0


 Value  
SCORE : 0


 Val  
SCORE : 0


 VARIABLE TaskIsWaiting : BOOLEAN 
SCORE : 0


 VARIABLE InfoX: X 
SCORE : 0


 VARIABLE InfoCmd : DefTprod 
SCORE : 0


 VARIABLE InfSequenceOut : DefInformation 
SCORE : 0


 VARIABLE InfRepCanal : DefInformation 
SCORE : 0


 VARIABLE InfFifoLec : DefInformation 
SCORE : 0


 VARIABLE CmdUser : DefCmdUser 
SCORE : 0


 VARIABLE BranchNumber : NATURAL 
SCORE : 0


 User::{WaitUser& 
SCORE : 0


 User WaitEnd‘Time=30 s 
SCORE : 0


 UseTime : TIME 
SCORE : 0


 UpdateRelationElement 
SCORE : 0


 UpdateComponentModel 
SCORE : 0


 UnLinkInstance  
SCORE : 0


 USE XLibrary 
SCORE : 0


 USE ServeurLibrary 
SCORE : 0


 USE STANDARD 
SCORE : 0


 USE STANDARD 
SCORE : 0


 USE STANDARD 
SCORE : 0


 USE IEEE 
SCORE : 0


 USE IEEE 
SCORE : 0


 USE IEEE 
SCORE : 0


 TypedRelationDef: = CurrentRelation 
SCORE : 0


 TypeName:=TypedRelationDef 
SCORE : 0


 TypeName:=TypedRelationDef 
SCORE : 0


 TypeName:=Null 
SCORE : 0


 TypeName:=Null 
SCORE : 0


 TypeName:=Null 
SCORE : 0


 TypeName:=InputOutput 
SCORE : 0


 TypeName:=InputOutput 
SCORE : 0


 Tprod‘Time=0 
SCORE : 0


 Tprod‘Time=0 
SCORE : 0


 Tprod‘Time = 0 
SCORE : 0


 TopDownAnalyzeStructuralDescription:: { AnalyzeComponentModelOrInstance 
SCORE : 0


 Tmps 
SCORE : 0


 TmpType:=TypeOf(StructureDescription) 
SCORE : 0


 TmpType:=TypeOf(StructureDescription) 
SCORE : 0


 TmpType:=TypeOf(RelationalElement) 
SCORE : 0


 TmpType:=TypeOf(InputOutput 
SCORE : 0


 TmpType:=TypeOf(InputOutput 
SCORE : 0


 TmpType:=TypeOf(InputOutput 
SCORE : 0


 TmpType:=TypeOf(InputChoiceList) 
SCORE : 0


 TmpType:=TypeOf(ComponentModel) 
SCORE : 0


 TmpType:=TypeOf(ComponentDef) 
SCORE : 0


 TmpType:=TypeOf(ComponentDef) 
SCORE : 0


 TmpType:=TypeOf(BehaviorCondition) 
SCORE : 0


 TmpType:=TypeOf(AttributeDesignator) 
SCORE : 0


 TmpType:= TypeOf(InternalRelations) 
SCORE : 0


 TmpType = ’InOut’ : IsInput:=2 
SCORE : 0


 TmpType = 'VarDescription' : RelationType:='Var' 
SCORE : 0


 TmpType = 'SelectName' : ElementName:=BehaviorCondition 
SCORE : 0


 TmpType = 'OrderElements' : ElementName:=BehaviorCondition 
SCORE : 0


 TmpType = 'NoOrderElements' : SubNoOrderList:=InputChoiceList 
SCORE : 0


 TmpType = 'NoOrderElements' : ElementName:=BehaviorCondition 
SCORE : 0


 TmpType = 'InternalEvDeclaration' : Range:=InternalRelations 
SCORE : 0


 TmpType = 'InternalDataDeclaration' : TypedRelationDef: = InternalRelations 
SCORE : 0


 TmpType = 'InputElementNameList' : InputChoiceList:=BehaviorCondition 
SCORE : 0


 TmpType = 'EvDescription' : RelationType:='Ev' 
SCORE : 0


 TmpType = 'ChoiceElements' : ElementName:=BehaviorCondition 
SCORE : 0


 TmpType = 'ChoiceElements' : ChoiceElementsList:=InputChoiceList 
SCORE : 0


 TmpTaskState:=TaskState 
SCORE : 0


 TmpTaskState:=TaskState 
SCORE : 0


 TmpTaskState 
SCORE : 0


 TmpTaskState 
SCORE : 0


 TmpTaskState 
SCORE : 0


 TmpTaskState 
SCORE : 0


 TmpState 
SCORE : 0


 TmpPortAccess:=message 
SCORE : 0


 TmpPortAccess:=message 
SCORE : 0


 TmpPortAccess 
SCORE : 0


 TmpPortAccess 
SCORE : 0


 TmpPortAccess 
SCORE : 0


 TmpPortAccess 
SCORE : 0


 TmpPortAccess 
SCORE : 0


 TmpEve 
SCORE : 0


 Tmp2: VhdlGrammar 
SCORE : 0


 Tmp1Ds: VhdlGrammar 
SCORE : 0


 Tmp1Ds 
SCORE : 0


 TimeUnit:=TypeOf(AttributeValue 
SCORE : 0


 Temps (s) 0 0 
SCORE : 0


 TaskState<=TmpTaskState 
SCORE : 0


 TaskState<=TmpTaskState 
SCORE : 0


 TaskState<=TmpTaskState 
SCORE : 0


 TaskState<=TmpTaskState 
SCORE : 0


 TaskState<=TmpState 
SCORE : 0


 TaskState 
SCORE : 0


 TaskKiller(MotherTaskState=>A11State, TaskStateVector(1)=>A111State, TaskStateVector(2)=>A112State) 
SCORE : 0


 TaskBlocking:=TaskBlocking AND (ProtocolVector(i) 
SCORE : 0


 TaskBlocked  
SCORE : 0


 TaskBlocked  
SCORE : 0


 TYPE DefUTaskStateVector IS ARRAY (NATURAL RANGE<>) OF DefUTaskState 
SCORE : 0


 TYPE DefUTaskStateTable IS ARRAY(DefUTaskState,DefUTaskState) OF DefUTaskState 
SCORE : 0


 TYPE DefUStateVector IS ARRAY (NATURAL RANGE <>) OF DefUState 
SCORE : 0


 TYPE DefUStateVector IS ARRAY (NATURAL RANGE <>) OF DefUState 
SCORE : 0


 TYPE DefUPortOut_Info2 IS RECORD Information: DefInfo2 
SCORE : 0


 TYPE DefUPortOut_Info1 IS RECORD Information: DefInfo1 
SCORE : 0


 TYPE DefUPortOutVector IS ARRAY (NATURAL RANGE <>) OF DefUPortOut 
SCORE : 0


 TYPE DefUPortOut IS RECORD Information: DefInformation 
SCORE : 0


 TYPE DefUPortIn_Info2 IS RECORD Information: DefInfo2 
SCORE : 0


 TYPE DefUPortIn_Info1 IS RECORD Information: DefInfo1 
SCORE : 0


 TYPE DefUPortInVector IS ARRAY (NATURAL RANGE <>) OF DefUPortIn 
SCORE : 0


 TYPE DefUDataAccessVector IS ARRAY (NATURAL RANGE <>) OF DefUDataAccess 
SCORE : 0


 TYPE DefTaskStateVector IS ARRAY (NATURAL RANGE <>) OF DefTaskState 
SCORE : 0


 TYPE DefTaskStateTable IS ARRAY(DefTaskState,DefTaskState) OF DefTaskState 
SCORE : 0


 TYPE DefStateVector IS ARRAY (NATURAL RANGE <>) OF DefState 
SCORE : 0


 TYPE DefStateVector IS ARRAY (NATURAL RANGE <>) OF DefState 
SCORE : 0


 TYPE DefProtocolVector IS ARRAY (NATURAL RANGE <>) OF DefProtocol 
SCORE : 0


 TYPE DefPortOutVector IS ARRAY (NATURAL RANGE <>) OF DefPortOut 
SCORE : 0


 TYPE DefPortInVector IS ARRAY (NATURAL RANGE <>) OF DefPortIn 
SCORE : 0


 TYPE DefInfo2 IS RECORD Id : Integer 
SCORE : 0


 TYPE DefInfo1 IS RECORD Size : Integer 
SCORE : 0


 TYPE DefHandshakeTable IS ARRAY (DefHandshake,DefHandshake) OF DefHandshake 
SCORE : 0


 TYPE DefForkJoinStatusVector IS ARRAY (NATURAL RANGE <>) OF DefForkJoinStatus 
SCORE : 0


 TYPE DefDemDVectorOfPortInVector IS ARRAY (NATURAL RANGE <>) OF DefPortInVector(1 TO DeuxN) 
SCORE : 0


 TYPE DefDataPolicy IS (DataFifo,DataPriority, ResourceFifo,ResourcePriority) 
SCORE : 0


 TYPE DefDataAccessVector IS ARRAY (NATURAL RANGE <>) OF DefDataAccess 
SCORE : 0


 TVset::{ 
SCORE : 0


 TV Set[] WaitUser‘Time=random(1, 5) s 
SCORE : 0


 SéquenceIn[] SéquenceOut[:] * * * Tru ‘Id=me‘Index 
SCORE : 0


 SupervisionUsagerBhv : PROCESS VARIABLE CmdUser : DefCmdUser 
SCORE : 0


 SupervisionUsager OpRep‘Time = 0 
SCORE : 0


 SupervisionState : INOUT DefState) 
SCORE : 0


 Supervision::{ 
SCORE : 0


 Supervision Supervision : BLOCK PORT (Cmd : INOUT DefPortOut 
SCORE : 0


 SubStringOf(" StringDef "," Expression "," Expression ")"  
SCORE : 0


 StructureDescription:=ComponentDef 
SCORE : 0


 StructureDescription:=ComponentDef 
SCORE : 0


 StructureDescription:=ComponentDef 
SCORE : 0


 StringDef {"&" StringDef}  
SCORE : 0


 StringDef  
SCORE : 0


 String  
SCORE : 0


 Speed: Integer 
SCORE : 0


 Speed: Integer 
SCORE : 0


 SourceDs 
SCORE : 0


 Source::{Wait& 
SCORE : 0


 Source 
SCORE : 0


 Source 
SCORE : 0


 Solution a Solution b TYPE DefUPortIn IS RECORD Information: DefInformation 
SCORE : 0


 SignalEv(Stop,NullTime) 
SCORE : 0


 SignalEv(LtIn,NullTime,A111State) 
SCORE : 0


 SignalEv(CmdIn,NullTime,A112State) 
SCORE : 0


 Signal StateVector : DefStateVector(1 TO IndexVector) 
SCORE : 0


 Signal A1State : DefTaskState 
SCORE : 0


 SetOp  
SCORE : 0


 Serveur : BLOCK  
SCORE : 0


 Serveur : BLOCK  
SCORE : 0


 Sequences : DataObject GENERIC MAP(NbUsers=>DeuxN,  
SCORE : 0


 Sequences : BLOCK PORT (DemD : INOUT DefPortOutVector(1 TO P) 
SCORE : 0


 SendBlock{`Priority=me+1 
SCORE : 0


 SendBlocks::{( 
SCORE : 0


 SearchAttributeDesignator:='Time' 
SCORE : 0


 SaveOp  
SCORE : 0


 SaveDs(RefDs, Texte2) 
SCORE : 0


 Save(NewDs, Texte2) 
SCORE : 0


 SUBTYPE DefTaskState IS ResolTaskState DefUTaskState 
SCORE : 0


 SUBTYPE DefState IS ResolState DefUState 
SCORE : 0


 SUBTYPE DefState IS ResolState DefUState 
SCORE : 0


 SUBTYPE DefPortOut IS ResolProtocol DefUPortOut 
SCORE : 0


 SUBTYPE DefPortIn IS ResolProtocol DefUPortIn 
SCORE : 0


 SUBTYPE DefForkJoinStatus IS ResolForkJoin STD_ULOGIC 
SCORE : 0


 SUBTYPE DefDataAccess IS ResolProtocol DefUDataAccess 
SCORE : 0


 SIGNAL XNumberOfMessagesInPort : DefNaturalVector(1 TO N) 
SCORE : 0


 SIGNAL XNumberOfCurrentAccesses : DefNaturalVector(1 TO N) 
SCORE : 0


 SIGNAL XInputAccesses : DefPortInVector(1 TO N) 
SCORE : 0


 SIGNAL TaskStateVector : INOUT DefStateVector) IS VARIABLE i : NATURAL 
SCORE : 0


 SIGNAL TaskState : INOUT DefState) IS VARIABLE i : INTEGER 
SCORE : 0


 SIGNAL TaskState : INOUT DefState) IS VARIABLE TmpEve : DefUSignalIn 
SCORE : 0


 SIGNAL TaskState : IN DefTaskState) IS BEGIN IF (TaskState/=ExitNow) THEN WAIT UNTIL (TaskState=ExitNow) FOR WaitTime 
SCORE : 0


 SIGNAL TaskState : IN DefState) IS VARIABLE GlobalTime,RemainTime: TIME := NullTime 
SCORE : 0


 SIGNAL TaskState : IN DefState) IS VARIABLE GlobalTime,RemainTime: TIME := NullTime 
SCORE : 0


 SIGNAL StopOut,CmdOut : DefSignalOut 
SCORE : 0


 SIGNAL StopIn,CmdIn : DefSignalIn 
SCORE : 0


 SIGNAL SequencesAccess:DefDataAccessVector(1 TO DeuxN) 
SCORE : 0


 SIGNAL Sequences : INOUT DefDataAccessVector(1 TO n) 
SCORE : 0


 SIGNAL Sequences : INOUT DefDataAccess 
SCORE : 0


 SIGNAL SequenceOut : INOUT DefPortInVector(1 TO n) 
SCORE : 0


 SIGNAL SequenceOut : INOUT DefPortIn 
SCORE : 0


 SIGNAL S: OUT DefS 
SCORE : 0


 SIGNAL RepCanal : INOUT DefRepCanalInputAccesses(1 TO k)) 
SCORE : 0


 SIGNAL RepCanal : INOUT DefRepCanalInputAccesses(1 TO k)) 
SCORE : 0


 SIGNAL ProcessorState : INOUT NATURAL) 
SCORE : 0


 SIGNAL OpStatus_1 : DefForkJoinStatus := InitForkJoinStatus 
SCORE : 0


 SIGNAL LtOut : DefSignalOut 
SCORE : 0


 SIGNAL LtIn : DefSignalIn 
SCORE : 0


 SIGNAL LinkIn: INOUT DefPortIn_Info2 
SCORE : 0


 SIGNAL LinkIn: INOUT DefPortIn_Info1 
SCORE : 0


 SIGNAL LinkIn: INOUT DefPortIn 
SCORE : 0


 SIGNAL LectureEnregistrementDemD: DefDemDVectorOfPortInVector(1 TO P) 
SCORE : 0


 SIGNAL FifoLecInputAccesses : DefPortIn 
SCORE : 0


 SIGNAL CmdNumberOfMessagesInPort : DefNaturalVector(1 TO n) 
SCORE : 0


 SIGNAL CmdNumberOfCurrentAccesses : DefNaturalVector(1 TO n) 
SCORE : 0


 SIGNAL CmdInputAccesses : DefPortInVector(1 TO n) 
SCORE : 0


 SIGNAL A1Status : DefForkJoinStatus := InitForkJoinStatus 
SCORE : 0


 SIGNAL A11Status : DefForkJoinStatus := InitForkJoinStatus 
SCORE : 0


 SIGNAL A11State : DefTaskState 
SCORE : 0


 SIGNAL A111State,A112State : DefTaskState 
SCORE : 0


 SHARED VARIABLE InfCmdCanalLec : DefInformation 
SCORE : 0


 S1 ^ S2 S Op& 
SCORE : 0


 S1 & S2 Op& 
SCORE : 0


 S Path=‘Id 
SCORE : 0


 S Lcons Tcons[:] Dmux Treq[] Lreq OR * Proba=0 
SCORE : 0


 S 
SCORE : 0


 Rn 
SCORE : 0


 ResetVariable  
SCORE : 0


 ResetConditionalActivation(RepCanal 
SCORE : 0


 ResetConditionalActivation(E2 
SCORE : 0


 ResetConditionalActivation(E1 
SCORE : 0


 ResetConditionalActivation(CmdUsager 
SCORE : 0


 ReqEmis OkToken EndEmis TB[] ReceptionMess Lind Trecept‘Time=A*1 μs 
SCORE : 0


 RepCanam[:]`Path = `Id 
SCORE : 0


 RepCanal[]`Size = 8 
SCORE : 0


 RepCanal[]`Id = CmdCanalLec[]`Source 
SCORE : 0


 RendezVous : IN BOOLEAN) IS VARIABLE TmpPortAccess : DefUPortOut 
SCORE : 0


 RelationalElement:=FindRelationalElement(InputOutput) 
SCORE : 0


 RelationLinks  
SCORE : 0


 Recording::{ 
SCORE : 0


 Recoit 
SCORE : 0


 Real  
SCORE : 0


 ReadTime: TIME 
SCORE : 0


 ReadTime: TIME 
SCORE : 0


 ReadTime: TIME 
SCORE : 0


 ReadTime => NullTime) PORT MAP (InputAccesses (1) => FinEmisInputAccesses, OutputAccesses (1) => FinEmisOutputAccesses,  
SCORE : 0


 ReadTime : TIME 
SCORE : 0


 ReadTime : TIME 
SCORE : 0


 Range:=TypedRelationDef 
SCORE : 0


 Range:=TypedRelationDef 
SCORE : 0


 Range:=TypedRelationDef 
SCORE : 0


 Range:=InputOutput 
SCORE : 0


 Range:=InputOutput 
SCORE : 0


 Range:=InputOutput 
SCORE : 0


 Range:=InputOutput 
SCORE : 0


 Range:=ComponentModel 
SCORE : 0


 Range:=ComponentInstance 
SCORE : 0


 R2 
SCORE : 0


 P‘Power=1 
SCORE : 0


 PushOp  
SCORE : 0


 Push(ComponentInstance) 
SCORE : 0


 Protocol: DefProtocol 
SCORE : 0


 Protocol: DefProtocol 
SCORE : 0


 Protocol: DefProtocol 
SCORE : 0


 Protocol: DefProtocol 
SCORE : 0


 Protocol: DefProtocol 
SCORE : 0


 Protocol: DefProtocol 
SCORE : 0


 Proba OR S RepUsager[] OpRep S ‘Path=‘Id 
SCORE : 0


 Priority: Integer 
SCORE : 0


 Priority: Integer 
SCORE : 0


 Power : REAL := 1 
SCORE : 0


 PortMapSimple: StateVector => StateVector(IndexVector+1 TO PortSimple: StateVector : INOUT DefStateVector(1 TO NbTask) 1 IndexVector+NbTask) 2 3 4 StateVector => StateVector(IndexVectorLevel TO IndexVector) PortSimple: StateVector : INOUT DefStateVector(IndexVectorLevel TO IndexVector) PortMapSimple: IndexVector:=IndexVector+NbTask 
SCORE : 0


 PopOp  
SCORE : 0


 Pop(ComponentModel) 
SCORE : 0


 Pop(ComponentModel) 
SCORE : 0


 Pop(ComponentInstance) 
SCORE : 0


 PathLevel:=PathLevel&FileSeparator&ComponentModel 
SCORE : 0


 PathLevel:=PathLevel&FileSeparator&ComponentInstance 
SCORE : 0


 Path=‘Id 
SCORE : 0


 ParameterType:=TypeOf(InputOutput 
SCORE : 0


 ParameterType:=TypeOf(InputOutput 
SCORE : 0


 ParameterType:='Var' 
SCORE : 0


 ParameterType:='Mess' 
SCORE : 0


 ParameterType:='Ev' 
SCORE : 0


 ParameterType:='Ev' 
SCORE : 0


 ParameterName:=TypedRelationDef 
SCORE : 0


 ParameterName:=TypedRelationDef 
SCORE : 0


 ParameterName:=InternalRelations 
SCORE : 0


 ParameterModelName:=CurrentInputOutputModel 
SCORE : 0


 ParameterModelName:=CurrentInputOutputModel 
SCORE : 0


 ParActivityList:=ConcurrentActivity 
SCORE : 0


 ParActivity:=CreateNode(Mcse,ParActivity) 
SCORE : 0


 ParActivity 
SCORE : 0


 Par Introduction M 
SCORE : 0


 PROCEDURE WaitingTask(SIGNAL TaskState : INOUT DefState) IS VARIABLE TmpTaskState : DefUState 
SCORE : 0


 PROCEDURE TaskKiller (SIGNAL MotherTaskState : INOUT DefState 
SCORE : 0


 PROCEDURE Send (Info: IN DefInformation 
SCORE : 0


 PROCEDURE Send (Info2: IN DefInfo2 
SCORE : 0


 PROCEDURE Send (Info1: IN DefInfo1 
SCORE : 0


 PROCEDURE ResetConditionnalActivation(SIGNAL Protocol:INOUT DefProtocol) IS BEGIN Protocol<=InitProtocol 
SCORE : 0


 PROCEDURE Receive ( SIGNAL LinkOut: INOUT DefPortOut_Info2 
SCORE : 0


 PROCEDURE Receive ( SIGNAL LinkOut: INOUT DefPortOut_Info1 
SCORE : 0


 PROCEDURE Receive ( SIGNAL LinkOut: INOUT DefPortOut 
SCORE : 0


 PROCEDURE KillingTask (SIGNAL TaskState : INOUT DefState) IS VARIABLE TmpState : DefUState 
SCORE : 0


 PORT MAP(Stop=>Stop, A1State=>A1State) 
SCORE : 0


 PORT MAP(Sequences=>EnregistrementSequences,  
SCORE : 0


 PORT MAP(Cmd=>Cmd, A1Status=>A1Status, A11State=>A11State) 
SCORE : 0


 PORT MAP (X => X (i)) 
SCORE : 0


 PORT MAP (Stop=>StopOut, Cmd=>CmdIn) 
SCORE : 0


 PORT MAP (Stop=>StopIn) 
SCORE : 0


 PORT MAP (Sequences=>Sequences(i),  
SCORE : 0


 PORT MAP (Sequences=>Sequences(i),  
SCORE : 0


 PORT MAP (Sequences=>LectureSequences,  
SCORE : 0


 PORT MAP (DemD=>LectureEnregistrementDemD,  
SCORE : 0


 PORT MAP (DemD=>LectureEnregistrementDemD,  
SCORE : 0


 PORT MAP (DemD=>DisquesDemD,  
SCORE : 0


 PORT MAP (DemD=>DemD,  
SCORE : 0


 PORT MAP (DemD=>DemD,  
SCORE : 0


 PORT MAP (DemD=>DemD(i),  
SCORE : 0


 PORT MAP (CmdCanalLec => CmdCanalLecOutputAccesses, Sequences => LectureSequencesAccesses, SequenceOut => SequenceOutInputAccesses, RepCanal => RepCanalInputAccesses) 
SCORE : 0


 PORT MAP (CmdCanalLec => CmdCanalLec (i), Sequences => Sequences (i), SequenceOut => SequenceOut (i), RepCanal => RepCanal) 
SCORE : 0


 PORT MAP (Cmd=>CmdOut) 
SCORE : 0


 PORT MAP (Cmd=>Cmd, OrderRec=>SupervisionOrderRec, OrderRead=>SupervisionOrderRead, SupervisionState=>SupervisionState) 
SCORE : 0


 PORT MAP (Cmd=>Cmd) 
SCORE : 0


 PORT MAP (Cmd=>Cmd(i)) 
SCORE : 0


 PORT MAP (Cmd => EmissionCmd) 
SCORE : 0


 PORT MAP (Cmd => Cmd (i)) 
SCORE : 0


 PORT MAP (BlockOut=>BlockOut) 
SCORE : 0


 PORT MAP (BlockOut=>BlockOut(i)) 
SCORE : 0


 PORT MAP (BlockIn=>BlockIn) 
SCORE : 0


 PORT (SIGNAL StateVector : INOUT DefStateVector 
SCORE : 0


 PORT (Cmd : INOUT DefPortInVector(1 TO n) 
SCORE : 0


 PORT ( SIGNAL E: IN DefE 
SCORE : 0


 OverHead : TIME := NullTime 
SCORE : 0


 OutputDs McseDs XTemplateDs Information Generation GenerateOutputDs AnalyzeMcseDS Le Générateur VHDL M 
SCORE : 0


 Out Var S: DefS 
SCORE : 0


 Out Mess SequenceOut[] : DefSequenceOut 
SCORE : 0


 Out Mess RepCanal[:] : DefRepCanal 
SCORE : 0


 Out Mess OrderRec:DefOrderRec 
SCORE : 0


 Out Mess OrderRead[:]:DefOrderRead 
SCORE : 0


 Out Mess BlockOut[]:DefBlockOut 
SCORE : 0


 OrderRec`Speed=Cmd`Speed 
SCORE : 0


 OrderRec : INOUT DefPortIn 
SCORE : 0


 OrderRead[]`Speed=Cmd`Speed 
SCORE : 0


 OrderRead[]`Size=Cmd`Size 
SCORE : 0


 OrderRead[]`Id=Cmd`Id 
SCORE : 0


 OrderRead[:]`Path=`Id 
SCORE : 0


 OrderRead : INOUT DefPortInVector(1 TO n) 
SCORE : 0


 OptRelationDescriptions:=ComponentModel 
SCORE : 0


 OptGenericParameters:=InterfaceInstance 
SCORE : 0


 Opdépot‘Time = 0 
SCORE : 0


 OpRetrait‘Time = 0 
SCORE : 0


 OpRetrait Séquences SéquenceIn[] *CmdCanalEnr[]‘Size RepCanal[:] S ‘Id=CmdCanalEnr[]‘Source 
SCORE : 0


 Op1: PROCESS  
SCORE : 0


 Op E1 A1 Op&[( 
SCORE : 0


 OP_2 : PROCESS VARIABLE InfFifoLec : DefInformation 
SCORE : 0


 OP: PROCESS  
SCORE : 0


 Nodriver  
SCORE : 0


 Nodriver  
SCORE : 0


 Nodriver  
SCORE : 0


 Nodriver  
SCORE : 0


 Nil] 
SCORE : 0


 NextGuardedCondition:=CreateNode(Mcse,NextGuardedCondition) 
SCORE : 0


 NextGuardedCondition 
SCORE : 0


 NextGuardedCondition 
SCORE : 0


 NewDs := CopyDs(SourceDs) 
SCORE : 0


 NbUse:=0 
SCORE : 0


 NbUse-- 
SCORE : 0


 NbUse-- 
SCORE : 0


 NbUse-- 
SCORE : 0


 NbUse-- 
SCORE : 0


 NbUse-- 
SCORE : 0


 NbUse-- 
SCORE : 0


 NbUse < Concurrency NbUse-- 
SCORE : 0


 NbUse < Concurrency NbUse++ 
SCORE : 0


 NbUse < Concurrency NbUse++ 
SCORE : 0


 NbUse < Concurrency NbUse++ 
SCORE : 0


 NbTask:=0 
SCORE : 0


 NbMess++ 
SCORE : 0


 NbFreeSpace++ 
SCORE : 0


 Name:=TypedRelationDef 
SCORE : 0


 Name:=ElementName 
SCORE : 0


 Name:=CurrentRelation 
SCORE : 0


 NO_PARSE_TEXT LIBRARY IEEE 
SCORE : 0


 MultipleLecture : BLOCK PORT (SIGNAL CmdCanalLec : INOUT DefPortOutVector(1 TO n) 
SCORE : 0


 McseModel OutputDs OutputText Script McseDs MCSE XTemplateDs Template XTemplate Load Load ScriptDs Script Load Générique Générateur Generation Save Edit Le Méta-Générateur MetaGen M 
SCORE : 0


 Lreq Path= ‘Id 
SCORE : 0


 Lire::({ 
SCORE : 0


 Lire Opdépot & FifoLec SéquenceOut[] RepD[] *CmdCanalLec[]‘Size - A RepCanal[:] S ‘Id=CmdCanalLec[]‘Source 
SCORE : 0


 LinkWriteTime: TIME) 
SCORE : 0


 LinkWriteTime: TIME) 
SCORE : 0


 LinkWriteTime: TIME) 
SCORE : 0


 LinkWriteTime : IN TIME 
SCORE : 0


 LinkWriteTime : IN TIME 
SCORE : 0


 LinkWriteTime : IN TIME 
SCORE : 0


 LinkReadTime: TIME) 
SCORE : 0


 LinkReadTime: TIME) 
SCORE : 0


 LinkReadTime: TIME) 
SCORE : 0


 LinkReadTime : IN TIME 
SCORE : 0


 Lectures : BLOCK PORT( DemD : INOUT DefDemDVectorOfPortInVector(1 TO P) 
SCORE : 0


 Lectures : BLOCK PORT (Sequences : INOUT DefDataAccessVector(1 TO n) 
SCORE : 0


 Lecture Opdépot‘Time = 0 
SCORE : 0


 Lecture : PROCESS VARIABLE InfSequences : DefData 
SCORE : 0


 Le Méta-Générateur MetaGen M 
SCORE : 0


 Le Méta-Générateur MetaGen M 
SCORE : 0


 Le Méta-Générateur MetaGen M 
SCORE : 0


 Le Méta-Générateur MetaGen M 
SCORE : 0


 Le Méta-Générateur MetaGen M 
SCORE : 0


 Le Méta-Générateur MetaGen M 
SCORE : 0


 Le Générateur VHDL M 
SCORE : 0


 Le Générateur VHDL M 
SCORE : 0


 Le Générateur VHDL M 
SCORE : 0


 Le Générateur VHDL M 
SCORE : 0


 La Chapitre 1 8 M 
SCORE : 0


 LOOP WaitingTask(ProcessorState) 
SCORE : 0


 LOOP WaitingTask(A1State) 
SCORE : 0


 LOOP WaitFork(OpStatus) 
SCORE : 0


 LOOP WaitFork(OpStatus) 
SCORE : 0


 LOOP WaitFork(A11Status) 
SCORE : 0


 LOOP WaitFork(A11Status) 
SCORE : 0


 LOOP WAIT UNTIL StateVector’EVENT oR ProcessorState’EVENT 
SCORE : 0


 LOOP WAIT UNTIL (TaskState 
SCORE : 0


 LOOP InitConditionalActivation(CmdUsager 
SCORE : 0


 LOOP IF (TaskState 
SCORE : 0


 LIBRARY XLibrary 
SCORE : 0


 LIBRARY ServeurLibrary 
SCORE : 0


 LIBRARY STANDARD 
SCORE : 0


 LIBRARY STANDARD 
SCORE : 0


 LIBRARY STANDARD 
SCORE : 0


 LIBRARY IEEE 
SCORE : 0


 LIBRARY IEEE 
SCORE : 0


 KillingTask(A1State) 
SCORE : 0


 KillingTask(A11State) 
SCORE : 0


 Join(OpStatus) 
SCORE : 0


 Join(OpStatus) 
SCORE : 0


 Join(A1Status) 
SCORE : 0


 Join(A11Status) 
SCORE : 0


 Join(A11Status) 
SCORE : 0


 Join (OpStatus_1) 
SCORE : 0


 J-P 
SCORE : 0


 IsInput:=1 
SCORE : 0


 Introduction M 
SCORE : 0


 Introduction M 
SCORE : 0


 InterfaceModel:=ComponentModel 
SCORE : 0


 InterfaceInstance:=ComponentModel 
SCORE : 0


 InterfaceInstance:=ComponentInstance 
SCORE : 0


 InputOutput:=InterfaceInstance 
SCORE : 0


 InitStates(StateVector, power*ProcessorState 
SCORE : 0


 InitConditionalActivation(RepCanal 
SCORE : 0


 InitConditionalActivation(E2 
SCORE : 0


 InitConditionalActivation(E1 
SCORE : 0


 InfoX 
SCORE : 0


 InfoCmd 
SCORE : 0


 InfoCmd 
SCORE : 0


 Info: OUT DefInformation 
SCORE : 0


 Info2: OUT DefInfo2 
SCORE : 0


 Info1: OUT DefInfo1 
SCORE : 0


 InfSequenceOut 
SCORE : 0


 InfRepCanal 
SCORE : 0


 InfRepCanal 
SCORE : 0


 IndexVector:=IndexVector+NbTask 
SCORE : 0


 InactiveTask(Op1State) 
SCORE : 0


 InactiveTask(E1AndWithoutOrderState) 
SCORE : 0


 InactiveTask(A11State) 
SCORE : 0


 InactiveTask(A112State) 
SCORE : 0


 InactiveTask(A111State) 
SCORE : 0


 InactiveTasK(A1State) 
SCORE : 0


 InactiveReq  
SCORE : 0


 InactiveReq  
SCORE : 0


 InactiveAck  
SCORE : 0


 InactiveAck  
SCORE : 0


 Inactive  
SCORE : 0


 Inactive  
SCORE : 0


 Inactive  
SCORE : 0


 Inactive  
SCORE : 0


 InOut Var Sequences : DefSequences 
SCORE : 0


 InOut Var Disks:DefSequences 
SCORE : 0


 In Var Disks:DefSequences 
SCORE : 0


 In Mess OrderRec:DefOrderRec 
SCORE : 0


 In Mess BlockIn:DefBlockIn 
SCORE : 0


 Id : Integer 
SCORE : 0


 IF TmpTaskState 
SCORE : 0


 IF TmpTaskState 
SCORE : 0


 IF TmpTaskState 
SCORE : 0


 IF TmpTaskState 
SCORE : 0


 IF TaskIsWaiting THEN WaitingTask(ProcessorState) 
SCORE : 0


 IF DemD[]=Lecture THEN Send(Disque[DemD[] 
SCORE : 0


 IF (TmpPortAccess 
SCORE : 0


 IF (TmpPortAccess 
SCORE : 0


 IF (TmpEve 
SCORE : 0


 IF (TaskState 
SCORE : 0


 IF (TaskState 
SCORE : 0


 IF (TaskState 
SCORE : 0


 IF (TaskState 
SCORE : 0


 IF (MotherTaskState 
SCORE : 0


 IF (LinkWriteTime/=NullTime) THEN TmpPortAccess 
SCORE : 0


 IF (LinkWriteTime/=NullTime) THEN TmpEve 
SCORE : 0


 IF (LinkReadTime/=NullTime) THEN TmpPortAccess 
SCORE : 0


 IF (A11State/=ExitNow) THEN Fork(A11Status) 
SCORE : 0


 IF ((TaskState 
SCORE : 0


 GuardedCondition:=CreateNode(Mcse,GuardedCondition) 
SCORE : 0


 GuardedCondition 
SCORE : 0


 Graphique IO Range Observations Black Ball Vector 0 0 0 0 0 1 1 _ [ : ] [ : ] [ ] Null Le Générateur VHDL M 
SCORE : 0


 Grammar ] 
SCORE : 0


 GlobalTime:=now 
SCORE : 0


 GlobalTime:=now 
SCORE : 0


 GetRangeExpression 
SCORE : 0


 GetRangeExpression 
SCORE : 0


 GetRangeExpression 
SCORE : 0


 GetRangeExpression 
SCORE : 0


 GetRangeExpression 
SCORE : 0


 GetAttributes(InternalRelations,AttributesList) 
SCORE : 0


 GetAttributes(InputOutput,AttributesList) 
SCORE : 0


 GetAttributes(CurrentRelation,AttributesList) 
SCORE : 0


 GetAttributes(ComponentModel,AttributesList) 
SCORE : 0


 GetAttributes(ComponentInstance,AttributesList) 
SCORE : 0


 GetAttributes  
SCORE : 0


 GenericParameterDefaultValue:=GenericParameterDeclatation 
SCORE : 0


 GenericParameterDefaultValue:=GenericParameterDeclatation 
SCORE : 0


 GenericParameterDeclarationList Name " 
SCORE : 0


 GenericParameterDeclarationList 
SCORE : 0


 GenericPackage Design PackageDeclaration PackageBody DesignUnit File NoParseContextClause OptionalDesignUnit Design Unit Design Unit Design Unit Package Package PackageName Declara 
SCORE : 0


 GenerateStatement SimpleBlock Block Statem 
SCORE : 0


 GenerateOneGenericParameter 
SCORE : 0


 GenerateFromRelationElement 
SCORE : 0


 GenerateFromParActivity 
SCORE : 0


 GenerateFromOrderElementsVector 
SCORE : 0


 GenerateFromNoOrderElementsVector 
SCORE : 0


 GenerateFromInputOutputName 
SCORE : 0


 GenerateFromInputOutput 
SCORE : 0


 GenerateFromIncludeFile 
SCORE : 0


 GenerateFromChoiceElementsVector 
SCORE : 0


 GenerateFirstGenericParameter 
SCORE : 0


 GenerateEndTaskSynchronisation 
SCORE : 0


 GenerateEndTaskSynchronisation 
SCORE : 0


 GenerateEndInterface 
SCORE : 0


 GenerateComponentFromNameAndRange 
SCORE : 0


 GenerateBeginTaskSynchronisation 
SCORE : 0


 GenerateBeginInterface 
SCORE : 0


 Fork(OpStatus) 
SCORE : 0


 Fork(OpStatus) 
SCORE : 0


 Fork(A1Status) 
SCORE : 0


 Fork (OpStatus_1) 
SCORE : 0


 ForEach(SubOrderList : ElementName:=SubOrderList 
SCORE : 0


 ForEach(SubNoOrderList : ElementName:=SubNoOrderList 
SCORE : 0


 ForEach(StructureDescription : TmpType:=TypeOf(StructureDescription) 
SCORE : 0


 ForEach(StructureDescription : Push(ComponentModel) 
SCORE : 0


 ForEach(StructureDescription : Push(ComponentModel) 
SCORE : 0


 ForEach(ParActivityList : NbTask:=ValueOf(NbTask) + 1 
SCORE : 0


 ForEach(OptRelationDescriptions : RelationLinks(OptRelationDescriptions) 
SCORE : 0


 ForEach(OptRelationDescriptions : RelationLinks(OptRelationDescriptions) 
SCORE : 0


 ForEach(OptRelationDescriptions : RelationLinks(OptRelationDescriptions) 
SCORE : 0


 ForEach(OptRelationDescriptions : CurrentRelation:=OptRelationDescriptions 
SCORE : 0


 ForEach(OptRelationDescriptions : CurrentRelation:=OptRelationDescriptions 
SCORE : 0


 ForEach(NameList : ParameterName:=NameList 
SCORE : 0


 ForEach(InternalRelationsList : RelationLinks(InternalRelationsList) 
SCORE : 0


 ForEach(InternalRelationsList : RelationLinks(InternalRelationsList) 
SCORE : 0


 ForEach(InternalRelationsList : RelationLinks(InternalRelationsList) 
SCORE : 0


 ForEach(InputOutput : AnalyzeInputOutputInterface 
SCORE : 0


 ForEach(ChoiceElementsList : ElementName:=ChoiceElementsList 
SCORE : 0


 ForEach( VarMcseDs : CreateBlock) 
SCORE : 0


 ForEach( VarMcseDs : AddLast(VarOutputDs,copyDs(VarTemplateDs)) 
SCORE : 0


 FindNumberOfAccessInLevel 
SCORE : 0


 FindNumberOfAccessInLevel 
SCORE : 0


 FindGenericParameterDeclaration 
SCORE : 0


 FindGenericParameterDeclaration 
SCORE : 0


 FindAttributeValue 
SCORE : 0


 FinEmis : COMPONENT EveObject GENERIC MAP (NbUsersInput => 1, NbUsersOutput => 1,  
SCORE : 0


 FUNCTION ResolTaskState (Input : DefUTaslStateVector) RETURN DefUTaskState 
SCORE : 0


 FUNCTION ResolState (Input : DefUStateVector) RETURN DefUState 
SCORE : 0


 FUNCTION ResolState (Input : DefUStateVector) RETURN DefUState 
SCORE : 0


 FUNCTION ResolForkJoin (Input : STD_ULOGIC_VECTOR) RETURN STD_ULOGIC 
SCORE : 0


 FOR j_2 IN 1 TO InfCmdCanalLec 
SCORE : 0


 FOR j_1 IN 1 TO InfCmdCanalLec 
SCORE : 0


 FOR i IN StateVector’RANGE LOOP IF StateVector(i) 
SCORE : 0


 F1 F11 F12 V F2 F V IOF2 IOF1 IOF11 IOF12 LinkUp LinkDown LinkUp LinkUp Nil Nil Nil Nil LinkDown RelationLinks(V) Le Générateur VHDL M 
SCORE : 0


 Expression:=Nil 
SCORE : 0


 ExitNow  
SCORE : 0


 ExitNow  
SCORE : 0


 ExitExample : BLOCK PORT (Stop : INOUT DefSignalOut 
SCORE : 0


 ExempleDeScript1 Variables VarMcseDs: McseGrammar 
SCORE : 0


 ExecOp  
SCORE : 0


 Error  
SCORE : 0


 Enregistrements : BLOCK PORT (Sequences : INOUT DefDataAccessVector(1 TO n) 
SCORE : 0


 Enregistrements : BLOCK PORT (DemD : INOUT DefDemDVectorOfPortInVector(1 TO P) 
SCORE : 0


 Enregistrement Opdépot‘Time = 0 
SCORE : 0


 Enregistrement Lecture Disque[1:P] DemD[1:P] [1:N] [1:N]  
SCORE : 0


 Enregistre Opdépot & FifoEnr:Frag 
SCORE : 0


 EndIF 
SCORE : 0


 EndCycle 
SCORE : 0


 End Disque[] 
SCORE : 0


 EmissionMess S TB[1:K] Temis‘Time=A*1 μs 
SCORE : 0


 Emission::{Tprod& 
SCORE : 0


 Else" : OpDef 
SCORE : 0


 Else : VectorExpression:=ComponentRangeExpression 
SCORE : 0


 Else : RègleN ]) 
SCORE : 0


 Else : Range:=RelationalElement 
SCORE : 0


 Else : ParameterName:=InputOutput 
SCORE : 0


 Else : ParameterName:=InputOutput 
SCORE : 0


 Else : IsInput:=0 
SCORE : 0


 Else : InternalRelationsList:=ComponentDef 
SCORE : 0


 Else : InternalRelationsList:=ComponentDef 
SCORE : 0


 Else : InternalRelationsList:=ComponentDef 
SCORE : 0


 Else : InternalRelations:=ElementName 
SCORE : 0


 Else : GenericParameterType:=TypeOf(GenericParameterDeclatation 
SCORE : 0


 Else : GenericParameterType:=TypeOf(GenericParameterDeclatation 
SCORE : 0


 Else : GenericParameterDeclatationList:= GenericParameterDeclatationList 
SCORE : 0


 Else : GenerateNoGenericParameters 
SCORE : 0


 Else : GenerateElementaryActivity 
SCORE : 0


 Else : FileName:=PathLevel&FileSeparator&Name&SuffixFile 
SCORE : 0


 Else : ComponentName:=ComponentModel 
SCORE : 0


 Else : ComponentInstance:=StructureDescription 
SCORE : 0


 Else : ComponentInstance:=StructureDescription 
SCORE : 0


 Else : ComponentInstance:=StructureDescription 
SCORE : 0


 Else : BehaviorDef:=ElementName 
SCORE : 0


 Else : AttributeValue:=AttributeValue 
SCORE : 0


 Else : AnalyzeActivityDef 
SCORE : 0


 Else :  
SCORE : 0


 ElementRangeExpression:=RangeExpression 
SCORE : 0


 ElementName:=ChoiceElementsList 
SCORE : 0


 ElementName:=BehaviorCondition 
SCORE : 0


 ElementName:=BehaviorCondition 
SCORE : 0


 ElementMultiple:=MultipleComponent 
SCORE : 0


 EXIT 
SCORE : 0


 EXIT 
SCORE : 0


 EXIT 
SCORE : 0


 ETUDES DE CAS 8 M 
SCORE : 0


 ETUDES DE CAS 8 M 
SCORE : 0


 ETUDES DE CAS 4 M 
SCORE : 0


 ETUDES DE CAS 4 M 
SCORE : 0


 ENTITY X IS GENERIC (X : INTEGER := N 
SCORE : 0


 ENTITY Serveur IS GENERIC ( n : INTEGER := 1 
SCORE : 0


 ENTITY Processor IS GENERIC ( Concurrency : NATURAL := 1 
SCORE : 0


 ENTITY ProblemExit IS END ProblemExit 
SCORE : 0


 ENTITY EnvironnementVideoServer IS GENERIC (n : INTEGER := 1) 
SCORE : 0


 ENTITY ApplicationName IS  
SCORE : 0


 END WaitingTask 
SCORE : 0


 END WaitJoin 
SCORE : 0


 END WaitFork 
SCORE : 0


 END WaitConditionnalActivation 
SCORE : 0


 END TaskKiller 
SCORE : 0


 END SignalEv 
SCORE : 0


 END Serveur 
SCORE : 0


 END ResolForkJoin 
SCORE : 0


 END ResetConditionnalActivation 
SCORE : 0


 END RECORD 
SCORE : 0


 END RECORD 
SCORE : 0


 END RECORD 
SCORE : 0


 END RECORD 
SCORE : 0


 END RECORD 
SCORE : 0


 END RECORD 
SCORE : 0


 END RECORD 
SCORE : 0


 END RECORD 
SCORE : 0


 END RECORD 
SCORE : 0


 END RECORD 
SCORE : 0


 END RECORD 
SCORE : 0


 END RECORD 
SCORE : 0


 END RECORD 
SCORE : 0


 END RECORD 
SCORE : 0


 END RECORD 
SCORE : 0


 END RECORD 
SCORE : 0


 END Processor 
SCORE : 0


 END PROCESS XBehavior 
SCORE : 0


 END PROCESS UserBehavior 
SCORE : 0


 END PROCESS SupervisionUsagerBhv 
SCORE : 0


 END PROCESS SupervisionBehavior 
SCORE : 0


 END PROCESS SourceBehavior 
SCORE : 0


 END PROCESS Scheduling 
SCORE : 0


 END PROCESS ReceptionBehavior 
SCORE : 0


 END PROCESS Op1 
SCORE : 0


 END PROCESS Op 
SCORE : 0


 END PROCESS OP_2 
SCORE : 0


 END PROCESS OP 
SCORE : 0


 END PROCESS OP 
SCORE : 0


 END PROCESS OP 
SCORE : 0


 END PROCESS Lecture 
SCORE : 0


 END PROCESS EmissionBehavior 
SCORE : 0


 END PROCESS EmissionBehavior 
SCORE : 0


 END PROCESS E1AndWithoutOrder 
SCORE : 0


 END PROCESS A1Behavior 
SCORE : 0


 END PROCESS A11Behavior 
SCORE : 0


 END PROCESS A112Behavior 
SCORE : 0


 END PROCESS A111Behavior 
SCORE : 0


 END LOOP 
SCORE : 0


 END LOOP 
SCORE : 0


 END LOOP 
SCORE : 0


 END LOOP 
SCORE : 0


 END LOOP 
SCORE : 0


 END LOOP 
SCORE : 0


 END LOOP 
SCORE : 0


 END LOOP 
SCORE : 0


 END LOOP 
SCORE : 0


 END LOOP 
SCORE : 0


 END LOOP 
SCORE : 0


 END LOOP 
SCORE : 0


 END LOOP 
SCORE : 0


 END LOOP 
SCORE : 0


 END LOOP 
SCORE : 0


 END LOOP 
SCORE : 0


 END LOOP 
SCORE : 0


 END LOOP 
SCORE : 0


 END LOOP 
SCORE : 0


 END LOOP 
SCORE : 0


 END LOOP 
SCORE : 0


 END LOOP 
SCORE : 0


 END LOOP 
SCORE : 0


 END LOOP 
SCORE : 0


 END LOOP 
SCORE : 0


 END LOOP 
SCORE : 0


 END LOOP 
SCORE : 0


 END LOOP 
SCORE : 0


 END LOOP 
SCORE : 0


 END KillingTask 
SCORE : 0


 END Join 
SCORE : 0


 END InitConditionalActivation 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END IF 
SCORE : 0


 END GENERATE MultipleX 
SCORE : 0


 END GENERATE MultipleInstantiationX 
SCORE : 0


 END GENERATE MultipleInstantiationLecture 
SCORE : 0


 END GENERATE MultipleInstantiationEmission 
SCORE : 0


 END GENERATE MultipleInstanciation 
SCORE : 0


 END GENERATE MultipleInstanciation 
SCORE : 0


 END GENERATE MultipleInstanciation 
SCORE : 0


 END GENERATE MultipleInstanciation 
SCORE : 0


 END GENERATE MultipleInstanciation 
SCORE : 0


 END GENERATE MultipleInstanciation 
SCORE : 0


 END GENERATE MultipleInstanciation 
SCORE : 0


 END GENERATE MultipleCmd 
SCORE : 0


 END GENERATE InstantiationPortDemD 
SCORE : 0


 END Fork 
SCORE : 0


 END EnvironnementVideoServer 
SCORE : 0


 END Delay 
SCORE : 0


 END Delay 
SCORE : 0


 END Delay 
SCORE : 0


 END CASE 
SCORE : 0


 END CASE 
SCORE : 0


 END CASE 
SCORE : 0


 END BlockingTask 
SCORE : 0


 END Behavioral 
SCORE : 0


 END BLOCK X 
SCORE : 0


 END BLOCK X 
SCORE : 0


 END BLOCK Users 
SCORE : 0


 END BLOCK User 
SCORE : 0


 END BLOCK TVSet 
SCORE : 0


 END BLOCK TV 
SCORE : 0


 END BLOCK Supervision 
SCORE : 0


 END BLOCK Serveur 
SCORE : 0


 END BLOCK Serveur 
SCORE : 0


 END BLOCK Serveur 
SCORE : 0


 END BLOCK Sequences 
SCORE : 0


 END BLOCK MultipleLecture 
SCORE : 0


 END BLOCK Lectures 
SCORE : 0


 END BLOCK Lectures 
SCORE : 0


 END BLOCK Lecture 
SCORE : 0


 END BLOCK Lecture 
SCORE : 0


 END BLOCK ExitExample 
SCORE : 0


 END BLOCK Enregistrements 
SCORE : 0


 END BLOCK Enregistrements 
SCORE : 0


 END BLOCK Enregistrement 
SCORE : 0


 END BLOCK Emission 
SCORE : 0


 END BLOCK Disques 
SCORE : 0


 END BLOCK A11 
SCORE : 0


 END BLOCK A1 
SCORE : 0


 END 
SCORE : 0


 ELSIF 
SCORE : 0


 ELSIF 
SCORE : 0


 ELSIF 
SCORE : 0


 ELSE RemainTime:=WaitTime 
SCORE : 0


 ELSE RemainTime:=WaitTime 
SCORE : 0


 ELSE Delay(OpReadTime,SupervisionState) 
SCORE : 0


 ELSE 
SCORE : 0


 ELSE 
SCORE : 0


 ELSE 
SCORE : 0


 E1AndWithoutOrder: PROCESS BEGIN InactiveTask(E1AndWithoutOrderState) 
SCORE : 0


 E1 E2 Op1& 
SCORE : 0


 Display  
SCORE : 0


 Delay(TDestinationTime) 
SCORE : 0


 Delay(OpretraitTime) 
SCORE : 0


 Delay(OpdepotTime) 
SCORE : 0


 Delay(OpdepotTime) 
SCORE : 0


 Delay(Op5Time,A112State) 
SCORE : 0


 Delay(Op4Time,A111State) 
SCORE : 0


 Delay(Op3Time,A112State) 
SCORE : 0


 Delay(Op2Time,A11State) 
SCORE : 0


 Delay(Op1Time,A1State) 
SCORE : 0


 Delay(A111Time,A111State) 
SCORE : 0


 DelNode(ConcurrentActivity) 
SCORE : 0


 DelNode(AlternateConditionalActivity) 
SCORE : 0


 DelNode  
SCORE : 0


 DelDs(VarDs) 
SCORE : 0


 DelDs(SourceDs) 
SCORE : 0


 DelDs(RefDs) RefDs:Ds GrammarDs SourceDs:Ds Nil Nil SubDs Ds RefDs:Ds Le Méta-Générateur MetaGen M 
SCORE : 0


 DelDs  
SCORE : 0


 DefSequences 
SCORE : 0


 DefOrderRec 
SCORE : 0


 DefOrderRead 
SCORE : 0


 DefBlockOut 
SCORE : 0


 DefBlockIn 
SCORE : 0


 DataStructure  
SCORE : 0


 CurrentRelation:=OptRelationDescriptions 
SCORE : 0


 CurrentRelation:=OptRelationDescriptions 
SCORE : 0


 CurrentRelation:=InternalRelationsList 
SCORE : 0


 CurrentRelation:=InternalRelationsList 
SCORE : 0


 CurrentRelation:=InternalRelationsList 
SCORE : 0


 CurrentInputOutputModel:=InterfaceModel 
SCORE : 0


 CurrentInputOutputModel:=CurrentInputOutputModel 
SCORE : 0


 CreateRelations 
SCORE : 0


 CreateEntity 
SCORE : 0


 CreateBlocks 
SCORE : 0


 ConditionalActivity:=CreateNode(Mcse,ConditionalActivity) 
SCORE : 0


 ConditionalActivity:=CreateNode(Mcse,ConditionalActivity) 
SCORE : 0


 ConditionalActivity 
SCORE : 0


 ConditionalActivity 
SCORE : 0


 Condition2 : Règle2  
SCORE : 0


 ConcurrentActivity:=CreateNode(Mcse,ConcurrentActivity) 
SCORE : 0


 ConcurrentActivity 
SCORE : 0


 Conclusions et Perspectives M 
SCORE : 0


 ComponentRangeExpression:=RangeExpression 
SCORE : 0


 ComponentMultiple:=MultipleComponent 
SCORE : 0


 ComponentModel:=IncludeComponent(ComponentMode 
SCORE : 0


 ComponentModel:=FindModel(ComponentInstance,1) 
SCORE : 0


 ComponentModel:=FindModel(ComponentInstance,1) 
SCORE : 0


 ComponentModel:=FindModel(ComponentInstance,0) 
SCORE : 0


 ComponentInstance:=Nil 
SCORE : 0


 ComponentInstance:=Nil 
SCORE : 0


 ComponentInstance:=Nil 
SCORE : 0


 ComponentDescription Range Name " 
SCORE : 0


 ComponentDescription Range F1 " 
SCORE : 0


 ComponentDef:=ComponentModel 
SCORE : 0


 ComponentDef:=ComponentModel 
SCORE : 0


 ComponentAttributes:=Nil 
SCORE : 0


 ComponentAttributes:=BehaviorDef 
SCORE : 0


 Commande ( 
SCORE : 0


 Cmd[]‘Size = 5 
SCORE : 0


 CmdCanalLec[] * OpRetrait‘Time = 0 
SCORE : 0


 CmdCanalEnr[:] CmCanalLec[:] ‘Id=CmdUsager[]‘Canal 
SCORE : 0


 Cmd : INOUT DefSignalIn) 
SCORE : 0


 Cmd * OpRec OpRead Else ‘Path=‘Id 
SCORE : 0


 Cmd * OpRec OpRead Else ‘Path=‘Id 
SCORE : 0


 ChoiceElementsList:=ChoiceElementsList 
SCORE : 0


 CaseOp  
SCORE : 0


 Case(TmpType='StructureDef' : OptRelationDescriptions:=ComponentDef 
SCORE : 0


 Case(TmpType='StructureDef' : OptRelationDescriptions:=ComponentDef 
SCORE : 0


 Case(TmpType='StructureDef' : OptRelationDescriptions:=ComponentDef 
SCORE : 0


 Case(TmpType='OrderElements' : SubOrderList:=InputChoiceList 
SCORE : 0


 Case(TmpType='InternalInfoDeclaration': TypedRelationDef:=InternalRelations 
SCORE : 0


 Case(TmpType='EvDescription' : Range:=RelationalElement 
SCORE : 0


 Case(TmpType = 'TypedParameter' : ParameterName:=InputOutput 
SCORE : 0


 Case(TmpType = 'TypedParameter' : ParameterName:=InputOutput 
SCORE : 0


 Case(TmpType = 'InputOutput' : InputOutput:=ElementName 
SCORE : 0


 Case(TmpType = 'ElementName' : ElementName:=BehaviorCondition 
SCORE : 0


 Case(TmpType = 'ActivityDescription' : Attributes:=ElementName 
SCORE : 0


 Case(OptGenericParameters # Nil : ParameterName:=OptGenericParameters 
SCORE : 0


 Case(Attributes # Nil : FindAttributeValue 
SCORE : 0


 Case((TmpType='PortDescription' OR TmpType='NodeDescription'): RelationType:='Port' 
SCORE : 0


 Case( VarMcseDs 
SCORE : 0


 Case (TmpType = 'In' : IsInput:=1 
SCORE : 0


 Case (TmpType = 'ComponentInclude' : PathLevel:=GetLibraryPath(ComponentModel 
SCORE : 0


 Case (TmpType = 'ComponentDescription' : ComponentModel:=StructureDescription 
SCORE : 0


 Case (TmpType = 'ComponentDescription' : ComponentModel:=StructureDescription 
SCORE : 0


 Case (TmpType = 'ComponentDescription' : ComponentModel:=StructureDescription 
SCORE : 0


 Case (RangeExpression # Null : BlackBall:=MultipleComponent 
SCORE : 0


 Case (ExecutifETR=’VxWork’:  
SCORE : 0


 Case (ComponentInstance # Nil : ComponentName:=ComponentInstance 
SCORE : 0


 Case (ActivityDef = Nil : Case (ForPerformanceEvualation = 'YES' : TmpType:=TypeOf(ElementName 
SCORE : 0


 Case ((TmpType = SearchAttributeDesignator AND AttributeValue 
SCORE : 0


 Case ((Expression=Nil AND ComponentAttributes#Nil) : Attributes:=ComponentAttributes 
SCORE : 0


 Capacity => A, WriteTime => NullTime ReadTime => NullTime) PORT MAP (InputAccesses (1) => FifoLecInputAccesses, OutputAccesses (1) => FifoLecOutputAccesses,  
SCORE : 0


 CONSTANT ResolutionTaskState : DefUTaskStateTable :=( -- 
SCORE : 0


 CONSTANT ResolutionTaskState : DefTaskStateTable :=( -- 
SCORE : 0


 CONSTANT ResolutionHandshake : DefHandshakeTable :=( -- 
SCORE : 0


 CONSTANT NPlus1 : INTEGER := n+1 
SCORE : 0


 CONSTANT NPlus1 : INTEGER := n+1 
SCORE : 0


 CONSTANT DeuxN : INTEGER := n+n 
SCORE : 0


 CONSTANT DeuxN : INTEGER := n+n 
SCORE : 0


 CASE ProcessorState IS WHEN Inactive => TaskIsWaiting:=FALSE 
SCORE : 0


 CASE BranchNumber IS WHEN 1 => Receive(CmdUsager,CmdUser,State) 
SCORE : 0


 C 
SCORE : 0


 BranchNumber : OUT NATURAL 
SCORE : 0


 BottomUpAnalyzeStructuralDescription:: { ComponentDef:=ComponentModel 
SCORE : 0


 BottomUpAnalyzeStructuralDescription 
SCORE : 0


 BlockingTask(OpState) 
SCORE : 0


 BlockingTask(OpState) 
SCORE : 0


 Blocked  
SCORE : 0


 Blocked  
SCORE : 0


 Blocked  
SCORE : 0


 Blocked  
SCORE : 0


 BlockOut : INOUT DefPortOutVector(1 TO n)) 
SCORE : 0


 BlockIn : INOUT DefPortIn 
SCORE : 0


 Block 
SCORE : 0


 BlackBall:=ComponentMultiple 
SCORE : 0


 BlackBall:=0 
SCORE : 0


 BlackBall:=0 
SCORE : 0


 BehaviorInstance:=ComponentDef 
SCORE : 0


 BehaviorInstance:=ComponentDef 
SCORE : 0


 BehaviorInstance:=ComponentDef 
SCORE : 0


 Begin Cycle DemD[]: Attente(TaccDisk) 
SCORE : 0


 BEGIN activation:=FALSE 
SCORE : 0


 BEGIN XBehavior : PROCESS CONSTANT XTime : TIME := N 
SCORE : 0


 BEGIN WaitingTask(State) 
SCORE : 0


 BEGIN WaitFork (OpStatus_1) 
SCORE : 0


 BEGIN UserBehavior : PROCESS  
SCORE : 0


 BEGIN TmpState:=TaskState 
SCORE : 0


 BEGIN TmpPortAccess 
SCORE : 0


 BEGIN SupervisionBehavior : PROCESS VARIABLE j : INTEGER 
SCORE : 0


 BEGIN ReleaseSignaldriver(TaskStateVector(1)=>A11State, TaskStateVector(2)=>A111State TaskStateVector(3)=>A112State) 
SCORE : 0


 BEGIN ReceptionBehavior : PROCESS  
SCORE : 0


 BEGIN OpStatus_1 <= InitForkJoinStatus 
SCORE : 0


 BEGIN MultipleInstantiationX : FOR i IN 1 TO N GENERATE X : BLOCK PORT (X : X DefPortIn) 
SCORE : 0


 BEGIN MultipleInstantiationLecture : FOR i IN 1 TO n GENERATE Lecture : BLOCK PORT (SIGNAL CmdCanalLec : INOUT DefPortOut 
SCORE : 0


 BEGIN LOOP WaitEv(Cmd,NullTime) 
SCORE : 0


 BEGIN LOOP WAIT UNTIL MotherTaskState’EVENT 
SCORE : 0


 BEGIN LOOP Delay(TSourceTime) 
SCORE : 0


 BEGIN LOOP Delay (XTime) 
SCORE : 0


 BEGIN LOOP Delay (TprodTime) 
SCORE : 0


 BEGIN InactiveTask(ProcessorState) 
SCORE : 0


 BEGIN InactiveTask(Op1State) 
SCORE : 0


 BEGIN IF (TaskState 
SCORE : 0


 BEGIN IF (TaskState 
SCORE : 0


 BEGIN IF (TaskState 
SCORE : 0


 BEGIN IF ((TaskState 
SCORE : 0


 BEGIN IF ((TaskState 
SCORE : 0


 BEGIN GlobalTime:=now 
SCORE : 0


 BEGIN GlobalTime:=now 
SCORE : 0


 BEGIN FifoLec : COMPONENT PortObject GENERIC MAP (NbUsersInput => 1, NbUsersOutput => 1,  
SCORE : 0


 BEGIN EmissionBehavior : PROCESS CONSTANT TprodTime : TIME := 0 
SCORE : 0


 BEGIN EmissionBehavior : PROCESS  
SCORE : 0


 BEGIN END BLOCK Lecture 
SCORE : 0


 BEGIN END BLOCK Enregistrement 
SCORE : 0


 BEGIN A1 : BLOCK PORT(Stop : INOUT DefSignalOut 
SCORE : 0


 BEGIN  
SCORE : 0


 BEGIN  
SCORE : 0


 B  
SCORE : 0


 B  
SCORE : 0


 B  
SCORE : 0


 Attributes:=BehaviorDef 
SCORE : 0


 AnalyzeStructuralDescription:: { AnalyzeComponentModelOrInstance 
SCORE : 0


 AnalyzeStructuralDescription 
SCORE : 0


 AnalyzeRelationElement:: { TmpType:=TypeOf(CurrentRelation) 
SCORE : 0


 AnalyzeRelationElement 
SCORE : 0


 AnalyzeRelationElement 
SCORE : 0


 AnalyzeRelationElement 
SCORE : 0


 AnalyzeInternalRelationElement 
SCORE : 0


 AnalyzeInternalRelationElement 
SCORE : 0


 AnalyzeInternalRelationElement 
SCORE : 0


 AnalyzeInputOutputName 
SCORE : 0


 AnalyzeInputOutputName 
SCORE : 0


 AnalyzeInputOutputName 
SCORE : 0


 AnalyzeInputOutputName 
SCORE : 0


 AnalyzeGenericParameters 
SCORE : 0


 AnalyzeConcurrentActivity 
SCORE : 0


 AnalyzeComponentModelOrInstance 
SCORE : 0


 AnalyzeComponentModelOrInstance 
SCORE : 0


 AnalyzeBehavioralDescription 
SCORE : 0


 AnalyzeBehavioralDescription 
SCORE : 0


 AnalyzeBehavioralDescription 
SCORE : 0


 AnalyzeAlternateConditionalActivity 
SCORE : 0


 AnalyzeActivity 
SCORE : 0


 AnalyzeActivity 
SCORE : 0


 Analog Devices  M 
SCORE : 0


 AlternateConditionalActivity:=CreateNode(Mcse,AlternateConditionalActivity) 
SCORE : 0


 AlternateConditionalActivity 
SCORE : 0


 AddLast(VarOutputDs,TempDs) 
SCORE : 0


 AddLast(ConcurrentActivity 
SCORE : 0


 AddLast(AlternateConditionalActivity 
SCORE : 0


 AddLast  
SCORE : 0


 AddFirst  
SCORE : 0


 AddAfter  
SCORE : 0


 ActivityDef:=FindActivityDescription(Activity 
SCORE : 0


 Activity:=ParActivityList 
SCORE : 0


 Activity:=ConcurrentActivity 
SCORE : 0


 ActiveReq  
SCORE : 0


 ActiveReq  
SCORE : 0


 ActiveAck  
SCORE : 0


 ActiveAck  
SCORE : 0


 Active  
SCORE : 0


 Active  
SCORE : 0


 Active  
SCORE : 0


 ALIAS X : DefPortInVector(1 TO N) IS XInputAccesses(1 TO N) 
SCORE : 0


 ALIAS EmissionCmd : DefPortInVector(1 TO n) IS CmdInputAccesses(1 TO n) 
SCORE : 0


 A1Status : INOUT DefForkJoinStatus 
SCORE : 0


 A1State : INOUT DefTaskState) 
SCORE : 0


 A1Behavior : PROCESS BEGIN InactiveTask(A1State) 
SCORE : 0


 A11State : INOUT DefTaskState) 
SCORE : 0


 A11Behavior : PROCESS BEGIN InactiveTask(A11State) 
SCORE : 0


 A112Behavior: PROCESS BEGIN InactiveTask(A112State) 
SCORE : 0


 A111Behavior: PROCESS BEGIN InactiveTask(A111State) 
SCORE : 0


 A11 : BLOCK PORT(Cmd : INOUT DefSignalIn 
SCORE : 0


 <Var> V : DefV 
SCORE : 0


 <Var> Sequences : DefSequences 
SCORE : 0


 <Var> Disks : DefSequences 
SCORE : 0


 <Structure> StructureServeurvideo 
SCORE : 0


 <Structure> StructureServeurVideoSimple 
SCORE : 0


 <Structure> StructureF 
SCORE : 0


 <RelationTypes> DefCmd 
SCORE : 0


 <Port> Rep: DefRep 
SCORE : 0


 <Port> Cmd : DefCmd 
SCORE : 0


 <Port> BlockIn : DefBlockIn 
SCORE : 0


 <InfoLink> FifoLec : Frag 
SCORE : 0


 <InfoLink> Buf:Block 
SCORE : 0


 <EndRelationTypes> <GenericParameters> <EndGenericParameters> <FunctionalStructure> <Component> F () 
SCORE : 0


 <EndEvLink> Lecture::{ 
SCORE : 0


 <EndComponent>  
SCORE : 0


 <EndBehavior> <EndComponent> Lecture CmdCanalLec[] * Lire Opdépot FifoLec OpRetrait SéquenceOut[] Séquences *CmdCanalLec[]‘Size - A RepCanal[:] S *CmdCanalLec[]‘Size Opdépot FifoLec: Frag 
SCORE : 0


 <EndBehavior> <EndComponent> <EndStructure> <EndComponent> <EndStructure> <EndComponent> <EndFunctionalStructure> 3 
SCORE : 0


 <EndBehavior> <EndComponent> <Component> Source (Out Mess BlockIn:DefBlockIn 
SCORE : 0


 <EndBehavior> <EndComponent> <Component> ServeurVideo (In Mess Cmd:DefCmd 
SCORE : 0


 <EndBehavior> <EndComponent> <Component> Recording (In Mess BlockIn:DefBlockIn 
SCORE : 0


 <EndAttributes> <Port> OrderRec : DefOrderRec 
SCORE : 0


 <EndAttributes> <EndInfoLink> ReadMovie::{ 
SCORE : 0


 <EndAttributes> <EndInfoLink> <EvLink> FinEmis 
SCORE : 0


 <EndAttributes> <Behavior> BehaviorUser 
SCORE : 0


 <EndAttributes> <Behavior> BehaviorTVSet 
SCORE : 0


 <EndAttributes> <Behavior> BehaviorSupervision 
SCORE : 0


 <EndAttributes> <Behavior> BehaviorSource 
SCORE : 0


 <EndAttributes> <Behavior> BehaviorRecording 
SCORE : 0


 <EndAttributes> <Behavior> BehaviorReadMovie 
SCORE : 0


 <EndAttributes> <Behavior> BehaviorLecture 
SCORE : 0


 <EndAttributes> <Behavior> BehaviorF 
SCORE : 0


 <Component> Supervision (In Mess Cmd:DefCmd 
SCORE : 0


 <Component> Serveur Generic n, k ( In Mess E: DefE 
SCORE : 0


 <Component> F (In Var V : DefV 
SCORE : 0


 <Behavior> Modele2 
SCORE : 0


 <Attributes> `Concurrency=nd 
SCORE : 0


 <Attributes> `Capacity=0 
SCORE : 0


 <Attributes> `Capacity=0 
SCORE : 0


 <Attributes> `Capacity = A 
SCORE : 0


 <Attributes> `Capacity = A 
SCORE : 0


 <Attributes> Wait`Time=NullTime 
SCORE : 0


 <Attributes> SequencesOut[]`Debit = CmdCanalLec[]`Debit 
SCORE : 0


 <Attributes> OrderRec`Size=Cmd`Size 
SCORE : 0


 <Attributes> Cmd[]‘Id = me‘Index 
SCORE : 0


 8 
SCORE : 0


 8 
SCORE : 0


 7 
SCORE : 0


 7 
SCORE : 0


 7 
SCORE : 0


 7 
SCORE : 0


 7 
SCORE : 0


 7 
SCORE : 0


 7 
SCORE : 0


 7 
SCORE : 0


 7 
SCORE : 0


 7 
SCORE : 0


 7 
SCORE : 0


 7 
SCORE : 0


 7 
SCORE : 0


 6 
SCORE : 0


 6 
SCORE : 0


 6 
SCORE : 0


 6 
SCORE : 0


 6 
SCORE : 0


 6 
SCORE : 0


 6 
SCORE : 0


 6 
SCORE : 0


 6 
SCORE : 0


 6 
SCORE : 0


 6 
SCORE : 0


 6 
SCORE : 0


 6 
SCORE : 0


 6 
SCORE : 0


 6 
SCORE : 0


 6 
SCORE : 0


 6 
SCORE : 0


 5 
SCORE : 0


 5 
SCORE : 0


 5 
SCORE : 0


 5 
SCORE : 0


 5 
SCORE : 0


 5 
SCORE : 0


 5 
SCORE : 0


 5 
SCORE : 0


 5 
SCORE : 0


 5 
SCORE : 0


 5 
SCORE : 0


 5 
SCORE : 0


 5 
SCORE : 0


 5 
SCORE : 0


 5 
SCORE : 0


 5 
SCORE : 0


 5 
SCORE : 0


 5 
SCORE : 0


 5 
SCORE : 0


 5 
SCORE : 0


 5 
SCORE : 0


 5 
SCORE : 0


 5 
SCORE : 0


 5 
SCORE : 0


 5 
SCORE : 0


 5 
SCORE : 0


 5 
SCORE : 0


 5 
SCORE : 0


 5 
SCORE : 0


 5 
SCORE : 0


 5 
SCORE : 0


 5 
SCORE : 0


 4 
SCORE : 0


 4 
SCORE : 0


 4 
SCORE : 0


 4 
SCORE : 0


 4 
SCORE : 0


 4 
SCORE : 0


 4 
SCORE : 0


 4 
SCORE : 0


 4 
SCORE : 0


 4 
SCORE : 0


 4 
SCORE : 0


 4 
SCORE : 0


 4 
SCORE : 0


 4 
SCORE : 0


 4 
SCORE : 0


 4 
SCORE : 0


 4 
SCORE : 0


 4 
SCORE : 0


 4 
SCORE : 0


 4 
SCORE : 0


 4 
SCORE : 0


 4 
SCORE : 0


 4 
SCORE : 0


 4 
SCORE : 0


 3 
SCORE : 0


 3 
SCORE : 0


 3 
SCORE : 0


 3 
SCORE : 0


 3 
SCORE : 0


 3 
SCORE : 0


 3 
SCORE : 0


 3 
SCORE : 0


 3 
SCORE : 0


 3 
SCORE : 0


 3 
SCORE : 0


 3 
SCORE : 0


 3 
SCORE : 0


 3 
SCORE : 0


 3 
SCORE : 0


 3 
SCORE : 0


 3 
SCORE : 0


 3 
SCORE : 0


 2 
SCORE : 0


 2 
SCORE : 0


 2 
SCORE : 0


 2 
SCORE : 0


 2 
SCORE : 0


 2 
SCORE : 0


 2 
SCORE : 0


 2 
SCORE : 0


 2 
SCORE : 0


 2 
SCORE : 0


 2 
SCORE : 0


 2 
SCORE : 0


 2 
SCORE : 0


 2 
SCORE : 0


 2 
SCORE : 0


 2 
SCORE : 0


 2 
SCORE : 0


 2 
SCORE : 0


 2 
SCORE : 0


 2 
SCORE : 0


 2 
SCORE : 0


 2 
SCORE : 0


 2 
SCORE : 0


 2 
SCORE : 0


 2 
SCORE : 0


 2 
SCORE : 0


 2 
SCORE : 0


 1 StartScript GenEdit 1 1 0 
SCORE : 0


 1 - PRESENTATION GENERALE DE LA METHODOLOGIE M 
SCORE : 0


 1 - PRESENTATION GENERALE DE LA METHODOLOGIE M 
SCORE : 0


 1 - PRESENTATION GENERALE DE LA METHODOLOGIE M 
SCORE : 0


 1 - PRESENTATION GENERALE DE LA METHODOLOGIE M 
SCORE : 0


 1 - PRESENTATION GENERALE DE LA METHODOLOGIE M 
SCORE : 0


 1 - PRESENTATION GENERALE DE LA METHODOLOGIE M 
SCORE : 0


 1 
SCORE : 0


 1 
SCORE : 0


 1 
SCORE : 0


 1 
SCORE : 0


 1 
SCORE : 0


 1 
SCORE : 0


 1 
SCORE : 0


 1 
SCORE : 0


 1 
SCORE : 0


 1 
SCORE : 0


 1 
SCORE : 0


 1 
SCORE : 0


 1 
SCORE : 0


 1 
SCORE : 0


 1 
SCORE : 0


 1 
SCORE : 0


 1 
SCORE : 0


 1 
SCORE : 0


 1 
SCORE : 0


 1 
SCORE : 0


 1 
SCORE : 0


 1 
SCORE : 0


 1 
SCORE : 0


 1 
SCORE : 0


 1 
SCORE : 0


 /OuputActiveReq Waiting Waiting NbUse:=0 
SCORE : 0


 -Figure 8 
SCORE : 0


 -Figure 7 
SCORE : 0


 -Figure 7 
SCORE : 0


 -Figure 7 
SCORE : 0


 -Figure 7 
SCORE : 0


 -Figure 7 
SCORE : 0


 -Figure 7 
SCORE : 0


 -Figure 7 
SCORE : 0


 -Figure 7 
SCORE : 0


 -Figure 7 
SCORE : 0


 -Figure 7 
SCORE : 0


 -Figure 7 
SCORE : 0


 -Figure 7 
SCORE : 0


 -Figure 7 
SCORE : 0


 -Figure 7 
SCORE : 0


 -Figure 7 
SCORE : 0


 -Figure 7 
SCORE : 0


 -Figure 7 
SCORE : 0


 -Figure 7 
SCORE : 0


 -Figure 7 
SCORE : 0


 -Figure 6 
SCORE : 0


 -Figure 6 
SCORE : 0


 -Figure 6 
SCORE : 0


 -Figure 6 
SCORE : 0


 -Figure 6 
SCORE : 0


 -Figure 6 
SCORE : 0


 -Figure 6 
SCORE : 0


 -Figure 6 
SCORE : 0


 -Figure 6 
SCORE : 0


 -Figure 6 
SCORE : 0


 -Figure 6 
SCORE : 0


 -Figure 6 
SCORE : 0


 -Figure 6 
SCORE : 0


 -Figure 6 
SCORE : 0


 -Figure 6 
SCORE : 0


 -Figure 6 
SCORE : 0


 -Figure 6 
SCORE : 0


 -Figure 6 
SCORE : 0


 -Figure 6 
SCORE : 0


 -Figure 5 
SCORE : 0


 -Figure 5 
SCORE : 0


 -Figure 5 
SCORE : 0


 -Figure 5 
SCORE : 0


 -Figure 5 
SCORE : 0


 -Figure 5 
SCORE : 0


 -Figure 5 
SCORE : 0


 -Figure 5 
SCORE : 0


 -Figure 5 
SCORE : 0


 -Figure 5 
SCORE : 0


 -Figure 5 
SCORE : 0


 -Figure 5 
SCORE : 0


 -Figure 5 
SCORE : 0


 -Figure 5 
SCORE : 0


 -Figure 5 
SCORE : 0


 -Figure 5 
SCORE : 0


 -Figure 5 
SCORE : 0


 -Figure 5 
SCORE : 0


 -Figure 5 
SCORE : 0


 -Figure 5 
SCORE : 0


 -Figure 5 
SCORE : 0


 -Figure 4 
SCORE : 0


 -Figure 4 
SCORE : 0


 -Figure 4 
SCORE : 0


 -Figure 4 
SCORE : 0


 -Figure 4 
SCORE : 0


 -Figure 4 
SCORE : 0


 -Figure 4 
SCORE : 0


 -Figure 4 
SCORE : 0


 -Figure 4 
SCORE : 0


 -Figure 4 
SCORE : 0


 -Figure 4 
SCORE : 0


 -Figure 4 
SCORE : 0


 -Figure 4 
SCORE : 0


 -Figure 4 
SCORE : 0


 -Figure 4 
SCORE : 0


 -Figure 4 
SCORE : 0


 -Figure 4 
SCORE : 0


 -Figure 4 
SCORE : 0


 -Figure 3 
SCORE : 0


 -Figure 3 
SCORE : 0


 -Figure 3 
SCORE : 0


 -Figure 3 
SCORE : 0


 -Figure 3 
SCORE : 0


 -Figure 3 
SCORE : 0


 -Figure 3 
SCORE : 0


 -Figure 3 
SCORE : 0


 -Figure 3 
SCORE : 0


 -Figure 3 
SCORE : 0


 -Figure 3 
SCORE : 0


 -Figure 3 
SCORE : 0


 -Figure 3 
SCORE : 0


 -Figure 2 
SCORE : 0


 -Figure 2 
SCORE : 0


 -Figure 2 
SCORE : 0


 -Figure 2 
SCORE : 0


 -Figure 2 
SCORE : 0


 -Figure 2 
SCORE : 0


 -Figure 2 
SCORE : 0


 -Figure 2 
SCORE : 0


 -Figure 2 
SCORE : 0


 -Figure 2 
SCORE : 0


 -Figure 2 
SCORE : 0


 -Figure 2 
SCORE : 0


 -Figure 2 
SCORE : 0


 -Figure 2 
SCORE : 0


 -Figure 2 
SCORE : 0


 -Figure 1 
SCORE : 0


 -Figure 1 
SCORE : 0


 -Figure 1 
SCORE : 0


 -Figure 1 
SCORE : 0


 -Figure 1 
SCORE : 0


 -Figure 1 
SCORE : 0


 -Figure 1 
SCORE : 0


 -Figure 1 
SCORE : 0


 -Figure 1 
SCORE : 0


 -Figure 1 
SCORE : 0


 -Figure 1 
SCORE : 0


 -Figure 1 
SCORE : 0


 --WaitingTask(TaskState) 
SCORE : 0


 --WaitingTask(TaskState) 
SCORE : 0


 --WaitingTask(TaskState) 
SCORE : 0


 --SIGNAL TaskState : INOUT DefState 
SCORE : 0


 --SIGNAL TaskState : INOUT DefState 
SCORE : 0


 --IF RendezVous THEN WaitingTask(TaskState) 
SCORE : 0


 --IF RendezVous THEN BlockingTask(TaskState) 
SCORE : 0


 --IF RendezVous THEN BlockingTask(TaskState) 
SCORE : 0


 --END IF 
SCORE : 0


 --END IF 
SCORE : 0


 --END IF 
SCORE : 0


 --END IF 
SCORE : 0


 ------------------------------------------------------------------ SIGNAL ProtocolVector : DefProtocolVector(1 TO 2) 
SCORE : 0


 -- PROCEDURE WaitJoin(SIGNAL JoinStatus : INOUT DefForkJoinStatus) IS BEGIN JoinStatus<='0' 
SCORE : 0


 -- PROCEDURE WaitFork(SIGNAL ForkStatus : INOUT DefForkJoinStatus) IS BEGIN ForkStatus<='1' 
SCORE : 0


 -- PROCEDURE WaitConditionalActivation(SIGNAL ProtocolVector:IN DefProtocolVector 
SCORE : 0


 -- PROCEDURE Join(SIGNAL JoinStatus : INOUT DefForkJoinStatus) IS BEGIN JoinStatus<='0' 
SCORE : 0


 -- PROCEDURE Fork(SIGNAL ForkStatus : INOUT DefForkJoinStatus) IS BEGIN ForkStatus<='1' 
SCORE : 0


 -- 
SCORE : 0


 -- 
SCORE : 0


 -- 
SCORE : 0


 -- 
SCORE : 0


 -- 
SCORE : 0


 -- 
SCORE : 0


 - VarValue := LengthOf(VarString) 
SCORE : 0


 - VarValue := IsIn( ListRef,NodeRef ) 
SCORE : 0


 - VarValue := GetTime(Unit) 
SCORE : 0


 - VarString2 := SubStringOf(VarString1, IndexMin, IndexMax) 
SCORE : 0


 - VarString := VarString1 & VarString2  
SCORE : 0


 - VarString := TypeOf(RefDs 
SCORE : 0


 - VarString := LabelOf(RecordDs) 
SCORE : 0


 - ResetVariable( VarRef ) 
SCORE : 0


 - NodeRef := Search( ListRef,TypeName,NodeName) 
SCORE : 0


 - NodeRef := PeekAt( ListRef,Index) 
SCORE : 0


 *Sub(EV) 
SCORE : 0


 *CmdCanalLec[]‘Size-A Opdépot FifoLec: Frag 
SCORE : 0


 *CmdCanalEnr[]‘Size ({ 
SCORE : 0


 *Add(Ev) 
SCORE : 0


 *Add(Ev) 
SCORE : 0


 * OpRetrait‘Time = 0 
SCORE : 0


 * OpEnr OpLec Else ‘Path=‘Id 
SCORE : 0


 * A OpDem * A DemD[:] S ‘Id=NumDisk NumDisk=UniformInt(1,P) 
SCORE : 0


 * A FinEmis ‘Id=CmdCanalEnr[]‘Source 
SCORE : 0


 * A FinEmis ‘Débit = CmdCanalLec[]‘Débit 
SCORE : 0


 ) 
SCORE : 0


 ) 
SCORE : 0


 ) 
SCORE : 0


 ) 
SCORE : 0


 ) 
SCORE : 0


 ) 
SCORE : 0


 ) 
SCORE : 0


 ) 
SCORE : 0


 ) 
SCORE : 0


 ) 
SCORE : 0


 ) 
SCORE : 0


 ) 
SCORE : 0


 ) 
SCORE : 0


 ) 
SCORE : 0


 ) 
SCORE : 0


 ) 
SCORE : 0


 ) 
SCORE : 0


 ) 
SCORE : 0


 ) 
SCORE : 0


 ) 
SCORE : 0


 ) 
SCORE : 0


 ) 
SCORE : 0


 ) 
SCORE : 0


 ) 
SCORE : 0


 ) 
SCORE : 0


 ) 
SCORE : 0


 ) 
SCORE : 0


 ({ 
SCORE : 0


 ({ 
SCORE : 0


 (Op1& 
SCORE : 0


 (Op1& 
SCORE : 0


 (({ 
SCORE : 0


 ( Waiting, Waiting, Waiting, Waiting, Active, ExitNow), -- 
SCORE : 0


 ( Waiting, Waiting, Waiting, Waiting, Active), -- 
SCORE : 0


 ( Nodriver, Inactive, Blocked, Waiting, Active, ExitNow), -- 
SCORE : 0


 ( Nodriver, Inactive, Blocked, Waiting, Active), -- 
SCORE : 0


 ( InactiveReq, InactiveReq, InactiveReq, InactiveReq, InactiveReq), -- 
SCORE : 0


 ( InactiveAck, ActiveAck, InactiveReq, TaskBlocked, TaskBlocked) -- 
SCORE : 0


 ( InactiveAck, ActiveAck, InactiveReq, ActiveReq, InactiveAck), -- 
SCORE : 0


 ( Inactive, Inactive, Inactive, Waiting, Inactive, Inactive), -- 
SCORE : 0


 ( Inactive, Inactive, Inactive, Waiting, Inactive), -- 
SCORE : 0


 ( ExitNow, Inactive, ExitNow, ExitNow, ExitNow, ExitNow) -- 
SCORE : 0


 ( Blocked, Inactive, Blocked, Waiting, Blocked, ExitNow), -- 
SCORE : 0


 ( Blocked, Inactive, Blocked, Waiting, Blocked), -- 
SCORE : 0


 ( ActiveReq, ActiveAck, InactiveReq, ActiveReq, TaskBlocked), -- 
SCORE : 0


 ( ActiveAck, ActiveAck, InactiveReq, ActiveAck, ActiveAck ), -- 
SCORE : 0


 ( Active, Inactive, Blocked, Active, Active) -- 
SCORE : 0


 & ‘Débit=CmdCanalLec[]‘Débit 
SCORE : 0


 & & Op Op1 
SCORE : 0


 "[" Range "]" " 
SCORE : 0


 "ValueOf(" IdName ")"  
SCORE : 0


 "TypeOf(" IdName")"  
SCORE : 0


 "ToolsPath"  
SCORE : 0


 "ToString(" IdName ")"  
SCORE : 0


 "String"  
SCORE : 0


 "SizeOf(" Name ")"  
SCORE : 0


 "Search(" Name "," StringDef "," StringDef ")"  
SCORE : 0


 "ProjectPath"  
SCORE : 0


 "PeekAt(" Name "," Expression ")"  
SCORE : 0


 "OR"  
SCORE : 0


 "LoadDs(" StringDef "," Name "," Integer ")"  
SCORE : 0


 "IsIn(" Name "," IdName ")"  
SCORE : 0


 "IncludeOp(" StringDef "," Integer ")"  
SCORE : 0


 "IncludeComponent(" IdName ")"  
SCORE : 0


 "HierarchyName(" IdName "," IdName "," StringDef ")"  
SCORE : 0


 "GetTime(" Name ")"  
SCORE : 0


 "GetLibraryPath(" IdName ")"  
SCORE : 0


 "GetFreeMemory()"  
SCORE : 0


 "FindStartComponent(" IdName "," StringDef "," StringDef "," Integer ")"  
SCORE : 0


 "FindRelationalElement(" IdName ")"  
SCORE : 0


 "FindModel(" IdName "," Integer ")"  
SCORE : 0


 "FileSeparator"  
SCORE : 0


 "DelDelimiter(" IdName "," StringDef "," StringDef ")"  
SCORE : 0


 "Date"  
SCORE : 0


 "CreateNode(" GrammarName "," NodeType ")"  
SCORE : 0


 "CopyNode(" DataStructure ")"  
SCORE : 0


 "CopyDs(" DataStructure ")"  
SCORE : 0


 "BreakPoint 
SCORE : 0


 "<"  
SCORE : 0


 "-"  
SCORE : 0


 "*"  
SCORE : 0


 "#"  
SCORE : 0


  M 
SCORE : 0


  M 
SCORE : 0


  M 
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


  
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


 
SCORE : 0


